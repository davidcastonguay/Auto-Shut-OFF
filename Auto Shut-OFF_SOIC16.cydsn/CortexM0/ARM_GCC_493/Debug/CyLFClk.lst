ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CyLFClk.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CySysClkIloStart,"ax",%progbits
  18              		.align	2
  19              		.global	CySysClkIloStart
  20              		.code	16
  21              		.thumb_func
  22              		.type	CySysClkIloStart, %function
  23              	CySysClkIloStart:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\CyLFClk.c"
   1:.\Generated_Source\PSoC4/CyLFClk.c **** /***************************************************************************//**
   2:.\Generated_Source\PSoC4/CyLFClk.c **** * \file .c
   3:.\Generated_Source\PSoC4/CyLFClk.c **** * \version 1.10
   4:.\Generated_Source\PSoC4/CyLFClk.c **** *
   5:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
   6:.\Generated_Source\PSoC4/CyLFClk.c **** *  This file provides the source code for configuring watchdog timers WDTs, 
   7:.\Generated_Source\PSoC4/CyLFClk.c **** *  low frequency clocks (LFCLK) and the Real-time Clock (RTC) component in
   8:.\Generated_Source\PSoC4/CyLFClk.c **** *  PSoC Creator for the PSoC 4 families.
   9:.\Generated_Source\PSoC4/CyLFClk.c **** *
  10:.\Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
  11:.\Generated_Source\PSoC4/CyLFClk.c **** * \copyright
  12:.\Generated_Source\PSoC4/CyLFClk.c **** * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/CyLFClk.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/CyLFClk.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/CyLFClk.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/CyLFClk.c **** 
  18:.\Generated_Source\PSoC4/CyLFClk.c **** 
  19:.\Generated_Source\PSoC4/CyLFClk.c **** #include "CyLFClk.h"
  20:.\Generated_Source\PSoC4/CyLFClk.c **** #include "CyLib.h"
  21:.\Generated_Source\PSoC4/CyLFClk.c **** 
  22:.\Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
  23:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void);
  24:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
  25:.\Generated_Source\PSoC4/CyLFClk.c **** 
  26:.\Generated_Source\PSoC4/CyLFClk.c **** 
  27:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
  28:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Default Ilo Trim Register value for ILO trimming*/
  29:.\Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint16 defaultIloTrimRegValue = CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE;
  30:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
  31:.\Generated_Source\PSoC4/CyLFClk.c **** 
  32:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 2


  33:.\Generated_Source\PSoC4/CyLFClk.c ****     /* CySysClkLfclkPosedgeCatch() / CySysClkLfclkPosedgeRestore() */
  34:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Enabled = 0u;
  35:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Mode    = CY_SYS_WDT_MODE_NONE;
  36:.\Generated_Source\PSoC4/CyLFClk.c **** 
  37:.\Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableServicedIsr = 0uL;
  38:.\Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 wdtIsrMask = CY_SYS_WDT_COUNTER0_INT |\
  39:.\Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER1_INT |\
  40:.\Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER2_INT;
  41:.\Generated_Source\PSoC4/CyLFClk.c **** 
  42:.\Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterIntMaskTbl[CY_WDT_NUM_OF_WDT] = {CY_SYS_WDT_COUNTER0_INT,
  43:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER1_INT,
  44:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER2_INT};
  45:.\Generated_Source\PSoC4/CyLFClk.c **** 
  46:.\Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void);
  47:.\Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void);
  48:.\Generated_Source\PSoC4/CyLFClk.c **** 
  49:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void);
  50:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void);
  51:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  52:.\Generated_Source\PSoC4/CyLFClk.c **** 
  53:.\Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
  54:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetTimerSource(void);
  55:.\Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableTimerServicedIsr = 0uL;
  56:.\Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 timerIsrMask = CY_SYS_TIMER0_INT |\
  57:.\Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER1_INT |\
  58:.\Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER2_INT;
  59:.\Generated_Source\PSoC4/CyLFClk.c **** 
  60:.\Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterTimerIntMaskTbl[CY_SYS_NUM_OF_TIMERS] = {CY_SYS_TIMER0_INT,
  61:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER1_INT,
  62:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER2_INT};
  63:.\Generated_Source\PSoC4/CyLFClk.c **** 
  64:.\Generated_Source\PSoC4/CyLFClk.c ****     static cyTimerCallback cySysTimerCallback[CY_SYS_NUM_OF_TIMERS] = {(void *)0, (void *)0, (void 
  65:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_DWT_EN) */
  66:.\Generated_Source\PSoC4/CyLFClk.c **** 
  67:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  68:.\Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback[CY_WDT_NUM_OF_WDT] = {(void *)0, (void *)0, (void *)0};
  69:.\Generated_Source\PSoC4/CyLFClk.c **** #else
  70:.\Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback = (void *)0;
  71:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  72:.\Generated_Source\PSoC4/CyLFClk.c **** 
  73:.\Generated_Source\PSoC4/CyLFClk.c **** 
  74:.\Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  75:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStart
  76:.\Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  77:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
  78:.\Generated_Source\PSoC4/CyLFClk.c **** *  Enables ILO.
  79:.\Generated_Source\PSoC4/CyLFClk.c **** *
  80:.\Generated_Source\PSoC4/CyLFClk.c **** *  Refer to the device datasheet for the ILO startup time.
  81:.\Generated_Source\PSoC4/CyLFClk.c **** *
  82:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  83:.\Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStart(void)
  84:.\Generated_Source\PSoC4/CyLFClk.c **** {
  26              		.loc 1 84 0
  27              		.cfi_startproc
  85:.\Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  28              		.loc 1 85 0
  29 0000 034A     		ldr	r2, .L2
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 3


  30 0002 1368     		ldr	r3, [r2]
  31 0004 8021     		mov	r1, #128
  32 0006 0906     		lsl	r1, r1, #24
  33 0008 0B43     		orr	r3, r1
  34 000a 1360     		str	r3, [r2]
  86:.\Generated_Source\PSoC4/CyLFClk.c **** }
  35              		.loc 1 86 0
  36              		@ sp needed
  37 000c 7047     		bx	lr
  38              	.L3:
  39 000e C046     		.align	2
  40              	.L2:
  41 0010 2C000340 		.word	1073938476
  42              		.cfi_endproc
  43              	.LFE0:
  44              		.size	CySysClkIloStart, .-CySysClkIloStart
  45              		.section	.text.CySysClkIloStop,"ax",%progbits
  46              		.align	2
  47              		.global	CySysClkIloStop
  48              		.code	16
  49              		.thumb_func
  50              		.type	CySysClkIloStop, %function
  51              	CySysClkIloStop:
  52              	.LFB1:
  87:.\Generated_Source\PSoC4/CyLFClk.c **** 
  88:.\Generated_Source\PSoC4/CyLFClk.c **** 
  89:.\Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  90:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStop
  91:.\Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  92:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
  93:.\Generated_Source\PSoC4/CyLFClk.c **** *  Disables the ILO.
  94:.\Generated_Source\PSoC4/CyLFClk.c **** *
  95:.\Generated_Source\PSoC4/CyLFClk.c **** *  This function has no effect if WDT is locked (CySysWdtLock() is
  96:.\Generated_Source\PSoC4/CyLFClk.c **** *  called). Call CySysWdtUnlock() to unlock WDT and stop ILO.
  97:.\Generated_Source\PSoC4/CyLFClk.c **** *
  98:.\Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 / PSoC 4200: Note that ILO is required for WDT's operation.
  99:.\Generated_Source\PSoC4/CyLFClk.c **** *
 100:.\Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L / PSoC 4100M / 
 101:.\Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M:
 102:.\Generated_Source\PSoC4/CyLFClk.c **** *  Stopping ILO affects the peripheral clocked by LFCLK, if
 103:.\Generated_Source\PSoC4/CyLFClk.c **** *  LFCLK is configured to be sourced by ILO.
 104:.\Generated_Source\PSoC4/CyLFClk.c **** *
 105:.\Generated_Source\PSoC4/CyLFClk.c **** *  If the ILO is disabled, all blocks run by ILO will stop functioning.
 106:.\Generated_Source\PSoC4/CyLFClk.c **** *
 107:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 108:.\Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStop(void)
 109:.\Generated_Source\PSoC4/CyLFClk.c **** {
  53              		.loc 1 109 0
  54              		.cfi_startproc
 110:.\Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSV2)
 111:.\Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 112:.\Generated_Source\PSoC4/CyLFClk.c **** 
 113:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Do nothing if WDT is locked or ILO is disabled */
 114:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtLocked())
 115:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 116:.\Generated_Source\PSoC4/CyLFClk.c ****             if (0u != CySysClkIloEnabled())
 117:.\Generated_Source\PSoC4/CyLFClk.c ****             {
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 4


 118:.\Generated_Source\PSoC4/CyLFClk.c **** 
 119:.\Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 120:.\Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_ILO == CySysClkGetLfclkSource())
 121:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 122:.\Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 123:.\Generated_Source\PSoC4/CyLFClk.c **** 
 124:.\Generated_Source\PSoC4/CyLFClk.c ****                 interruptState = CyEnterCriticalSection();
 125:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeCatch();
 126:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 127:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeRestore();
 128:.\Generated_Source\PSoC4/CyLFClk.c ****                 CyExitCriticalSection(interruptState);
 129:.\Generated_Source\PSoC4/CyLFClk.c **** 
 130:.\Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 131:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 132:.\Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 133:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 134:.\Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 135:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 136:.\Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 137:.\Generated_Source\PSoC4/CyLFClk.c **** 
 138:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 139:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 140:.\Generated_Source\PSoC4/CyLFClk.c ****     #else
 141:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_ILO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_ILO_CONFIG_ENABLE);
  55              		.loc 1 141 0
  56 0000 024A     		ldr	r2, .L5
  57 0002 1368     		ldr	r3, [r2]
  58 0004 5B00     		lsl	r3, r3, #1
  59 0006 5B08     		lsr	r3, r3, #1
  60 0008 1360     		str	r3, [r2]
 142:.\Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
 143:.\Generated_Source\PSoC4/CyLFClk.c **** }
  61              		.loc 1 143 0
  62              		@ sp needed
  63 000a 7047     		bx	lr
  64              	.L6:
  65              		.align	2
  66              	.L5:
  67 000c 2C000340 		.word	1073938476
  68              		.cfi_endproc
  69              	.LFE1:
  70              		.size	CySysClkIloStop, .-CySysClkIloStop
  71              		.section	.text.CySysClkIloStartMeasurement,"ax",%progbits
  72              		.align	2
  73              		.global	CySysClkIloStartMeasurement
  74              		.code	16
  75              		.thumb_func
  76              		.type	CySysClkIloStartMeasurement, %function
  77              	CySysClkIloStartMeasurement:
  78              	.LFB2:
 144:.\Generated_Source\PSoC4/CyLFClk.c **** 
 145:.\Generated_Source\PSoC4/CyLFClk.c **** 
 146:.\Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 147:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStartMeasurement
 148:.\Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 149:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 150:.\Generated_Source\PSoC4/CyLFClk.c **** * Starts the ILO accuracy measurement.
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 5


 151:.\Generated_Source\PSoC4/CyLFClk.c **** *
 152:.\Generated_Source\PSoC4/CyLFClk.c **** * This function is non-blocking and needs to be called before using the 
 153:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloTrim() and CySysClkIloCompensate() API.
 154:.\Generated_Source\PSoC4/CyLFClk.c **** *
 155:.\Generated_Source\PSoC4/CyLFClk.c **** * This API configures measurement counters to be sourced by SysClk (Counter 1)
 156:.\Generated_Source\PSoC4/CyLFClk.c **** * and ILO (Counter 2). 
 157:.\Generated_Source\PSoC4/CyLFClk.c **** *
 158:.\Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 159:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 160:.\Generated_Source\PSoC4/CyLFClk.c **** *
 161:.\Generated_Source\PSoC4/CyLFClk.c **** * In addition, this API stores the factory ILO trim settings on the first call 
 162:.\Generated_Source\PSoC4/CyLFClk.c **** * after reset. This stored factory setting is used by the 
 163:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloRestoreFactoryTrim() API to restore the ILO factory trim. 
 164:.\Generated_Source\PSoC4/CyLFClk.c **** * Hence, it is important to call this API before restoring the ILO 
 165:.\Generated_Source\PSoC4/CyLFClk.c **** * factory trim settings.
 166:.\Generated_Source\PSoC4/CyLFClk.c **** *
 167:.\Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 168:.\Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStartMeasurement(void)
 169:.\Generated_Source\PSoC4/CyLFClk.c **** {
  79              		.loc 1 169 0
  80              		.cfi_startproc
 170:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
 171:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint8 iloTrimTrig = 0u;
 172:.\Generated_Source\PSoC4/CyLFClk.c **** 
 173:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Write default ILO trim value while ILO starting ( Cypress ID 225244 )*/
 174:.\Generated_Source\PSoC4/CyLFClk.c ****     if (0u == iloTrimTrig)
 175:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 176:.\Generated_Source\PSoC4/CyLFClk.c ****         defaultIloTrimRegValue = ((uint8)(CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK));
 177:.\Generated_Source\PSoC4/CyLFClk.c ****         iloTrimTrig = 1u;
 178:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 179:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
 180:.\Generated_Source\PSoC4/CyLFClk.c **** 
 181:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Configure measurement counters to source by SysClk (Counter 1) and ILO (Counter 2)*/
 182:.\Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG = (CY_SYS_CLK_DFT_REG & (uint32) ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK) |
  81              		.loc 1 182 0
  82 0000 074A     		ldr	r2, .L8
  83 0002 1168     		ldr	r1, [r2]
  84 0004 074B     		ldr	r3, .L8+4
  85 0006 0B40     		and	r3, r1
  86 0008 8021     		mov	r1, #128
  87 000a 4900     		lsl	r1, r1, #1
  88 000c 0B43     		orr	r3, r1
  89 000e 1360     		str	r3, [r2]
 183:.\Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
 184:.\Generated_Source\PSoC4/CyLFClk.c **** 
 185:.\Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_TST_DDFT_CTRL_REG = (CY_SYS_TST_DDFT_CTRL_REG & (uint32) ~ CY_SYS_TST_DDFT_CTRL_REG_DEFA
  90              		.loc 1 185 0
  91 0010 054A     		ldr	r2, .L8+8
  92 0012 1168     		ldr	r1, [r2]
  93 0014 054B     		ldr	r3, .L8+12
  94 0016 0B40     		and	r3, r1
  95 0018 0549     		ldr	r1, .L8+16
  96 001a 0B43     		orr	r3, r1
  97 001c 1360     		str	r3, [r2]
 186:.\Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
 187:.\Generated_Source\PSoC4/CyLFClk.c **** }
  98              		.loc 1 187 0
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 6


  99              		@ sp needed
 100 001e 7047     		bx	lr
 101              	.L9:
 102              		.align	2
 103              	.L8:
 104 0020 34000340 		.word	1073938484
 105 0024 FFF0FFFF 		.word	-3841
 106 0028 18000340 		.word	1073938456
 107 002c F0F0FFFF 		.word	-3856
 108 0030 08090000 		.word	2312
 109              		.cfi_endproc
 110              	.LFE2:
 111              		.size	CySysClkIloStartMeasurement, .-CySysClkIloStartMeasurement
 112              		.section	.text.CySysClkIloStopMeasurement,"ax",%progbits
 113              		.align	2
 114              		.global	CySysClkIloStopMeasurement
 115              		.code	16
 116              		.thumb_func
 117              		.type	CySysClkIloStopMeasurement, %function
 118              	CySysClkIloStopMeasurement:
 119              	.LFB3:
 188:.\Generated_Source\PSoC4/CyLFClk.c **** 
 189:.\Generated_Source\PSoC4/CyLFClk.c **** 
 190:.\Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 191:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStopMeasurement
 192:.\Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 193:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 194:.\Generated_Source\PSoC4/CyLFClk.c **** * Stops the ILO accuracy measurement.
 195:.\Generated_Source\PSoC4/CyLFClk.c **** *
 196:.\Generated_Source\PSoC4/CyLFClk.c **** * Calling this function immediately stops the the ILO frequency measurement.
 197:.\Generated_Source\PSoC4/CyLFClk.c **** * This function should be called before placing the device to deepsleep, if 
 198:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API was called before. 
 199:.\Generated_Source\PSoC4/CyLFClk.c **** *
 200:.\Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 201:.\Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStopMeasurement(void)
 202:.\Generated_Source\PSoC4/CyLFClk.c **** {
 120              		.loc 1 202 0
 121              		.cfi_startproc
 203:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Set default configurations in 11...8 DFT register bits to zero */
 204:.\Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG &= ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK;
 122              		.loc 1 204 0
 123 0000 054A     		ldr	r2, .L11
 124 0002 1168     		ldr	r1, [r2]
 125 0004 054B     		ldr	r3, .L11+4
 126 0006 0B40     		and	r3, r1
 127 0008 1360     		str	r3, [r2]
 205:.\Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 206:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_TST_DDFT_CTRL_REG &= ((uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 128              		.loc 1 206 0
 129 000a 054A     		ldr	r2, .L11+8
 130 000c 1168     		ldr	r1, [r2]
 131 000e 054B     		ldr	r3, .L11+12
 132 0010 0B40     		and	r3, r1
 133 0012 1360     		str	r3, [r2]
 207:.\Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
 208:.\Generated_Source\PSoC4/CyLFClk.c **** }
 134              		.loc 1 208 0
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 7


 135              		@ sp needed
 136 0014 7047     		bx	lr
 137              	.L12:
 138 0016 C046     		.align	2
 139              	.L11:
 140 0018 34000340 		.word	1073938484
 141 001c FFF0FFFF 		.word	-3841
 142 0020 18000340 		.word	1073938456
 143 0024 0F0F0000 		.word	3855
 144              		.cfi_endproc
 145              	.LFE3:
 146              		.size	CySysClkIloStopMeasurement, .-CySysClkIloStopMeasurement
 147              		.global	__aeabi_uidiv
 148              		.section	.text.CySysClkIloCompensate,"ax",%progbits
 149              		.align	2
 150              		.global	CySysClkIloCompensate
 151              		.code	16
 152              		.thumb_func
 153              		.type	CySysClkIloCompensate, %function
 154              	CySysClkIloCompensate:
 155              	.LFB4:
 209:.\Generated_Source\PSoC4/CyLFClk.c **** 
 210:.\Generated_Source\PSoC4/CyLFClk.c **** 
 211:.\Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 212:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloCompensate
 213:.\Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 214:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 215:.\Generated_Source\PSoC4/CyLFClk.c **** * This API measures the current ILO accuracy.
 216:.\Generated_Source\PSoC4/CyLFClk.c **** *
 217:.\Generated_Source\PSoC4/CyLFClk.c **** * Basing on the measured frequency the required number of ILO cycles for a 
 218:.\Generated_Source\PSoC4/CyLFClk.c **** * given delay (in microseconds) is obtained. The desired delay that needs to 
 219:.\Generated_Source\PSoC4/CyLFClk.c **** * be compensated is passed through the desiredDelay parameter. The compensated 
 220:.\Generated_Source\PSoC4/CyLFClk.c **** * cycle count is returned through the compesatedCycles pointer.
 221:.\Generated_Source\PSoC4/CyLFClk.c **** * The compensated ILO cycles can then be used to define the WDT period value, 
 222:.\Generated_Source\PSoC4/CyLFClk.c **** * effectively compensating for the ILO inaccuracy and allowing a more 
 223:.\Generated_Source\PSoC4/CyLFClk.c **** * accurate WDT interrupt generation.
 224:.\Generated_Source\PSoC4/CyLFClk.c **** *
 225:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API should be called prior to calling this API. 
 226:.\Generated_Source\PSoC4/CyLFClk.c **** *
 227:.\Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 228:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 229:.\Generated_Source\PSoC4/CyLFClk.c **** *
 230:.\Generated_Source\PSoC4/CyLFClk.c **** * \note If the System clock frequency is changed in runtime, the CyDelayFreq() 
 231:.\Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 232:.\Generated_Source\PSoC4/CyLFClk.c **** * called before calling a next CySysClkIloCompensate().
 233:.\Generated_Source\PSoC4/CyLFClk.c **** *
 234:.\Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS.
 235:.\Generated_Source\PSoC4/CyLFClk.c **** *
 236:.\Generated_Source\PSoC4/CyLFClk.c **** * \param desiredDelay Required delay in microseconds.
 237:.\Generated_Source\PSoC4/CyLFClk.c **** *
 238:.\Generated_Source\PSoC4/CyLFClk.c **** * \param *compensatedCycles The pointer to the variable in which the required
 239:.\Generated_Source\PSoC4/CyLFClk.c **** * number of ILO cycles for the given delay will be returned.
 240:.\Generated_Source\PSoC4/CyLFClk.c **** *
 241:.\Generated_Source\PSoC4/CyLFClk.c **** * \details
 242:.\Generated_Source\PSoC4/CyLFClk.c **** * The value returned in *compensatedCycles pointer is not valid until the 
 243:.\Generated_Source\PSoC4/CyLFClk.c **** * function returns CYRET_SUCCESS.
 244:.\Generated_Source\PSoC4/CyLFClk.c **** *
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 8


 245:.\Generated_Source\PSoC4/CyLFClk.c **** * The desiredDelay parameter value should be in next range: <br>From 100 to 
 246:.\Generated_Source\PSoC4/CyLFClk.c **** * 2 000 000 microseconds for PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
 247:.\Generated_Source\PSoC4/CyLFClk.c **** * Coprocessor devices.<br>From 100 to 4 000 000 000 microseconds for 
 248:.\Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE /
 249:.\Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L / PSoC 4100M /PSoC 4200M devices.
 250:.\Generated_Source\PSoC4/CyLFClk.c **** *
 251:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - The compensation process is complete and the 
 252:.\Generated_Source\PSoC4/CyLFClk.c **** * compensated cycles value is returned in the compensatedCycles pointer.
 253:.\Generated_Source\PSoC4/CyLFClk.c **** *
 254:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. It is 
 255:.\Generated_Source\PSoC4/CyLFClk.c **** * strongly recommended to do not make pauses between API calling. The 
 256:.\Generated_Source\PSoC4/CyLFClk.c **** * function should be called repeatedly until the API returns CYRET_SUCCESS.
 257:.\Generated_Source\PSoC4/CyLFClk.c **** *
 258:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates that measurement not started. 
 259:.\Generated_Source\PSoC4/CyLFClk.c **** * The user should call CySysClkIloStartMeasurement() API before calling 
 260:.\Generated_Source\PSoC4/CyLFClk.c **** * this API.
 261:.\Generated_Source\PSoC4/CyLFClk.c **** *
 262:.\Generated_Source\PSoC4/CyLFClk.c **** * \note For a correct WDT or DeepSleep Timers functioning with ILO compensating 
 263:.\Generated_Source\PSoC4/CyLFClk.c **** * the CySysClkIloCompensate() should be called before WDT or DeepSleep Timers 
 264:.\Generated_Source\PSoC4/CyLFClk.c **** * enabling.
 265:.\Generated_Source\PSoC4/CyLFClk.c **** *
 266:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 267:.\Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloCompensate(uint32 desiredDelay , uint32* compensatedCycles)
 268:.\Generated_Source\PSoC4/CyLFClk.c **** {
 156              		.loc 1 268 0
 157              		.cfi_startproc
 158              	.LVL0:
 159 0000 70B5     		push	{r4, r5, r6, lr}
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 4, -16
 162              		.cfi_offset 5, -12
 163              		.cfi_offset 6, -8
 164              		.cfi_offset 14, -4
 269:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 iloCompensatedCycles;
 270:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 desiredDelayInCounts;
 271:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 272:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 273:.\Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 274:.\Generated_Source\PSoC4/CyLFClk.c **** 
 275:.\Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 165              		.loc 1 275 0
 166 0002 344B     		ldr	r3, .L25
 167 0004 1A68     		ldr	r2, [r3]
 168 0006 344B     		ldr	r3, .L25+4
 169 0008 1340     		and	r3, r2
 170              	.LVL1:
 276:.\Generated_Source\PSoC4/CyLFClk.c **** 
 277:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Check if CySysStartMeasurement was called before */
 278:.\Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) && 
 171              		.loc 1 278 0
 172 000a 8022     		mov	r2, #128
 173 000c 5200     		lsl	r2, r2, #1
 174 000e 9342     		cmp	r3, r2
 175 0010 52D1     		bne	.L18
 279:.\Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 176              		.loc 1 279 0 discriminator 1
 177 0012 324B     		ldr	r3, .L25+8
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 9


 178              	.LVL2:
 179 0014 1A68     		ldr	r2, [r3]
 278:.\Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 180              		.loc 1 278 0 discriminator 1
 181 0016 324B     		ldr	r3, .L25+12
 182 0018 9A42     		cmp	r2, r3
 183 001a 4FD1     		bne	.L19
 184              		.loc 1 279 0
 185 001c 314B     		ldr	r3, .L25+16
 186 001e 9842     		cmp	r0, r3
 187 0020 4ED8     		bhi	.L20
 280:.\Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MAX_DELAY_US >= desiredDelay) &&
 188              		.loc 1 280 0
 189 0022 6328     		cmp	r0, #99
 190 0024 4ED9     		bls	.L21
 281:.\Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 191              		.loc 1 281 0
 192 0026 0029     		cmp	r1, #0
 193 0028 4ED0     		beq	.L22
 282:.\Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
 283:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 284:.\Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_TRIM_OR_COMP_FINISHED != compensateRunningStatus)
 194              		.loc 1 284 0
 195 002a 2F4B     		ldr	r3, .L25+20
 196 002c 1B68     		ldr	r3, [r3]
 197 002e 002B     		cmp	r3, #0
 198 0030 38D0     		beq	.L15
 285:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 286:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Wait until counter 1 stopped counting and after it calculate compensated cycles */
 287:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 199              		.loc 1 287 0
 200 0032 2E4B     		ldr	r3, .L25+24
 201 0034 1B68     		ldr	r3, [r3]
 202 0036 002B     		cmp	r3, #0
 203 0038 48DA     		bge	.L23
 288:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 289:.\Generated_Source\PSoC4/CyLFClk.c ****                 if (0u != CY_SYS_CNT_REG2_REG)
 204              		.loc 1 289 0
 205 003a 2D4B     		ldr	r3, .L25+28
 206 003c 1B68     		ldr	r3, [r3]
 207 003e 002B     		cmp	r3, #0
 208 0040 46D0     		beq	.L24
 209 0042 0D1C     		mov	r5, r1
 290:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 291:.\Generated_Source\PSoC4/CyLFClk.c ****                     /* Calculate required number of ILO cycles for given delay */
 292:.\Generated_Source\PSoC4/CyLFClk.c ****                     #if(CY_IP_SRSSV2)
 293:.\Generated_Source\PSoC4/CyLFClk.c ****                         if (CY_SYS_CLK_DELAY_COUNTS_LIMIT < desiredDelay)
 294:.\Generated_Source\PSoC4/CyLFClk.c ****                         {
 295:.\Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = (desiredDelay / CY_SYS_CLK_ILO_PERIOD);
 296:.\Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = 
 297:.\Generated_Source\PSoC4/CyLFClk.c ****                             (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_
 298:.\Generated_Source\PSoC4/CyLFClk.c ****                                 CY_SYS_CLK_ILO_FREQ_2MSB) * (desiredDelayInCounts / CY_SYS_CLK_ILO_
 299:.\Generated_Source\PSoC4/CyLFClk.c ****                         }
 300:.\Generated_Source\PSoC4/CyLFClk.c ****                         else
 301:.\Generated_Source\PSoC4/CyLFClk.c ****                         {
 302:.\Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + 
 303:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      CY_SYS_CLK_HALF_OF_CLOCK) / CY_SYS_CLK_ILO_PER
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 10


 304:.\Generated_Source\PSoC4/CyLFClk.c **** 
 305:.\Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 306:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 307:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 308:.\Generated_Source\PSoC4/CyLFClk.c ****                         }
 309:.\Generated_Source\PSoC4/CyLFClk.c ****                     #else /* (CY_IP_SRSSLT) */
 310:.\Generated_Source\PSoC4/CyLFClk.c ****                         desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + CY_SYS_
 210              		.loc 1 310 0
 211 0044 6423     		mov	r3, #100
 212 0046 5843     		mul	r0, r3
 213              	.LVL3:
 214 0048 2A4B     		ldr	r3, .L25+32
 215 004a 9C46     		mov	ip, r3
 216 004c 6044     		add	r0, r0, ip
 217 004e 2A49     		ldr	r1, .L25+36
 218              	.LVL4:
 219 0050 FFF7FEFF 		bl	__aeabi_uidiv
 220              	.LVL5:
 221 0054 041E     		sub	r4, r0, #0
 222              	.LVL6:
 311:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 312:.\Generated_Source\PSoC4/CyLFClk.c ****                         if(CY_SYS_CLK_MAX_LITE_NUMBER < desiredDelayInCounts)
 223              		.loc 1 312 0
 224 0056 294B     		ldr	r3, .L25+40
 225 0058 9C42     		cmp	r4, r3
 226 005a 12D9     		bls	.L16
 313:.\Generated_Source\PSoC4/CyLFClk.c ****                         {
 314:.\Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydel
 227              		.loc 1 314 0
 228 005c 244B     		ldr	r3, .L25+28
 229 005e 1868     		ldr	r0, [r3]
 230              	.LVL7:
 231 0060 274B     		ldr	r3, .L25+44
 232 0062 1968     		ldr	r1, [r3]
 233 0064 4843     		mul	r0, r1
 234 0066 890A     		lsr	r1, r1, #10
 235 0068 FFF7FEFF 		bl	__aeabi_uidiv
 236              	.LVL8:
 315:.\Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 237              		.loc 1 315 0
 238 006c 2821     		mov	r1, #40
 239 006e FFF7FEFF 		bl	__aeabi_uidiv
 240              	.LVL9:
 241 0072 061C     		mov	r6, r0
 316:.\Generated_Source\PSoC4/CyLFClk.c ****                                                    (desiredDelayInCounts / CY_SYS_CLK_ILO_FREQ_3LSB
 242              		.loc 1 316 0
 243 0074 201C     		mov	r0, r4
 244 0076 FA21     		mov	r1, #250
 245 0078 8900     		lsl	r1, r1, #2
 246 007a FFF7FEFF 		bl	__aeabi_uidiv
 247              	.LVL10:
 314:.\Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 248              		.loc 1 314 0
 249 007e 7043     		mul	r0, r6
 250              	.LVL11:
 251 0080 0BE0     		b	.L17
 252              	.LVL12:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 11


 253              	.L16:
 317:.\Generated_Source\PSoC4/CyLFClk.c ****                         }
 318:.\Generated_Source\PSoC4/CyLFClk.c ****                         else
 319:.\Generated_Source\PSoC4/CyLFClk.c ****                         {
 320:.\Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 254              		.loc 1 320 0
 255 0082 1B4B     		ldr	r3, .L25+28
 256 0084 1868     		ldr	r0, [r3]
 257              	.LVL13:
 258 0086 1E4B     		ldr	r3, .L25+44
 259 0088 1968     		ldr	r1, [r3]
 260 008a 4843     		mul	r0, r1
 321:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 261              		.loc 1 321 0
 262 008c 890A     		lsr	r1, r1, #10
 320:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 263              		.loc 1 320 0
 264 008e FFF7FEFF 		bl	__aeabi_uidiv
 265              	.LVL14:
 266              		.loc 1 321 0
 267 0092 6043     		mul	r0, r4
 320:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 268              		.loc 1 320 0
 269 0094 1B49     		ldr	r1, .L25+48
 270 0096 FFF7FEFF 		bl	__aeabi_uidiv
 271              	.LVL15:
 272              	.L17:
 322:.\Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 323:.\Generated_Source\PSoC4/CyLFClk.c ****                         }
 324:.\Generated_Source\PSoC4/CyLFClk.c ****                     #endif /* (CY_IP_SRSSV2) */
 325:.\Generated_Source\PSoC4/CyLFClk.c **** 
 326:.\Generated_Source\PSoC4/CyLFClk.c ****                     *compensatedCycles = iloCompensatedCycles;
 273              		.loc 1 326 0
 274 009a 2860     		str	r0, [r5]
 327:.\Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 275              		.loc 1 327 0
 276 009c 0020     		mov	r0, #0
 277              	.LVL16:
 278 009e 124B     		ldr	r3, .L25+20
 279 00a0 1860     		str	r0, [r3]
 280              	.LVL17:
 281 00a2 16E0     		b	.L14
 282              	.LVL18:
 283              	.L15:
 328:.\Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 329:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 330:.\Generated_Source\PSoC4/CyLFClk.c ****                 else
 331:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 332:.\Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus  = CYRET_INVALID_STATE;
 333:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 334:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 335:.\Generated_Source\PSoC4/CyLFClk.c ****             else
 336:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 337:.\Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 338:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 339:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 340:.\Generated_Source\PSoC4/CyLFClk.c ****         else
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 12


 341:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 342:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Reload CNTR 1 count value for next measurement cycle*/
 343:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CNT_REG1_REG = (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER);
 284              		.loc 1 343 0
 285 00a4 164B     		ldr	r3, .L25+44
 286 00a6 1B68     		ldr	r3, [r3]
 287 00a8 9B0A     		lsr	r3, r3, #10
 288 00aa 104A     		ldr	r2, .L25+24
 289 00ac 1360     		str	r3, [r2]
 344:.\Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 290              		.loc 1 344 0
 291 00ae 0122     		mov	r2, #1
 292 00b0 0D4B     		ldr	r3, .L25+20
 293 00b2 1A60     		str	r2, [r3]
 294              	.LVL19:
 345:.\Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 295              		.loc 1 345 0
 296 00b4 0720     		mov	r0, #7
 297              	.LVL20:
 298 00b6 0CE0     		b	.L14
 299              	.LVL21:
 300              	.L18:
 346:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 347:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 348:.\Generated_Source\PSoC4/CyLFClk.c ****     else
 349:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 350:.\Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 301              		.loc 1 350 0
 302 00b8 1120     		mov	r0, #17
 303              	.LVL22:
 304 00ba 0AE0     		b	.L14
 305              	.LVL23:
 306              	.L19:
 307 00bc 1120     		mov	r0, #17
 308              	.LVL24:
 309 00be 08E0     		b	.L14
 310              	.LVL25:
 311              	.L20:
 312 00c0 1120     		mov	r0, #17
 313              	.LVL26:
 314 00c2 06E0     		b	.L14
 315              	.LVL27:
 316              	.L21:
 317 00c4 1120     		mov	r0, #17
 318              	.LVL28:
 319 00c6 04E0     		b	.L14
 320              	.LVL29:
 321              	.L22:
 322 00c8 1120     		mov	r0, #17
 323              	.LVL30:
 324 00ca 02E0     		b	.L14
 325              	.LVL31:
 326              	.L23:
 337:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 327              		.loc 1 337 0
 328 00cc 0720     		mov	r0, #7
 329              	.LVL32:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 13


 330 00ce 00E0     		b	.L14
 331              	.LVL33:
 332              	.L24:
 332:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 333              		.loc 1 332 0
 334 00d0 1120     		mov	r0, #17
 335              	.LVL34:
 336              	.L14:
 351:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 352:.\Generated_Source\PSoC4/CyLFClk.c **** 
 353:.\Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 354:.\Generated_Source\PSoC4/CyLFClk.c **** }
 337              		.loc 1 354 0
 338              		@ sp needed
 339 00d2 70BD     		pop	{r4, r5, r6, pc}
 340              	.L26:
 341              		.align	2
 342              	.L25:
 343 00d4 34000340 		.word	1073938484
 344 00d8 0F0F0000 		.word	3855
 345 00dc 18000340 		.word	1073938456
 346 00e0 08090000 		.word	2312
 347 00e4 80841E00 		.word	2000000
 348 00e8 00000000 		.word	.LANCHOR0
 349 00ec 1C000340 		.word	1073938460
 350 00f0 20000340 		.word	1073938464
 351 00f4 71020000 		.word	625
 352 00f8 C4090000 		.word	2500
 353 00fc 60D10000 		.word	53600
 354 0100 00000000 		.word	cydelayFreqHz
 355 0104 409C0000 		.word	40000
 356              		.cfi_endproc
 357              	.LFE4:
 358              		.size	CySysClkIloCompensate, .-CySysClkIloCompensate
 359              		.section	.text.CySysWdtGetEnabledStatus,"ax",%progbits
 360              		.align	2
 361              		.global	CySysWdtGetEnabledStatus
 362              		.code	16
 363              		.thumb_func
 364              		.type	CySysWdtGetEnabledStatus, %function
 365              	CySysWdtGetEnabledStatus:
 366              	.LFB5:
 355:.\Generated_Source\PSoC4/CyLFClk.c **** 
 356:.\Generated_Source\PSoC4/CyLFClk.c **** 
 357:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 358:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 359:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkIloEnabled
 360:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 361:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 362:.\Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 363:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reports the ILO enable state.
 364:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 365:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return
 366:.\Generated_Source\PSoC4/CyLFClk.c ****     * 1 if ILO is enabled, and 0 if ILO is disabled.
 367:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 368:.\Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 369:.\Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************/
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 14


 370:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void)
 371:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 372:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal to 0 */
 373:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_ILO_CONFIG_REG & (uint32)(CY_SYS_CLK_ILO_CONFIG_ENABLE))) ?
 374:.\Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 1u :
 375:.\Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 0u);
 376:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 377:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
 378:.\Generated_Source\PSoC4/CyLFClk.c **** 
 379:.\Generated_Source\PSoC4/CyLFClk.c **** 
 380:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
 381:.\Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 382:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloTrim
 383:.\Generated_Source\PSoC4/CyLFClk.c **** *****************************************************************************//**
 384:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 385:.\Generated_Source\PSoC4/CyLFClk.c **** * The API trims the ILO frequency to +/- 10% accuracy range using accurate 
 386:.\Generated_Source\PSoC4/CyLFClk.c **** * SysClk.
 387:.\Generated_Source\PSoC4/CyLFClk.c **** *
 388:.\Generated_Source\PSoC4/CyLFClk.c **** * The API can be blocking or non-blocking depending on the value of the mode 
 389:.\Generated_Source\PSoC4/CyLFClk.c **** * parameter passed. The accuracy of ILO after trimming in parts per thousand 
 390:.\Generated_Source\PSoC4/CyLFClk.c **** * is returned through the iloAccuracyInPPT pointer. A positive number indicates 
 391:.\Generated_Source\PSoC4/CyLFClk.c **** * that the ILO is running fast and a negative number indicates that the ILO is 
 392:.\Generated_Source\PSoC4/CyLFClk.c **** * running slowly. This error is relative to the error in the reference clock 
 393:.\Generated_Source\PSoC4/CyLFClk.c **** * (SysClk), so the absolute error will be higher and depends on the accuracy 
 394:.\Generated_Source\PSoC4/CyLFClk.c **** * of the reference.
 395:.\Generated_Source\PSoC4/CyLFClk.c **** *
 396:.\Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to calling this 
 397:.\Generated_Source\PSoC4/CyLFClk.c **** * API. Otherwise it will return CYRET_INVALID_STATE as the measurement was not 
 398:.\Generated_Source\PSoC4/CyLFClk.c **** * started.
 399:.\Generated_Source\PSoC4/CyLFClk.c **** *
 400:.\Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 401:.\Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 402:.\Generated_Source\PSoC4/CyLFClk.c **** *
 403:.\Generated_Source\PSoC4/CyLFClk.c **** * \note If System clock frequency is changed in runtime, the CyDelayFreq() 
 404:.\Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 405:.\Generated_Source\PSoC4/CyLFClk.c **** * called before next CySysClkIloCompensate() usage.
 406:.\Generated_Source\PSoC4/CyLFClk.c **** *
 407:.\Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS
 408:.\Generated_Source\PSoC4/CyLFClk.c **** * or CYRET_TIMEOUT.
 409:.\Generated_Source\PSoC4/CyLFClk.c **** *
 410:.\Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices with ILO trim capability. This excludes 
 411:.\Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4000 / PSoC 4100 / PSoC 4200 / PSoC 4000S / PSoC 4100S / PSoC
 412:.\Generated_Source\PSoC4/CyLFClk.c **** * Analog Coprocessor devices.
 413:.\Generated_Source\PSoC4/CyLFClk.c **** *
 414:.\Generated_Source\PSoC4/CyLFClk.c **** * \param mode
 415:.\Generated_Source\PSoC4/CyLFClk.c **** *  CY_SYS_CLK_BLOCKING -  The function does not return until the ILO is 
 416:.\Generated_Source\PSoC4/CyLFClk.c **** * within +/-10% accuracy range or time out has occurred.<br>
 417:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_NON_BLOCKING - The function returns immediately after 
 418:.\Generated_Source\PSoC4/CyLFClk.c **** * performing a single iteration of the trim process. The function should be 
 419:.\Generated_Source\PSoC4/CyLFClk.c **** * called repeatedly until the trimming is completed successfully.
 420:.\Generated_Source\PSoC4/CyLFClk.c **** *
 421:.\Generated_Source\PSoC4/CyLFClk.c **** * \param *iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 422:.\Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned.
 423:.\Generated_Source\PSoC4/CyLFClk.c **** *
 424:.\Generated_Source\PSoC4/CyLFClk.c **** * \details The value returned in *iloAccuracyInPPT pointer is not valid 
 425:.\Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. ILO accuracy in PPT is given by:
 426:.\Generated_Source\PSoC4/CyLFClk.c **** *
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 15


 427:.\Generated_Source\PSoC4/CyLFClk.c **** * IloAccuracyInPPT = ((MeasuredIloFreq - DesiredIloFreq) * 
 428:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_PERTHOUSAND) / DesiredIloFreq);
 429:.\Generated_Source\PSoC4/CyLFClk.c **** *
 430:.\Generated_Source\PSoC4/CyLFClk.c **** * DesiredIloFreq  = 32000, CY_SYS_CLK_PERTHOUSAND = 1000;
 431:.\Generated_Source\PSoC4/CyLFClk.c **** *
 432:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates trimming is complete. This value indicates 
 433:.\Generated_Source\PSoC4/CyLFClk.c **** * trimming is successful and iloAccuracyInPPT is within +/- 10%.
 434:.\Generated_Source\PSoC4/CyLFClk.c **** *
 435:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. This is applicable 
 436:.\Generated_Source\PSoC4/CyLFClk.c **** * only for non-blocking mode.
 437:.\Generated_Source\PSoC4/CyLFClk.c **** *
 438:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful. You should 
 439:.\Generated_Source\PSoC4/CyLFClk.c **** * call CySysClkIloStartMeasurement() before calling this API.
 440:.\Generated_Source\PSoC4/CyLFClk.c **** *
 441:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_TIMEOUT - Indicates trimming was unsuccessful. This is applicable 
 442:.\Generated_Source\PSoC4/CyLFClk.c **** * only for blocking mode. Timeout means the trimming was tried 5 times without 
 443:.\Generated_Source\PSoC4/CyLFClk.c **** * success (i.e. ILO accuracy > +/- 10%). The user can call the API again for 
 444:.\Generated_Source\PSoC4/CyLFClk.c **** * another try or wait for some time before calling it again (to let the system 
 445:.\Generated_Source\PSoC4/CyLFClk.c **** * to settle to another operating point change in temperature etc.) and continue 
 446:.\Generated_Source\PSoC4/CyLFClk.c **** * using the previous trim value till the next call.
 447:.\Generated_Source\PSoC4/CyLFClk.c **** *
 448:.\Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 449:.\Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloTrim(uint32 mode, int32* iloAccuracyInPPT)
 450:.\Generated_Source\PSoC4/CyLFClk.c **** {
 451:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 timeOutClocks = CY_SYS_CLK_TIMEOUT;
 452:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 waitUntilCntr1Stops;
 453:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 454:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 455:.\Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 456:.\Generated_Source\PSoC4/CyLFClk.c **** 
 457:.\Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 458:.\Generated_Source\PSoC4/CyLFClk.c **** 
 459:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Check if DFT and CTRL registers were configures in CySysStartMeasurement*/
 460:.\Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) &&
 461:.\Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 462:.\Generated_Source\PSoC4/CyLFClk.c ****        (iloAccuracyInPPT != NULL))
 463:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 464:.\Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_BLOCKING == mode)
 465:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 466:.\Generated_Source\PSoC4/CyLFClk.c ****             waitUntilCntr1Stops = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 467:.\Generated_Source\PSoC4/CyLFClk.c ****             do
 468:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 469:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for measuring cycle*/
 470:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER; 
 471:.\Generated_Source\PSoC4/CyLFClk.c **** 
 472:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait until counter CNTR 1 will finish down-counting */
 473:.\Generated_Source\PSoC4/CyLFClk.c ****                 while (0u == (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 474:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 475:.\Generated_Source\PSoC4/CyLFClk.c ****                     waitUntilCntr1Stops--;
 476:.\Generated_Source\PSoC4/CyLFClk.c ****                     if (0u == waitUntilCntr1Stops)
 477:.\Generated_Source\PSoC4/CyLFClk.c ****                     {
 478:.\Generated_Source\PSoC4/CyLFClk.c ****                         break;
 479:.\Generated_Source\PSoC4/CyLFClk.c ****                     }
 480:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 481:.\Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 482:.\Generated_Source\PSoC4/CyLFClk.c ****                 timeOutClocks--;
 483:.\Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 16


 484:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Untill ILO accuracy will be in range less than +/- 10% or timeout occurs*/
 485:.\Generated_Source\PSoC4/CyLFClk.c ****             } while((CYRET_SUCCESS != trimRunningStatus) && 
 486:.\Generated_Source\PSoC4/CyLFClk.c ****               (CYRET_INVALID_STATE != trimRunningStatus) && 
 487:.\Generated_Source\PSoC4/CyLFClk.c ****                                (0u != timeOutClocks));
 488:.\Generated_Source\PSoC4/CyLFClk.c **** 
 489:.\Generated_Source\PSoC4/CyLFClk.c ****             if (CYRET_SUCCESS == trimRunningStatus)
 490:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 491:.\Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_SUCCESS;
 492:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 493:.\Generated_Source\PSoC4/CyLFClk.c ****             else
 494:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 495:.\Generated_Source\PSoC4/CyLFClk.c ****                 if(0u == timeOutClocks)
 496:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 497:.\Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 498:.\Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_TIMEOUT;
 499:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 500:.\Generated_Source\PSoC4/CyLFClk.c ****                 else
 501:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 502:.\Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_INVALID_STATE;
 503:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 504:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 505:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 506:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Non - blocking mode */
 507:.\Generated_Source\PSoC4/CyLFClk.c ****         else
 508:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 509:.\Generated_Source\PSoC4/CyLFClk.c ****             if (CY_SYS_CLK_TRIM_OR_COMP_FINISHED != trimRunningStatus)
 510:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 511:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Checking if the counter CNTR 1 finished down-counting */
 512:.\Generated_Source\PSoC4/CyLFClk.c ****                 if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 513:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 514:.\Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 515:.\Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 516:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 517:.\Generated_Source\PSoC4/CyLFClk.c ****                 else
 518:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 519:.\Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_STARTED;
 520:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 521:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 522:.\Generated_Source\PSoC4/CyLFClk.c ****             else
 523:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 524:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for next measuring */
 525:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 526:.\Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 527:.\Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 528:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 529:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 530:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 531:.\Generated_Source\PSoC4/CyLFClk.c ****     else
 532:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 533:.\Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 534:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 535:.\Generated_Source\PSoC4/CyLFClk.c **** 
 536:.\Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 537:.\Generated_Source\PSoC4/CyLFClk.c **** }
 538:.\Generated_Source\PSoC4/CyLFClk.c **** 
 539:.\Generated_Source\PSoC4/CyLFClk.c **** 
 540:.\Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 17


 541:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloUpdateTrimReg
 542:.\Generated_Source\PSoC4/CyLFClk.c **** *********************************************************************************
 543:.\Generated_Source\PSoC4/CyLFClk.c **** *
 544:.\Generated_Source\PSoC4/CyLFClk.c **** * \internal
 545:.\Generated_Source\PSoC4/CyLFClk.c **** * Function calculates ILO accuracy and check is error range is higher than 
 546:.\Generated_Source\PSoC4/CyLFClk.c **** * +/- 10%. If Measured frequency is higher than +/- 10% function updates 
 547:.\Generated_Source\PSoC4/CyLFClk.c **** * ILO Trim register.
 548:.\Generated_Source\PSoC4/CyLFClk.c **** *
 549:.\Generated_Source\PSoC4/CyLFClk.c **** * \param
 550:.\Generated_Source\PSoC4/CyLFClk.c **** * iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 551:.\Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned. The value returned in this pointer is not valid 
 552:.\Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. If ILO frequency error is lower 
 553:.\Generated_Source\PSoC4/CyLFClk.c **** * than +/- 10% then the value returned in this pointer will be updated.
 554:.\Generated_Source\PSoC4/CyLFClk.c **** *
 555:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates that ILO frequency error is lower than 
 556:.\Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and no actions are required.
 557:.\Generated_Source\PSoC4/CyLFClk.c **** *
 558:.\Generated_Source\PSoC4/CyLFClk.c **** * \return  CYRET_STARTED - Indicates that ILO frequency error is higher than 
 559:.\Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and ILO Trim register was updated.
 560:.\Generated_Source\PSoC4/CyLFClk.c **** *
 561:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful.
 562:.\Generated_Source\PSoC4/CyLFClk.c **** *
 563:.\Generated_Source\PSoC4/CyLFClk.c **** * Post #1 - To obtain 10% ILO accuracy the calculated accuracy should be equal 
 564:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_ERROR_RANGE = 5.6%. Error value should take to account IMO error of 
 565:.\Generated_Source\PSoC4/CyLFClk.c **** * +/-2% (+/-0.64kHz), trim step of 2.36kHz (+/-1.18kHz) and error while ILO 
 566:.\Generated_Source\PSoC4/CyLFClk.c **** * frequency measuring.
 567:.\Generated_Source\PSoC4/CyLFClk.c **** *
 568:.\Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 569:.\Generated_Source\PSoC4/CyLFClk.c **** *
 570:.\Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 571:.\Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloUpdateTrimReg(int32* iloAccuracyInPPT)
 572:.\Generated_Source\PSoC4/CyLFClk.c **** {
 573:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 measuredIloFreq;
 574:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 currentIloTrimValue;
 575:.\Generated_Source\PSoC4/CyLFClk.c ****     int32 iloAccuracyValue;
 576:.\Generated_Source\PSoC4/CyLFClk.c ****     int32 trimStep;
 577:.\Generated_Source\PSoC4/CyLFClk.c ****     cystatus errorRangeStatus;
 578:.\Generated_Source\PSoC4/CyLFClk.c **** 
 579:.\Generated_Source\PSoC4/CyLFClk.c ****     if(0u != CY_SYS_CNT_REG2_REG)
 580:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 581:.\Generated_Source\PSoC4/CyLFClk.c ****         measuredIloFreq = (CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_SYS_
 582:.\Generated_Source\PSoC4/CyLFClk.c **** 
 583:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Calculate value of error in PPT according to formula - 
 584:.\Generated_Source\PSoC4/CyLFClk.c ****         *       ((measuredIlofrequency - iloDesired freaquency) * 1000 / iloDesired freaquency) */
 585:.\Generated_Source\PSoC4/CyLFClk.c ****         iloAccuracyValue = (((int32) measuredIloFreq - (int32) CY_SYS_CLK_ILO_DESIRED_FREQ_HZ) * \
 586:.\Generated_Source\PSoC4/CyLFClk.c ****                             ((int32) CY_SYS_CLK_PERTHOUSAND)) / ((int32) CY_SYS_CLK_ILO_DESIRED_FRE
 587:.\Generated_Source\PSoC4/CyLFClk.c **** 
 588:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Check if ILO accuracy is more than +/- CY_SYS_CLK_ERROR_RANGE. See post #1 of API descri
 589:.\Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_ERROR_RANGE < (uint32) (CY_SYS_CLK_ABS_MACRO(iloAccuracyValue)))
 590:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 591:.\Generated_Source\PSoC4/CyLFClk.c ****             if (0 < iloAccuracyValue)
 592:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 593:.\Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) + 
 594:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 595:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 596:.\Generated_Source\PSoC4/CyLFClk.c ****             else
 597:.\Generated_Source\PSoC4/CyLFClk.c ****             {
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 18


 598:.\Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) - 
 599:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 600:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 601:.\Generated_Source\PSoC4/CyLFClk.c ****             currentIloTrimValue = (CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK);
 602:.\Generated_Source\PSoC4/CyLFClk.c ****             trimStep = (int32) currentIloTrimValue - trimStep;
 603:.\Generated_Source\PSoC4/CyLFClk.c **** 
 604:.\Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep > CY_SYS_CLK_FOURBITS_MAX)
 605:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 606:.\Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = CY_SYS_CLK_FOURBITS_MAX;
 607:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 608:.\Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep < 0)
 609:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 610:.\Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = 0;
 611:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 612:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = (CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MASK
 613:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                  ((uint32) trimStep);
 614:.\Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_STARTED;
 615:.\Generated_Source\PSoC4/CyLFClk.c ****         } /* Else return success because error is in +/- 10% range*/
 616:.\Generated_Source\PSoC4/CyLFClk.c ****         else
 617:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 618:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Write trimmed ILO accuracy through pointer. */
 619:.\Generated_Source\PSoC4/CyLFClk.c ****             *iloAccuracyInPPT = iloAccuracyValue;
 620:.\Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_SUCCESS;
 621:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 622:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 623:.\Generated_Source\PSoC4/CyLFClk.c ****     else
 624:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 625:.\Generated_Source\PSoC4/CyLFClk.c ****         errorRangeStatus = CYRET_INVALID_STATE;
 626:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 627:.\Generated_Source\PSoC4/CyLFClk.c **** return (errorRangeStatus);
 628:.\Generated_Source\PSoC4/CyLFClk.c **** }
 629:.\Generated_Source\PSoC4/CyLFClk.c **** 
 630:.\Generated_Source\PSoC4/CyLFClk.c **** 
 631:.\Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 632:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloRestoreFactoryTrim
 633:.\Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 634:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 635:.\Generated_Source\PSoC4/CyLFClk.c **** * Restores the ILO Trim Register to factory value.
 636:.\Generated_Source\PSoC4/CyLFClk.c **** *
 637:.\Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to 
 638:.\Generated_Source\PSoC4/CyLFClk.c **** * calling this API. Otherwise CYRET_UNKNOWN will be returned.
 639:.\Generated_Source\PSoC4/CyLFClk.c **** *
 640:.\Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices except for PSoC 4000 / PSoC 4100 / PSoC 4200 
 641:.\Generated_Source\PSoC4/CyLFClk.c **** * / PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices.
 642:.\Generated_Source\PSoC4/CyLFClk.c **** *
 643:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Operation was successful. 
 644:.\Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_UNKNOWN - CySysClkIloStartMeasurement() was not called 
 645:.\Generated_Source\PSoC4/CyLFClk.c **** * before this API. Hence the trim value cannot be updated.
 646:.\Generated_Source\PSoC4/CyLFClk.c **** *
 647:.\Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 648:.\Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloRestoreFactoryTrim(void)
 649:.\Generated_Source\PSoC4/CyLFClk.c **** {
 650:.\Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus = CYRET_SUCCESS;
 651:.\Generated_Source\PSoC4/CyLFClk.c **** 
 652:.\Generated_Source\PSoC4/CyLFClk.c ****     /* Check was defaultIloTrimRegValue modified in CySysClkIloStartMeasurement */
 653:.\Generated_Source\PSoC4/CyLFClk.c ****     if(CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE != defaultIloTrimRegValue)
 654:.\Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 19


 655:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = ((CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MAS
 656:.\Generated_Source\PSoC4/CyLFClk.c ****                                        (defaultIloTrimRegValue & CY_SYS_CLK_ILO_TRIM_MASK));
 657:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 658:.\Generated_Source\PSoC4/CyLFClk.c ****         else
 659:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 660:.\Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_UNKNOWN;
 661:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 662:.\Generated_Source\PSoC4/CyLFClk.c **** 
 663:.\Generated_Source\PSoC4/CyLFClk.c ****         return (returnStatus);
 664:.\Generated_Source\PSoC4/CyLFClk.c **** }
 665:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
 666:.\Generated_Source\PSoC4/CyLFClk.c **** 
 667:.\Generated_Source\PSoC4/CyLFClk.c **** 
 668:.\Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
 669:.\Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 670:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkGetLfclkSource
 671:.\Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
 672:.\Generated_Source\PSoC4/CyLFClk.c **** *
 673:.\Generated_Source\PSoC4/CyLFClk.c **** * \internal
 674:.\Generated_Source\PSoC4/CyLFClk.c **** *  Gets the clock source for the LFCLK clock.
 675:.\Generated_Source\PSoC4/CyLFClk.c **** *  The function is applicable only for PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4100M /
 676:.\Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M / PSoC 4200L.
 677:.\Generated_Source\PSoC4/CyLFClk.c **** *
 678:.\Generated_Source\PSoC4/CyLFClk.c **** * \return The LFCLK source:
 679:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_ILO Internal Low Frequency (32 kHz) Oscillator (ILO)
 680:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_WCO Low Frequency Watch Crystal Oscillator (WCO)
 681:.\Generated_Source\PSoC4/CyLFClk.c **** *
 682:.\Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 683:.\Generated_Source\PSoC4/CyLFClk.c **** *
 684:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 685:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void)
 686:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 687:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 lfclkSource;
 688:.\Generated_Source\PSoC4/CyLFClk.c ****         lfclkSource = CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK;
 689:.\Generated_Source\PSoC4/CyLFClk.c ****         return (lfclkSource);
 690:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 691:.\Generated_Source\PSoC4/CyLFClk.c **** 
 692:.\Generated_Source\PSoC4/CyLFClk.c ****     
 693:.\Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 694:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkSetLfclkSource
 695:.\Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 696:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 697:.\Generated_Source\PSoC4/CyLFClk.c **** *  Sets the clock source for the LFCLK clock.
 698:.\Generated_Source\PSoC4/CyLFClk.c **** *
 699:.\Generated_Source\PSoC4/CyLFClk.c **** * The switch between LFCLK sources must be done between the positive edges of
 700:.\Generated_Source\PSoC4/CyLFClk.c **** * LFCLK, because the glitch risk is around the LFCLK positive edge. To ensure
 701:.\Generated_Source\PSoC4/CyLFClk.c **** * that the switch can be done safely, the WDT counter value is read until it
 702:.\Generated_Source\PSoC4/CyLFClk.c **** * changes.
 703:.\Generated_Source\PSoC4/CyLFClk.c **** *
 704:.\Generated_Source\PSoC4/CyLFClk.c **** * That means that the positive edge just finished and the switch is performed.
 705:.\Generated_Source\PSoC4/CyLFClk.c **** * The enabled WDT counter is used for that purpose. If no counters are enabled,
 706:.\Generated_Source\PSoC4/CyLFClk.c **** * counter 0 is enabled. And after the LFCLK source is switched, counter 0
 707:.\Generated_Source\PSoC4/CyLFClk.c **** * configuration is restored.
 708:.\Generated_Source\PSoC4/CyLFClk.c **** *
 709:.\Generated_Source\PSoC4/CyLFClk.c **** *  The function is applicable only for devices with more than one source for 
 710:.\Generated_Source\PSoC4/CyLFClk.c **** * LFCLK - PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 4100M / PSoC 4200M / 
 711:.\Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L.
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 20


 712:.\Generated_Source\PSoC4/CyLFClk.c **** *
 713:.\Generated_Source\PSoC4/CyLFClk.c **** * \note For PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices LFCLK can
 714:.\Generated_Source\PSoC4/CyLFClk.c **** * only be sourced from ILO even though WCO is available.
 715:.\Generated_Source\PSoC4/CyLFClk.c **** *
 716:.\Generated_Source\PSoC4/CyLFClk.c **** * \param
 717:.\Generated_Source\PSoC4/CyLFClk.c **** * source
 718:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_ILO - Internal Low Frequency (32 kHz) 
 719:.\Generated_Source\PSoC4/CyLFClk.c **** * Oscillator (ILO).<br>
 720:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_WCO - Low Frequency Watch Crystal Oscillator (WCO).
 721:.\Generated_Source\PSoC4/CyLFClk.c **** *
 722:.\Generated_Source\PSoC4/CyLFClk.c **** * \details
 723:.\Generated_Source\PSoC4/CyLFClk.c **** * This function has no effect if WDT is locked (CySysWdtLock() is called). 
 724:.\Generated_Source\PSoC4/CyLFClk.c **** * Call CySysWdtUnlock() to unlock WDT.
 725:.\Generated_Source\PSoC4/CyLFClk.c **** *
 726:.\Generated_Source\PSoC4/CyLFClk.c **** * Both the current source and the new source must be running and stable before
 727:.\Generated_Source\PSoC4/CyLFClk.c **** * calling this function.
 728:.\Generated_Source\PSoC4/CyLFClk.c **** *
 729:.\Generated_Source\PSoC4/CyLFClk.c **** * Changing the LFCLK clock source may change the LFCLK clock frequency and
 730:.\Generated_Source\PSoC4/CyLFClk.c **** * affect the functionality that uses this clock. For example, watchdog timer
 731:.\Generated_Source\PSoC4/CyLFClk.c **** * "uses this clock" or "this clock uses" (WDT) is clocked by LFCLK.
 732:.\Generated_Source\PSoC4/CyLFClk.c **** *
 733:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 734:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkSetLfclkSource(uint32 source)
 735:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 736:.\Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 737:.\Generated_Source\PSoC4/CyLFClk.c **** 
 738:.\Generated_Source\PSoC4/CyLFClk.c ****         if (CySysClkGetLfclkSource() != source)
 739:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 740:.\Generated_Source\PSoC4/CyLFClk.c ****             interruptState = CyEnterCriticalSection();
 741:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeCatch();
 742:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = (CY_SYS_WDT_CONFIG_REG & (uint32)(~CY_SYS_CLK_LFCLK_SEL_MASK)) 
 743:.\Generated_Source\PSoC4/CyLFClk.c ****                                     (source & CY_SYS_CLK_LFCLK_SEL_MASK);
 744:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeRestore();
 745:.\Generated_Source\PSoC4/CyLFClk.c ****             CyExitCriticalSection(interruptState);
 746:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 747:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 748:.\Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
 749:.\Generated_Source\PSoC4/CyLFClk.c **** 
 750:.\Generated_Source\PSoC4/CyLFClk.c **** 
 751:.\Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO)
 752:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 753:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStart
 754:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 755:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 756:.\Generated_Source\PSoC4/CyLFClk.c ****     *  Enables Watch Crystal Oscillator (WCO).
 757:.\Generated_Source\PSoC4/CyLFClk.c ****     * 
 758:.\Generated_Source\PSoC4/CyLFClk.c ****     * This API enables WCO which is used as a source for LFCLK. Similar to ILO, 
 759:.\Generated_Source\PSoC4/CyLFClk.c ****     * WCO is also available in all modes except Hibernate and Stop modes.
 760:.\Generated_Source\PSoC4/CyLFClk.c ****     * \note In PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices
 761:.\Generated_Source\PSoC4/CyLFClk.c ****     * WCO cannot be a source for the LFCLK. 
 762:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 763:.\Generated_Source\PSoC4/CyLFClk.c ****     *  WCO is always enabled in High Power Mode (HPM). Refer to the device
 764:.\Generated_Source\PSoC4/CyLFClk.c ****     *  datasheet for the  WCO startup time. Once WCO becomes stable it can be
 765:.\Generated_Source\PSoC4/CyLFClk.c ****     *  switched to Low Power Mode (LPM). Note that oscillator can be unstable
 766:.\Generated_Source\PSoC4/CyLFClk.c ****     *  during a switch and hence its output should not be used at that moment.
 767:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 768:.\Generated_Source\PSoC4/CyLFClk.c ****     *  The CySysClkWcoSetPowerMode() function configures the WCO power mode.
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 21


 769:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 770:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 771:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoStart(void)
 772:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 773:.\Generated_Source\PSoC4/CyLFClk.c ****         CySysClkWcoSetHighPowerMode();
 774:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 775:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 776:.\Generated_Source\PSoC4/CyLFClk.c **** 
 777:.\Generated_Source\PSoC4/CyLFClk.c **** 
 778:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 779:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStop
 780:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 781:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 782:.\Generated_Source\PSoC4/CyLFClk.c ****     * Disables the 32 KHz Crystal Oscillator.
 783:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 784:.\Generated_Source\PSoC4/CyLFClk.c ****     * API switch of WCO.
 785:.\Generated_Source\PSoC4/CyLFClk.c ****     * \note PSoC 4100S / PSoC Analog Coprocessor: WCO is required for DeepSleep 
 786:.\Generated_Source\PSoC4/CyLFClk.c ****     * Timer's operation.
 787:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 788:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 789:.\Generated_Source\PSoC4/CyLFClk.c ****     void  CySysClkWcoStop(void)
 790:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 791:.\Generated_Source\PSoC4/CyLFClk.c ****         #if (CY_IP_SRSSV2)
 792:.\Generated_Source\PSoC4/CyLFClk.c ****             uint8  interruptState;
 793:.\Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */
 794:.\Generated_Source\PSoC4/CyLFClk.c **** 
 795:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 796:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 797:.\Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_SRSSV2)
 798:.\Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_WCO == CySysClkGetLfclkSource())
 799:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
 800:.\Generated_Source\PSoC4/CyLFClk.c ****                     interruptState = CyEnterCriticalSection();
 801:.\Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeCatch();
 802:.\Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 803:.\Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeRestore();
 804:.\Generated_Source\PSoC4/CyLFClk.c ****                     CyExitCriticalSection(interruptState);
 805:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
 806:.\Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 807:.\Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_SRSSV2) */
 808:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 809:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 810:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 811:.\Generated_Source\PSoC4/CyLFClk.c ****         } /* Otherwise do nothing. WCO configuration cannot be changed. */
 812:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 813:.\Generated_Source\PSoC4/CyLFClk.c **** 
 814:.\Generated_Source\PSoC4/CyLFClk.c **** 
 815:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 816:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoEnabled
 817:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 818:.\Generated_Source\PSoC4/CyLFClk.c ****     * \internal Reports the WCO enable state.
 819:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 820:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 if WCO is enabled
 821:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 if WCO is disabled.
 822:.\Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 823:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 824:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoEnabled(void)
 825:.\Generated_Source\PSoC4/CyLFClk.c ****     {
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 22


 826:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE))) ?
 827:.\Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 1u :
 828:.\Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 0u);
 829:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 830:.\Generated_Source\PSoC4/CyLFClk.c **** 
 831:.\Generated_Source\PSoC4/CyLFClk.c **** 
 832:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 833:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoSetPowerMode
 834:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 835:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 836:.\Generated_Source\PSoC4/CyLFClk.c ****     * Sets the power mode for the 32 KHz WCO.
 837:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 838:.\Generated_Source\PSoC4/CyLFClk.c ****     * By default (if this function is not called), the WCO is in High power mode 
 839:.\Generated_Source\PSoC4/CyLFClk.c ****     * during Active and device's low power modes
 840:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 841:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
 842:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_HPM - The High Power mode.<br>
 843:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_LPM - The Low Power mode.
 844:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 845:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return A previous power mode. The same as the parameters.
 846:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 847:.\Generated_Source\PSoC4/CyLFClk.c ****     * \note
 848:.\Generated_Source\PSoC4/CyLFClk.c ****     * The WCO Low Power mode is applicable for PSoC 4100 BLE / PSoC 4200 BLE devices.
 849:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 850:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 851:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoSetPowerMode(uint32 mode)
 852:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 853:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 powerModeStatus;
 854:.\Generated_Source\PSoC4/CyLFClk.c **** 
 855:.\Generated_Source\PSoC4/CyLFClk.c ****         powerModeStatus = CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_LPM_EN;
 856:.\Generated_Source\PSoC4/CyLFClk.c **** 
 857:.\Generated_Source\PSoC4/CyLFClk.c ****         switch(mode)
 858:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 859:.\Generated_Source\PSoC4/CyLFClk.c ****         case CY_SYS_CLK_WCO_HPM:
 860:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkWcoSetHighPowerMode();
 861:.\Generated_Source\PSoC4/CyLFClk.c ****             break;
 862:.\Generated_Source\PSoC4/CyLFClk.c **** 
 863:.\Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_PSOC4_4100BL || CY_PSOC4_4200BL)
 864:.\Generated_Source\PSoC4/CyLFClk.c ****             case CY_SYS_CLK_WCO_LPM:
 865:.\Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkWcoSetLowPowerMode();
 866:.\Generated_Source\PSoC4/CyLFClk.c ****                 break;
 867:.\Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_PSOC4_4100BL || CY_PSOC4_4200BL) */
 868:.\Generated_Source\PSoC4/CyLFClk.c **** 
 869:.\Generated_Source\PSoC4/CyLFClk.c ****         default:
 870:.\Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 871:.\Generated_Source\PSoC4/CyLFClk.c ****             break;
 872:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 873:.\Generated_Source\PSoC4/CyLFClk.c **** 
 874:.\Generated_Source\PSoC4/CyLFClk.c ****         return (powerModeStatus);
 875:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 876:.\Generated_Source\PSoC4/CyLFClk.c **** 
 877:.\Generated_Source\PSoC4/CyLFClk.c **** 
 878:.\Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 879:.\Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkWcoClockOutSelect
 880:.\Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 881:.\Generated_Source\PSoC4/CyLFClk.c **** * \brief
 882:.\Generated_Source\PSoC4/CyLFClk.c **** * Selects the WCO block output source.
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 23


 883:.\Generated_Source\PSoC4/CyLFClk.c **** *
 884:.\Generated_Source\PSoC4/CyLFClk.c **** * In addition to generating 32.768 kHz clock from external crystals, WCO 
 885:.\Generated_Source\PSoC4/CyLFClk.c **** * can be sourced by external clock source using wco_out pin. The API help to
 886:.\Generated_Source\PSoC4/CyLFClk.c **** * lets you select between the sources: External crystal or external pin.
 887:.\Generated_Source\PSoC4/CyLFClk.c **** *
 888:.\Generated_Source\PSoC4/CyLFClk.c **** * If you want to use external pin to drive WCO the next procedure is required:
 889:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 1) Disable the WCO.
 890:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 2) Drive the wco_out pin to an external signal source.
 891:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_PIN).
 892:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 4) Enable the WCO and wait for 15 us before clocking the XO pad at the high 
 893:.\Generated_Source\PSoC4/CyLFClk.c **** * potential. Let's assume you are using the 1.6v clock amplitude, then the
 894:.\Generated_Source\PSoC4/CyLFClk.c **** * sequence would start at 1.6v, then 0v, then 1.6v etc at a chosen frequency.
 895:.\Generated_Source\PSoC4/CyLFClk.c **** *
 896:.\Generated_Source\PSoC4/CyLFClk.c **** * If you want to use WCO after using an external pin source:
 897:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 1) Disable the WCO.
 898:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 2) Drive off wco_out pin with external signal source.
 899:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_CRYSTAL).
 900:.\Generated_Source\PSoC4/CyLFClk.c **** * <br> 4) Enable the WCO.
 901:.\Generated_Source\PSoC4/CyLFClk.c **** *
 902:.\Generated_Source\PSoC4/CyLFClk.c **** * \warning 
 903:.\Generated_Source\PSoC4/CyLFClk.c **** * Do not use the oscillator output clock prior to a 15uS delay in your system.
 904:.\Generated_Source\PSoC4/CyLFClk.c **** * There are no limitations on the external clock frequency.
 905:.\Generated_Source\PSoC4/CyLFClk.c **** * \warning 
 906:.\Generated_Source\PSoC4/CyLFClk.c **** * When external clock source was selected to drive WCO block the IMO can be 
 907:.\Generated_Source\PSoC4/CyLFClk.c **** * trimmed only when external clock source period is equal to WCO external
 908:.\Generated_Source\PSoC4/CyLFClk.c **** * crystal period. Also external clock source accuracy should be higher 
 909:.\Generated_Source\PSoC4/CyLFClk.c **** * or equal to WCO external crystal accuracy.
 910:.\Generated_Source\PSoC4/CyLFClk.c **** *
 911:.\Generated_Source\PSoC4/CyLFClk.c **** * \param clockSel
 912:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_WCO_SEL_CRYSTAL - Selects External crystal as clock 
 913:.\Generated_Source\PSoC4/CyLFClk.c **** * source of WCO.<br>
 914:.\Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_WCO_SEL_PIN - Selects External clock input on wco_in pin as 
 915:.\Generated_Source\PSoC4/CyLFClk.c **** * clock source of WCO.
 916:.\Generated_Source\PSoC4/CyLFClk.c **** *
 917:.\Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 918:.\Generated_Source\PSoC4/CyLFClk.c **** void CySysClkWcoClockOutSelect(uint32 clockSel)
 919:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 920:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 921:.\Generated_Source\PSoC4/CyLFClk.c ****         {
 922:.\Generated_Source\PSoC4/CyLFClk.c ****             if (1u >= clockSel)
 923:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 924:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG = (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(~CY_SYS_CLK_WCO_S
 925:.\Generated_Source\PSoC4/CyLFClk.c ****                                         (clockSel << CY_SYS_CLK_WCO_SELECT_PIN_OFFSET);
 926:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 927:.\Generated_Source\PSoC4/CyLFClk.c ****             else
 928:.\Generated_Source\PSoC4/CyLFClk.c ****             {
 929:.\Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 930:.\Generated_Source\PSoC4/CyLFClk.c ****             }
 931:.\Generated_Source\PSoC4/CyLFClk.c ****         }
 932:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 933:.\Generated_Source\PSoC4/CyLFClk.c **** #endif  /* (CY_IP_WCO) */
 934:.\Generated_Source\PSoC4/CyLFClk.c **** 
 935:.\Generated_Source\PSoC4/CyLFClk.c **** 
 936:.\Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 937:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 938:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLock
 939:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 24


 940:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 941:.\Generated_Source\PSoC4/CyLFClk.c ****     * Locks out configuration changes to the Watchdog timer registers and ILO
 942:.\Generated_Source\PSoC4/CyLFClk.c ****     * configuration register.
 943:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 944:.\Generated_Source\PSoC4/CyLFClk.c ****     * After this function is called, ILO clock can't be disabled until
 945:.\Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtUnlock() is called.
 946:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 947:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 948:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtLock(void)
 949:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 950:.\Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 951:.\Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 952:.\Generated_Source\PSoC4/CyLFClk.c **** 
 953:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = (CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK)) 
 954:.\Generated_Source\PSoC4/CyLFClk.c ****                  CY_SYS_WDT_CLK_LOCK_BITS_MASK;
 955:.\Generated_Source\PSoC4/CyLFClk.c **** 
 956:.\Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 957:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 958:.\Generated_Source\PSoC4/CyLFClk.c **** 
 959:.\Generated_Source\PSoC4/CyLFClk.c **** 
 960:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 961:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLocked
 962:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 963:.\Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 964:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reports the WDT lock state.
 965:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 966:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - WDT is locked, and 0 - WDT is unlocked.
 967:.\Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 968:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 969:.\Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void)
 970:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 971:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal 0 */
 972:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_SELECT_REG & (uint32)(CY_SYS_WDT_CLK_LOCK_BITS_MASK))) ? (uint32
 973:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 974:.\Generated_Source\PSoC4/CyLFClk.c **** 
 975:.\Generated_Source\PSoC4/CyLFClk.c **** 
 976:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 977:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnlock
 978:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 979:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 980:.\Generated_Source\PSoC4/CyLFClk.c ****     *  Unlocks the Watchdog Timer configuration register.
 981:.\Generated_Source\PSoC4/CyLFClk.c ****     *
 982:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 983:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnlock(void)
 984:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 985:.\Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 986:.\Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 987:.\Generated_Source\PSoC4/CyLFClk.c **** 
 988:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Removing WDT lock requires two writes */
 989:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 990:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT0);
 991:.\Generated_Source\PSoC4/CyLFClk.c **** 
 992:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 993:.\Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT1);
 994:.\Generated_Source\PSoC4/CyLFClk.c **** 
 995:.\Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 996:.\Generated_Source\PSoC4/CyLFClk.c ****     }
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 25


 997:.\Generated_Source\PSoC4/CyLFClk.c **** 
 998:.\Generated_Source\PSoC4/CyLFClk.c **** 
 999:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1000:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1001:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1002:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1003:.\Generated_Source\PSoC4/CyLFClk.c ****     *  Reads the enabled status of one of the three WDT counters.
1004:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1005:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1006:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1007:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1008:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - If the counter is disabled.
1009:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - If the counter is enabled.
1010:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1011:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1012:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function returns an actual WDT counter status from the status register. It may
1013:.\Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles for the WDT status register to contain actual data
1014:.\Generated_Source\PSoC4/CyLFClk.c ****     * after the WDT counter is enabled.
1015:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1016:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1017:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(uint32 counterNum)
1018:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1019:.\Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1020:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONTROL_REG >> ((CY_SYS_WDT_CNT_SHIFT * counterNum) + CY_SYS_WDT_CNT_ST
1021:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1022:.\Generated_Source\PSoC4/CyLFClk.c **** 
1023:.\Generated_Source\PSoC4/CyLFClk.c **** 
1024:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1025:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMode
1026:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1027:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1028:.\Generated_Source\PSoC4/CyLFClk.c ****     * Writes the mode of one of the three WDT counters.
1029:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1030:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1031:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1032:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
1033:.\Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_MODE_NONE - Free running.<br>
1034:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT - The interrupt generated on match for counter 0
1035:.\Generated_Source\PSoC4/CyLFClk.c ****     * and 1, and on bit toggle for counter 2.<br>
1036:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_RESET - Reset on match (valid for counter 0 and 1 only).<br>
1037:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT_RESET - Generate an interrupt.  Generate a reset on
1038:.\Generated_Source\PSoC4/CyLFClk.c ****     * the 3rd non-handled interrupt (valid for counter 0 and counter 1 only).
1039:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1040:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1041:.\Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled to set a mode. Otherwise, this
1042:.\Generated_Source\PSoC4/CyLFClk.c ****     * function call has no effect. If the specified counter is enabled,
1043:.\Generated_Source\PSoC4/CyLFClk.c ****     * call the CySysWdtDisable() function with the corresponding parameter to
1044:.\Generated_Source\PSoC4/CyLFClk.c ****     * disable the specified counter and wait for it to stop.
1045:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1046:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1047:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMode(uint32 counterNum, uint32 mode)
1048:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1049:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1050:.\Generated_Source\PSoC4/CyLFClk.c **** 
1051:.\Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1052:.\Generated_Source\PSoC4/CyLFClk.c **** 
1053:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 26


1054:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1055:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG &
1056:.\Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_WDT_MODE_MASK << (counterNum * CY_SYS_WDT
1057:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= (uint32)((mode & CY_SYS_WDT_MODE_MASK) << (counterNum * CY_SYS_WDT_CN
1058:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1059:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1060:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1061:.\Generated_Source\PSoC4/CyLFClk.c **** 
1062:.\Generated_Source\PSoC4/CyLFClk.c **** 
1063:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1064:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMode
1065:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1066:.\Generated_Source\PSoC4/CyLFClk.c ****     * 
1067:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the mode of one of the three WDT counters.
1068:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1069:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1070:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1071:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The mode of the counter. The same enumerated values as the mode 
1072:.\Generated_Source\PSoC4/CyLFClk.c ****     * parameter used in CySysWdtSetMode().
1073:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1074:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1075:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMode(uint32 counterNum)
1076:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1077:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> (counterNum * CY_SYS_WDT_CNT_SHIFT)) & CY_SYS_WDT_MODE_MA
1078:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1079:.\Generated_Source\PSoC4/CyLFClk.c **** 
1080:.\Generated_Source\PSoC4/CyLFClk.c **** 
1081:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1082:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetClearOnMatch
1083:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1084:.\Generated_Source\PSoC4/CyLFClk.c ****     * 
1085:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter "clear on match" setting.
1086:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1087:.\Generated_Source\PSoC4/CyLFClk.c ****     * If configured to "clear on match", the counter counts from 0 to MatchValue
1088:.\Generated_Source\PSoC4/CyLFClk.c ****     * giving it a period of (MatchValue + 1).
1089:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1090:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1091:.\Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1092:.\Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1093:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1094:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param enable 0 to disable appropriate counter <br>
1095:.\Generated_Source\PSoC4/CyLFClk.c ****     *  1 to enable appropriate counter
1096:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1097:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1098:.\Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled. Otherwise this function call
1099:.\Generated_Source\PSoC4/CyLFClk.c ****     * has no effect. If the specified counter is enabled, call the CySysWdtDisable()
1100:.\Generated_Source\PSoC4/CyLFClk.c ****     * function with the corresponding parameter to disable the specified counter and
1101:.\Generated_Source\PSoC4/CyLFClk.c ****     * wait for it to stop. This may take up to three LFCLK cycles.
1102:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1103:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1104:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetClearOnMatch(uint32 counterNum, uint32 enable)
1105:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1106:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1107:.\Generated_Source\PSoC4/CyLFClk.c **** 
1108:.\Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1109:.\Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1110:.\Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 27


1111:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1112:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1113:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG & (uint32)~((uint32)((uint32)1u << 
1114:.\Generated_Source\PSoC4/CyLFClk.c ****                                      ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CL
1115:.\Generated_Source\PSoC4/CyLFClk.c **** 
1116:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue
1117:.\Generated_Source\PSoC4/CyLFClk.c ****                 |= (uint32)(enable << ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_C
1118:.\Generated_Source\PSoC4/CyLFClk.c **** 
1119:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1120:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1121:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1122:.\Generated_Source\PSoC4/CyLFClk.c **** 
1123:.\Generated_Source\PSoC4/CyLFClk.c **** 
1124:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1125:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetClearOnMatch
1126:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1127:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1128:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reads the "clear on match" setting for the specified counter.
1129:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1130:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param
1131:.\Generated_Source\PSoC4/CyLFClk.c ****     * counterNum Valid range [0-1]. The number of the WDT counter. The match values
1132:.\Generated_Source\PSoC4/CyLFClk.c ****     * are not supported by counter 2.
1133:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1134:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The "clear on match" status: <br>1 if enabled <br>0 if disabled
1135:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1136:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1137:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetClearOnMatch(uint32 counterNum)
1138:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1139:.\Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1140:.\Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1141:.\Generated_Source\PSoC4/CyLFClk.c **** 
1142:.\Generated_Source\PSoC4/CyLFClk.c ****         return (uint32)((CY_SYS_WDT_CONFIG_REG >>
1143:.\Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CLR_SHIFT)) & 0
1144:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1145:.\Generated_Source\PSoC4/CyLFClk.c **** 
1146:.\Generated_Source\PSoC4/CyLFClk.c **** 
1147:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1148:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1149:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1150:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1151:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the specified WDT counters.
1152:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1153:.\Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are enabled.
1154:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1155:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1156:.\Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to enable.<br>
1157:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to enable.<br>
1158:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to enable.
1159:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1160:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1161:.\Generated_Source\PSoC4/CyLFClk.c ****     * Enabling or disabling WDT requires 3 LFCLK cycles to come into effect.
1162:.\Generated_Source\PSoC4/CyLFClk.c ****     * Therefore, the WDT enable state must not be changed more than once in
1163:.\Generated_Source\PSoC4/CyLFClk.c ****     * that period.
1164:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1165:.\Generated_Source\PSoC4/CyLFClk.c ****     * After WDT is enabled, it is illegal to write WDT configuration (WDT_CONFIG)
1166:.\Generated_Source\PSoC4/CyLFClk.c ****     * and control (WDT_CONTROL) registers. This means that all WDT functions that
1167:.\Generated_Source\PSoC4/CyLFClk.c ****     * contain 'write' in the name (with the exception of CySysWdtSetMatch()
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 28


1168:.\Generated_Source\PSoC4/CyLFClk.c ****     * function) are illegal to call if WDT is enabled.
1169:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1170:.\Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 / PSoC 4200: This function enables ILO.
1171:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1172:.\Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 BLE / PSoC 4200 BLE / PSoC4200L / PSoC 4100M 
1173:.\Generated_Source\PSoC4/CyLFClk.c ****     * / PSoC 4200M:
1174:.\Generated_Source\PSoC4/CyLFClk.c ****     * LFLCK should be configured before calling this function. The desired
1175:.\Generated_Source\PSoC4/CyLFClk.c ****     * source should be enabled and configured to be the source for LFCLK.
1176:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1177:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1178:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(uint32 counterMask)
1179:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1180:.\Generated_Source\PSoC4/CyLFClk.c ****         #if (!CY_IP_WCO)
1181:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysClkIloStart();
1182:.\Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (!CY_IP_WCO) */
1183:.\Generated_Source\PSoC4/CyLFClk.c **** 
1184:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= counterMask;
1185:.\Generated_Source\PSoC4/CyLFClk.c **** 
1186:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1187:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1188:.\Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1189:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1190:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1191:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1192:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1193:.\Generated_Source\PSoC4/CyLFClk.c **** 
1194:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1195:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1196:.\Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1197:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1198:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1199:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1200:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1201:.\Generated_Source\PSoC4/CyLFClk.c **** 
1202:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1203:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1204:.\Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1205:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1206:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1207:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1208:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1209:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1210:.\Generated_Source\PSoC4/CyLFClk.c **** 
1211:.\Generated_Source\PSoC4/CyLFClk.c **** 
1212:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1213:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1214:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1215:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1216:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the specified WDT counters.
1217:.\Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are disabled. The function waits for 
1218:.\Generated_Source\PSoC4/CyLFClk.c ****     * the changes to come into effect.
1219:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1220:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1221:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to disable. <br>
1222:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to disable. <br>
1223:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to disable.
1224:.\Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 29


1225:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1226:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(uint32 counterMask)
1227:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1228:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0uL == CySysWdtLocked())
1229:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1230:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= ~counterMask;
1231:.\Generated_Source\PSoC4/CyLFClk.c **** 
1232:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1233:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1234:.\Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1235:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
1236:.\Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1237:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
1238:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1239:.\Generated_Source\PSoC4/CyLFClk.c **** 
1240:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1241:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1242:.\Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1243:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
1244:.\Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1245:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
1246:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1247:.\Generated_Source\PSoC4/CyLFClk.c **** 
1248:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1249:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1250:.\Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1251:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
1252:.\Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1253:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
1254:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1255:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1256:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1257:.\Generated_Source\PSoC4/CyLFClk.c **** 
1258:.\Generated_Source\PSoC4/CyLFClk.c **** 
1259:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1260:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetCascade
1261:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1262:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1263:.\Generated_Source\PSoC4/CyLFClk.c ****     * Writes the two WDT cascade values based on the combination of mask values
1264:.\Generated_Source\PSoC4/CyLFClk.c ****     * specified.
1265:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1266:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param cascadeMask The mask value used to set or clear the cascade values:
1267:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_NONE - Neither <br>
1268:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_01 - Cascade 01 <br>
1269:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_12 - Cascade 12
1270:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1271:.\Generated_Source\PSoC4/CyLFClk.c ****     * If only one cascade mask is specified, the second cascade is disabled.
1272:.\Generated_Source\PSoC4/CyLFClk.c ****     * To set both cascade modes, two defines should be ORed:
1273:.\Generated_Source\PSoC4/CyLFClk.c ****     * (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12).
1274:.\Generated_Source\PSoC4/CyLFClk.c ****     * \note If CySysWdtSetCascade() was called with ORed defines it is necessary 
1275:.\Generated_Source\PSoC4/CyLFClk.c ****     * to call CySysWdtSetClearOnMatch(1,1). It is needed to make sure that 
1276:.\Generated_Source\PSoC4/CyLFClk.c ****     * Counter 2 will be updated in the expected way.
1277:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1278:.\Generated_Source\PSoC4/CyLFClk.c ****     * WDT counters that are part of the specified cascade should be disabled.
1279:.\Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise this function call has no effect. If the specified
1280:.\Generated_Source\PSoC4/CyLFClk.c ****     * counter is enabled, call CySysWdtDisable() function with the corresponding
1281:.\Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop. This may
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 30


1282:.\Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1283:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1284:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1285:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetCascade(uint32 cascadeMask)
1286:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1287:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1288:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 countersEnableStatus;
1289:.\Generated_Source\PSoC4/CyLFClk.c **** 
1290:.\Generated_Source\PSoC4/CyLFClk.c ****         countersEnableStatus = CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0) |
1291:.\Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
1292:.\Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2);
1293:.\Generated_Source\PSoC4/CyLFClk.c **** 
1294:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u == countersEnableStatus)
1295:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1296:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1297:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= ((uint32)(~(CY_SYS_WDT_CASCADE_01|CY_SYS_WDT_CASCADE_12)));
1298:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= cascadeMask;
1299:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1300:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1301:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1302:.\Generated_Source\PSoC4/CyLFClk.c **** 
1303:.\Generated_Source\PSoC4/CyLFClk.c **** 
1304:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1305:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCascade
1306:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1307:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1308:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the two WDT cascade values returning a mask of the bits set.
1309:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1310:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of the cascade values set.
1311:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_NONE - Neither
1312:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_01 - Cascade 01
1313:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_12 - Cascade 12
1314:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1315:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1316:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCascade(void)
1317:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1318:.\Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONFIG_REG & (CY_SYS_WDT_CASCADE_01 | CY_SYS_WDT_CASCADE_12));
1319:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1320:.\Generated_Source\PSoC4/CyLFClk.c **** 
1321:.\Generated_Source\PSoC4/CyLFClk.c **** 
1322:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1323:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1324:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1325:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1326:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1327:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1328:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1329:.\Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1330:.\Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1331:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1332:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param match
1333:.\Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-65535]. The value to be used to match against the counter.
1334:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1335:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1336:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 counterNum, uint32 match)
1337:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1338:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 31


1339:.\Generated_Source\PSoC4/CyLFClk.c **** 
1340:.\Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1341:.\Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1342:.\Generated_Source\PSoC4/CyLFClk.c **** 
1343:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Wait for previous changes to come into effect */
1344:.\Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_3LFCLK_DELAY_US);
1345:.\Generated_Source\PSoC4/CyLFClk.c **** 
1346:.\Generated_Source\PSoC4/CyLFClk.c ****         regValue = CY_SYS_WDT_MATCH_REG;
1347:.\Generated_Source\PSoC4/CyLFClk.c ****         regValue &= (uint32)~((uint32)(CY_SYS_WDT_LOWER_16BITS_MASK << (counterNum * CY_SYS_WDT_CNT
1348:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (regValue | (match << (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)));
1349:.\Generated_Source\PSoC4/CyLFClk.c **** 
1350:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Make sure match synchronization has started */
1351:.\Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_1LFCLK_DELAY_US);
1352:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1353:.\Generated_Source\PSoC4/CyLFClk.c **** 
1354:.\Generated_Source\PSoC4/CyLFClk.c **** 
1355:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1356:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetToggleBit
1357:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1358:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1359:.\Generated_Source\PSoC4/CyLFClk.c ****     * Configures which bit in WDT counter 2 to monitor for a toggle.
1360:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1361:.\Generated_Source\PSoC4/CyLFClk.c ****     * When that bit toggles, an interrupt is generated if the mode for counter 2 has
1362:.\Generated_Source\PSoC4/CyLFClk.c ****     * enabled interrupts.
1363:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1364:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param bits Valid range [0-31].  Counter 2 bit to monitor for a toggle.
1365:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1366:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1367:.\Generated_Source\PSoC4/CyLFClk.c ****     * WDT Counter 2 should be disabled. Otherwise this function call has no
1368:.\Generated_Source\PSoC4/CyLFClk.c ****     * effect.
1369:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1370:.\Generated_Source\PSoC4/CyLFClk.c ****     * If the specified counter is enabled, call the CySysWdtDisable() function with
1371:.\Generated_Source\PSoC4/CyLFClk.c ****     * the corresponding parameter to disable the specified counter and wait for it to
1372:.\Generated_Source\PSoC4/CyLFClk.c ****     * stop. This may take up to 3 LFCLK cycles.
1373:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1374:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1375:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetToggleBit(uint32 bits)
1376:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1377:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1378:.\Generated_Source\PSoC4/CyLFClk.c **** 
1379:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1380:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1381:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1382:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= (uint32)(~((uint32)(CY_SYS_WDT_CONFIG_BITS2_MASK << CY_SYS_WDT_CONFIG
1383:.\Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= ((bits & CY_SYS_WDT_CONFIG_BITS2_MASK) << CY_SYS_WDT_CONFIG_BITS2_POS
1384:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1385:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1386:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1387:.\Generated_Source\PSoC4/CyLFClk.c **** 
1388:.\Generated_Source\PSoC4/CyLFClk.c **** 
1389:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1390:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetToggleBit
1391:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1392:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1393:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reads which bit in WDT counter 2 is monitored for a toggle.
1394:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1395:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The bit that is monitored (range of 0 to 31)
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 32


1396:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1397:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1398:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetToggleBit(void)
1399:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1400:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> CY_SYS_WDT_CONFIG_BITS2_POS) & CY_SYS_WDT_CONFIG_BITS2_MA
1401:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1402:.\Generated_Source\PSoC4/CyLFClk.c **** 
1403:.\Generated_Source\PSoC4/CyLFClk.c **** 
1404:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1405:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1406:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1407:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1408:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1409:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1410:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1].  The number of the WDT counter. The match
1411:.\Generated_Source\PSoC4/CyLFClk.c ****     * values are not supported by counter 2.
1412:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1413:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return A 16-bit match value.
1414:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1415:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1416:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(uint32 counterNum)
1417:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1418:.\Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1419:.\Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1420:.\Generated_Source\PSoC4/CyLFClk.c **** 
1421:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)(CY_SYS_WDT_MATCH_REG >> 
1422:.\Generated_Source\PSoC4/CyLFClk.c ****                                             (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)) & CY_SYS_WDT
1423:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1424:.\Generated_Source\PSoC4/CyLFClk.c **** 
1425:.\Generated_Source\PSoC4/CyLFClk.c **** 
1426:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1427:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1428:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1429:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1430:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1431:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1432:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the WDT counter.
1433:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1434:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.  Counter 0 and Counter 1 are 16 bit counters 
1435:.\Generated_Source\PSoC4/CyLFClk.c ****     * and counter 2 is a 32 bit counter.
1436:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1437:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1438:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(uint32 counterNum)
1439:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1440:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue = 0u;
1441:.\Generated_Source\PSoC4/CyLFClk.c **** 
1442:.\Generated_Source\PSoC4/CyLFClk.c ****         switch(counterNum)
1443:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1444:.\Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 0 */
1445:.\Generated_Source\PSoC4/CyLFClk.c ****             case 0u:
1446:.\Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRLOW_REG & CY_SYS_WDT_LOWER_16BITS_MASK;
1447:.\Generated_Source\PSoC4/CyLFClk.c ****             break;
1448:.\Generated_Source\PSoC4/CyLFClk.c **** 
1449:.\Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 1 */
1450:.\Generated_Source\PSoC4/CyLFClk.c ****             case 1u:
1451:.\Generated_Source\PSoC4/CyLFClk.c ****                 regValue = (CY_SYS_WDT_CTRLOW_REG >> CY_SYS_WDT_CNT_MATCH_SHIFT) & CY_SYS_WDT_LOWER
1452:.\Generated_Source\PSoC4/CyLFClk.c ****             break;
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 33


1453:.\Generated_Source\PSoC4/CyLFClk.c **** 
1454:.\Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 2 */
1455:.\Generated_Source\PSoC4/CyLFClk.c ****             case 2u:
1456:.\Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRHIGH_REG;
1457:.\Generated_Source\PSoC4/CyLFClk.c ****             break;
1458:.\Generated_Source\PSoC4/CyLFClk.c **** 
1459:.\Generated_Source\PSoC4/CyLFClk.c ****             default:
1460:.\Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
1461:.\Generated_Source\PSoC4/CyLFClk.c ****             break;
1462:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1463:.\Generated_Source\PSoC4/CyLFClk.c **** 
1464:.\Generated_Source\PSoC4/CyLFClk.c ****         return (regValue);
1465:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1466:.\Generated_Source\PSoC4/CyLFClk.c **** 
1467:.\Generated_Source\PSoC4/CyLFClk.c **** 
1468:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1469:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptSource
1470:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1471:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1472:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reads a mask containing all the WDT counters interrupts that are currently
1473:.\Generated_Source\PSoC4/CyLFClk.c ****     * set by the hardware, if a corresponding mode is selected.
1474:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1475:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of interrupts set
1476:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER0_INT - Counter 0
1477:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER1_INT - Counter 1
1478:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER2_INT - Counter 2
1479:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1480:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1481:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetInterruptSource(void)
1482:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1483:.\Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONTROL_REG & (CY_SYS_WDT_COUNTER0_INT | CY_SYS_WDT_COUNTER1_INT | CY_SY
1484:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1485:.\Generated_Source\PSoC4/CyLFClk.c **** 
1486:.\Generated_Source\PSoC4/CyLFClk.c **** 
1487:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1488:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
1489:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1490:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1491:.\Generated_Source\PSoC4/CyLFClk.c ****     * Clears all the WDT counter interrupts set in the mask.
1492:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1493:.\Generated_Source\PSoC4/CyLFClk.c ****     * Calling this function also prevents from Reset when the counter mode is set 
1494:.\Generated_Source\PSoC4/CyLFClk.c ****     * to generate 3 interrupts and then the device resets.
1495:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1496:.\Generated_Source\PSoC4/CyLFClk.c ****     * All the WDT interrupts are to be cleared by the firmware, otherwise
1497:.\Generated_Source\PSoC4/CyLFClk.c ****     * interrupts are generated continuously.
1498:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1499:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1500:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_INT - Clears counter 0 interrupts <br>
1501:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_INT - Clears counter 1 interrupts <br>
1502:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_INT - Clears counter 2 interrupts
1503:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1504:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1505:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function temporary removes the watchdog lock, if it was set, and
1506:.\Generated_Source\PSoC4/CyLFClk.c ****     * restores the lock state after cleaning the WDT interrupts that are set in
1507:.\Generated_Source\PSoC4/CyLFClk.c ****     * a mask.
1508:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1509:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 34


1510:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(uint32 counterMask)
1511:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1512:.\Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
1513:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 wdtLockState;
1514:.\Generated_Source\PSoC4/CyLFClk.c **** 
1515:.\Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
1516:.\Generated_Source\PSoC4/CyLFClk.c **** 
1517:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtLocked())
1518:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1519:.\Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 1u;
1520:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtUnlock();
1521:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1522:.\Generated_Source\PSoC4/CyLFClk.c ****         else
1523:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1524:.\Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 0u;
1525:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1526:.\Generated_Source\PSoC4/CyLFClk.c **** 
1527:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT control register value */
1528:.\Generated_Source\PSoC4/CyLFClk.c ****         counterMask &= (CY_SYS_WDT_COUNTER0_INT |
1529:.\Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER1_INT |
1530:.\Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER2_INT);
1531:.\Generated_Source\PSoC4/CyLFClk.c **** 
1532:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG = counterMask | (CY_SYS_WDT_CONTROL_REG & ~(CY_SYS_WDT_COUNTER0_INT 
1533:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER1_INT 
1534:.\Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER2_INT)
1535:.\Generated_Source\PSoC4/CyLFClk.c **** 
1536:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Read the CY_SYS_WDT_CONTROL_REG to clear the interrupt request.
1537:.\Generated_Source\PSoC4/CyLFClk.c ****          * Cypress ID #207093, #206231
1538:.\Generated_Source\PSoC4/CyLFClk.c ****         */
1539:.\Generated_Source\PSoC4/CyLFClk.c ****         (void)CY_SYS_WDT_CONTROL_REG;
1540:.\Generated_Source\PSoC4/CyLFClk.c **** 
1541:.\Generated_Source\PSoC4/CyLFClk.c ****         if (1u == wdtLockState)
1542:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1543:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtLock();
1544:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1545:.\Generated_Source\PSoC4/CyLFClk.c **** 
1546:.\Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
1547:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1548:.\Generated_Source\PSoC4/CyLFClk.c **** 
1549:.\Generated_Source\PSoC4/CyLFClk.c **** 
1550:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1551:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtResetCounters
1552:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1553:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1554:.\Generated_Source\PSoC4/CyLFClk.c ****     * Resets all the WDT counters set in the mask.
1555:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1556:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param countersMask
1557:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_RESET - Reset counter 0 <br>
1558:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_RESET - Reset counter 1 <br>
1559:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_RESET - Reset counter 2
1560:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1561:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1562:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function does not reset counter values if the Watchdog is locked.
1563:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function waits while corresponding counters will be reset. This may
1564:.\Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1565:.\Generated_Source\PSoC4/CyLFClk.c ****     * The LFCLK source must be enabled. Otherwise, the function will never exit.
1566:.\Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 35


1567:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1568:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtResetCounters(uint32 countersMask)
1569:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1570:.\Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT reset value */
1571:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= (countersMask & CY_SYS_WDT_COUNTERS_RESET);
1572:.\Generated_Source\PSoC4/CyLFClk.c **** 
1573:.\Generated_Source\PSoC4/CyLFClk.c ****         while (0uL != (CY_SYS_WDT_CONTROL_REG & CY_SYS_WDT_COUNTERS_RESET))
1574:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1575:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for reset to come into effect */
1576:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1577:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1578:.\Generated_Source\PSoC4/CyLFClk.c **** 
1579:.\Generated_Source\PSoC4/CyLFClk.c **** 
1580:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1581:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetInterruptCallback
1582:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1583:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1584:.\Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the particular WDT counter.
1585:.\Generated_Source\PSoC4/CyLFClk.c ****     * These functions are called on the WDT interrupt.
1586:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1587:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1588:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
1589:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1590:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the previous callback function.
1591:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return NULL is returned if the specified address is not set.
1592:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1593:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1594:.\Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(uint32 counterNum, cyWdtCallback function)
1595:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1596:.\Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
1597:.\Generated_Source\PSoC4/CyLFClk.c **** 
1598:.\Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1599:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1600:.\Generated_Source\PSoC4/CyLFClk.c ****             prevCallback = cySysWdtCallback[counterNum];
1601:.\Generated_Source\PSoC4/CyLFClk.c ****             cySysWdtCallback[counterNum] = function;
1602:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1603:.\Generated_Source\PSoC4/CyLFClk.c ****         else
1604:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1605:.\Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1606:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1607:.\Generated_Source\PSoC4/CyLFClk.c **** 
1608:.\Generated_Source\PSoC4/CyLFClk.c ****         return((cyWdtCallback)prevCallback);
1609:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1610:.\Generated_Source\PSoC4/CyLFClk.c **** 
1611:.\Generated_Source\PSoC4/CyLFClk.c **** 
1612:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1613:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptCallback
1614:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1615:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1616:.\Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the particular WDT counter.
1617:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1618:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1619:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1620:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for a particular WDT by
1621:.\Generated_Source\PSoC4/CyLFClk.c ****     * a particular address that are passed through arguments.
1622:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1623:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 36


1624:.\Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(uint32 counterNum)
1625:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1626:.\Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback retCallback = (void *)0;
1627:.\Generated_Source\PSoC4/CyLFClk.c **** 
1628:.\Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1629:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1630:.\Generated_Source\PSoC4/CyLFClk.c ****             retCallback = (cyWdtCallback)cySysWdtCallback[counterNum];
1631:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1632:.\Generated_Source\PSoC4/CyLFClk.c ****         else
1633:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1634:.\Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1635:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1636:.\Generated_Source\PSoC4/CyLFClk.c **** 
1637:.\Generated_Source\PSoC4/CyLFClk.c ****         return(retCallback);
1638:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1639:.\Generated_Source\PSoC4/CyLFClk.c **** 
1640:.\Generated_Source\PSoC4/CyLFClk.c **** 
1641:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1642:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnableCounterIsr
1643:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1644:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1645:.\Generated_Source\PSoC4/CyLFClk.c ****     * Enables the ISR callback servicing for the particular WDT counter
1646:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1647:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1648:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1649:.\Generated_Source\PSoC4/CyLFClk.c ****     * Value corresponds to appropriate WDT counter. For example value 1 
1650:.\Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT counter.
1651:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1652:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1653:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnableCounterIsr(uint32 counterNum)
1654:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1655:.\Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1656:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1657:.\Generated_Source\PSoC4/CyLFClk.c ****             disableServicedIsr &= ~counterIntMaskTbl[counterNum];
1658:.\Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask |= counterIntMaskTbl[counterNum];
1659:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1660:.\Generated_Source\PSoC4/CyLFClk.c ****         else
1661:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1662:.\Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1663:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1664:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1665:.\Generated_Source\PSoC4/CyLFClk.c **** 
1666:.\Generated_Source\PSoC4/CyLFClk.c **** 
1667:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1668:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisableCounterIsr
1669:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1670:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1671:.\Generated_Source\PSoC4/CyLFClk.c ****     * Disables the ISR callback servicing for the particular WDT counter
1672:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1673:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1674:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1675:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1676:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisableCounterIsr(uint32 counterNum)
1677:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1678:.\Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1679:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1680:.\Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask &= ~counterIntMaskTbl[counterNum];
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 37


1681:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1682:.\Generated_Source\PSoC4/CyLFClk.c ****         else
1683:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1684:.\Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1685:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1686:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1687:.\Generated_Source\PSoC4/CyLFClk.c **** 
1688:.\Generated_Source\PSoC4/CyLFClk.c **** 
1689:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1690:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
1691:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1692:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1693:.\Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
1694:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1695:.\Generated_Source\PSoC4/CyLFClk.c ****     * The handler checks which WDT triggered in the interrupt and calls the 
1696:.\Generated_Source\PSoC4/CyLFClk.c ****     * respective callback functions configured by the user by using 
1697:.\Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetIsrCallback() API.
1698:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1699:.\Generated_Source\PSoC4/CyLFClk.c ****     * The order of the callback execution is incremental. Callback-0 is
1700:.\Generated_Source\PSoC4/CyLFClk.c ****     * run as the first one and callback-2 is called as the last one.
1701:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1702:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1703:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
1704:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
1705:.\Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
1706:.\Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
1707:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1708:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1709:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
1710:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1711:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER0_INT & CY_SYS_WDT_CONTROL_REG))
1712:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1713:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER0_INT & wdtIsrMask))
1714:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1715:.\Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER0_INT);
1716:.\Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER0_INT;
1717:.\Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER0] != (void *) 0)
1718:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
1719:.\Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER0])();
1720:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
1721:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1722:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1723:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1724:.\Generated_Source\PSoC4/CyLFClk.c **** 
1725:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER1_INT & CY_SYS_WDT_CONTROL_REG))
1726:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1727:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER1_INT & wdtIsrMask))
1728:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1729:.\Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER1_INT);
1730:.\Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER1_INT;
1731:.\Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER1] != (void *) 0)
1732:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
1733:.\Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER1])();
1734:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
1735:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1736:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1737:.\Generated_Source\PSoC4/CyLFClk.c ****         }
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 38


1738:.\Generated_Source\PSoC4/CyLFClk.c **** 
1739:.\Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER2_INT & CY_SYS_WDT_CONTROL_REG))
1740:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1741:.\Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER2_INT & wdtIsrMask))
1742:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1743:.\Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER2] != (void *) 0)
1744:.\Generated_Source\PSoC4/CyLFClk.c ****                 {
1745:.\Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER2])();
1746:.\Generated_Source\PSoC4/CyLFClk.c ****                 }
1747:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1748:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER2_INT);
1749:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1750:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1751:.\Generated_Source\PSoC4/CyLFClk.c **** 
1752:.\Generated_Source\PSoC4/CyLFClk.c **** 
1753:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1754:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWatchdogFeed
1755:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1756:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1757:.\Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the corresponded Watchdog Counter before it causes the device reset.
1758:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1759:.\Generated_Source\PSoC4/CyLFClk.c ****     * Supported only for first WDT0 and second WDT1 counters in the "Watchdog" or 
1760:.\Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" modes.
1761:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1762:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1763:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0 - Feeds the Counter 0 <br>
1764:.\Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1 - Feeds the Counter 1
1765:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1766:.\Generated_Source\PSoC4/CyLFClk.c ****     * Value of counterNum corresponds to appropriate counter. For example value 1 
1767:.\Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT1 Counter.
1768:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1769:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1770:.\Generated_Source\PSoC4/CyLFClk.c ****     * Clears the WDT counter in the "Watchdog" mode or clears the WDT interrupt in
1771:.\Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" mode. Does nothing in other modes.
1772:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1773:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1774:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWatchdogFeed(uint32 counterNum)
1775:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1776:.\Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum == CY_SYS_WDT_COUNTER0)
1777:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1778:.\Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1779:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1780:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1781:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1782:.\Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1783:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1784:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER0_RESET);
1785:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1786:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1787:.\Generated_Source\PSoC4/CyLFClk.c ****             else
1788:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1789:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1790:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1791:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1792:.\Generated_Source\PSoC4/CyLFClk.c ****         else if(counterNum == CY_SYS_WDT_COUNTER1)
1793:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1794:.\Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 39


1795:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1796:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1797:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1798:.\Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1799:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1800:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET);
1801:.\Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1802:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1803:.\Generated_Source\PSoC4/CyLFClk.c ****             else
1804:.\Generated_Source\PSoC4/CyLFClk.c ****             {
1805:.\Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1806:.\Generated_Source\PSoC4/CyLFClk.c ****             }
1807:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1808:.\Generated_Source\PSoC4/CyLFClk.c ****         else
1809:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1810:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Do nothing. */
1811:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1812:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1813:.\Generated_Source\PSoC4/CyLFClk.c **** 
1814:.\Generated_Source\PSoC4/CyLFClk.c **** 
1815:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1816:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeCatch
1817:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1818:.\Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1819:.\Generated_Source\PSoC4/CyLFClk.c ****     * Returns once the LFCLK positive edge occurred.
1820:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1821:.\Generated_Source\PSoC4/CyLFClk.c ****     * CySysClkLfclkPosedgeRestore() should be called after this function
1822:.\Generated_Source\PSoC4/CyLFClk.c ****     * to restore the WDT configuration.
1823:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1824:.\Generated_Source\PSoC4/CyLFClk.c ****     * A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1825:.\Generated_Source\PSoC4/CyLFClk.c ****     * functions is expected to be called inside a critical section.
1826:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1827:.\Generated_Source\PSoC4/CyLFClk.c ****     * To ensure that the WDT counter value is read until it changes, the enabled
1828:.\Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter is used. If no counter is enabled, counter 0 is enabled.
1829:.\Generated_Source\PSoC4/CyLFClk.c ****     * And after the LFCLK source is switched, the counter 0 configuration
1830:.\Generated_Source\PSoC4/CyLFClk.c ****     * is restored.
1831:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1832:.\Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
1833:.\Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1834:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1835:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1836:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is
1837:.\Generated_Source\PSoC4/CyLFClk.c ****     * called). Call CySysWdtUnlock() to unlock WDT.
1838:.\Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1839:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1840:.\Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void)
1841:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1842:.\Generated_Source\PSoC4/CyLFClk.c ****         uint32 firstCount;
1843:.\Generated_Source\PSoC4/CyLFClk.c ****         static uint32 lfclkPosedgeEnabledWdtCounter = 0u;
1844:.\Generated_Source\PSoC4/CyLFClk.c **** 
1845:.\Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1846:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1847:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1848:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1849:.\Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1850:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1851:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER1;
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 40


1852:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1853:.\Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1854:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1855:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER2;
1856:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1857:.\Generated_Source\PSoC4/CyLFClk.c ****         else /* All WDT counters are disabled */
1858:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1859:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Configure WDT counter # 0 */
1860:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 1u;
1861:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1862:.\Generated_Source\PSoC4/CyLFClk.c **** 
1863:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Mode = CySysWdtGetMode(CY_SYS_WDT_COUNTER0);
1864:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, CY_SYS_WDT_MODE_NONE);
1865:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtEnable(CY_SYS_WDT_COUNTER0_MASK);
1866:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1867:.\Generated_Source\PSoC4/CyLFClk.c **** 
1868:.\Generated_Source\PSoC4/CyLFClk.c ****         firstCount = CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter);
1869:.\Generated_Source\PSoC4/CyLFClk.c ****         while (CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter) == firstCount)
1870:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1871:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for counter to increment */
1872:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1873:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1874:.\Generated_Source\PSoC4/CyLFClk.c **** 
1875:.\Generated_Source\PSoC4/CyLFClk.c **** 
1876:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1877:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeRestore
1878:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1879:.\Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1880:.\Generated_Source\PSoC4/CyLFClk.c ****     *  Restores the WDT configuration after a CySysClkLfclkPosedgeCatch() call.
1881:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1882:.\Generated_Source\PSoC4/CyLFClk.c ****     *  A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1883:.\Generated_Source\PSoC4/CyLFClk.c ****     *  functions is expected to be called inside a critical section.
1884:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1885:.\Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000/PSoC 4000S / PSoC 4100S / PSoC Analog 
1886:.\Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1887:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1888:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
1889:.\Generated_Source\PSoC4/CyLFClk.c ****     *  This function has no effect if WDT is locked (CySysWdtLock() is
1890:.\Generated_Source\PSoC4/CyLFClk.c ****     *  called). Call CySysWdtUnlock() to unlock WDT.
1891:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1892:.\Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1893:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1894:.\Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void)
1895:.\Generated_Source\PSoC4/CyLFClk.c ****     {
1896:.\Generated_Source\PSoC4/CyLFClk.c ****         if (lfclkPosedgeWdtCounter0Enabled != 0u)
1897:.\Generated_Source\PSoC4/CyLFClk.c ****         {
1898:.\Generated_Source\PSoC4/CyLFClk.c ****             /* Restore counter # 0 configuration and force its shutdown */
1899:.\Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= (uint32)(~CY_SYS_WDT_COUNTER0_MASK);
1900:.\Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, lfclkPosedgeWdtCounter0Mode);
1901:.\Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 0u;
1902:.\Generated_Source\PSoC4/CyLFClk.c ****         }
1903:.\Generated_Source\PSoC4/CyLFClk.c ****     }
1904:.\Generated_Source\PSoC4/CyLFClk.c **** 
1905:.\Generated_Source\PSoC4/CyLFClk.c **** #else
1906:.\Generated_Source\PSoC4/CyLFClk.c **** 
1907:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1908:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 41


1909:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1910:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1911:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the enabled status of the WDT counter.
1912:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1913:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1914:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - Counter is disabled
1915:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - Counter is enabled
1916:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1917:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1918:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(void)
1919:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 367              		.loc 1 1919 0
 368              		.cfi_startproc
1920:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
 369              		.loc 1 1920 0
 370 0000 044B     		ldr	r3, .L28
 371 0002 1868     		ldr	r0, [r3]
 372 0004 044B     		ldr	r3, .L28+4
 373 0006 9C46     		mov	ip, r3
 374 0008 6044     		add	r0, r0, ip
 375 000a 431E     		sub	r3, r0, #1
 376 000c 9841     		sbc	r0, r0, r3
 377 000e C0B2     		uxtb	r0, r0
1921:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 378              		.loc 1 1921 0
 379              		@ sp needed
 380 0010 7047     		bx	lr
 381              	.L29:
 382 0012 C046     		.align	2
 383              	.L28:
 384 0014 38000340 		.word	1073938488
 385 0018 9B771253 		.word	1393719195
 386              		.cfi_endproc
 387              	.LFE5:
 388              		.size	CySysWdtGetEnabledStatus, .-CySysWdtGetEnabledStatus
 389              		.section	.text.CySysWdtEnable,"ax",%progbits
 390              		.align	2
 391              		.global	CySysWdtEnable
 392              		.code	16
 393              		.thumb_func
 394              		.type	CySysWdtEnable, %function
 395              	CySysWdtEnable:
 396              	.LFB6:
1922:.\Generated_Source\PSoC4/CyLFClk.c **** 
1923:.\Generated_Source\PSoC4/CyLFClk.c **** 
1924:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1925:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1926:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1927:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1928:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1929:.\Generated_Source\PSoC4/CyLFClk.c ****     * Enables watchdog timer reset generation.
1930:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1931:.\Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtClearInterrupt() feeds the watchdog. Two unserviced interrupts lead 
1932:.\Generated_Source\PSoC4/CyLFClk.c ****     * to a system reset (i.e. at the third match).
1933:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1934:.\Generated_Source\PSoC4/CyLFClk.c ****     * ILO is enabled by the hardware once WDT is started.
1935:.\Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 42


1936:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1937:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(void)
1938:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 397              		.loc 1 1938 0
 398              		.cfi_startproc
1939:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
 399              		.loc 1 1939 0
 400 0000 0022     		mov	r2, #0
 401 0002 014B     		ldr	r3, .L31
 402 0004 1A60     		str	r2, [r3]
1940:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 403              		.loc 1 1940 0
 404              		@ sp needed
 405 0006 7047     		bx	lr
 406              	.L32:
 407              		.align	2
 408              	.L31:
 409 0008 38000340 		.word	1073938488
 410              		.cfi_endproc
 411              	.LFE6:
 412              		.size	CySysWdtEnable, .-CySysWdtEnable
 413              		.section	.text.CySysWdtDisable,"ax",%progbits
 414              		.align	2
 415              		.global	CySysWdtDisable
 416              		.code	16
 417              		.thumb_func
 418              		.type	CySysWdtDisable, %function
 419              	CySysWdtDisable:
 420              	.LFB7:
1941:.\Generated_Source\PSoC4/CyLFClk.c **** 
1942:.\Generated_Source\PSoC4/CyLFClk.c **** 
1943:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1944:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1945:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1946:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1947:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the WDT reset generation.
1948:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1949:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function unlocks the ENABLE bit in the CLK_ILO_CONFIG registers and
1950:.\Generated_Source\PSoC4/CyLFClk.c ****     * enables the user to disable ILO.
1951:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1952:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1953:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(void)
1954:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 421              		.loc 1 1954 0
 422              		.cfi_startproc
1955:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
 423              		.loc 1 1955 0
 424 0000 014A     		ldr	r2, .L34
 425 0002 024B     		ldr	r3, .L34+4
 426 0004 1A60     		str	r2, [r3]
1956:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 427              		.loc 1 1956 0
 428              		@ sp needed
 429 0006 7047     		bx	lr
 430              	.L35:
 431              		.align	2
 432              	.L34:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 43


 433 0008 6588EDAC 		.word	-1393719195
 434 000c 38000340 		.word	1073938488
 435              		.cfi_endproc
 436              	.LFE7:
 437              		.size	CySysWdtDisable, .-CySysWdtDisable
 438              		.section	.text.CySysWdtSetMatch,"ax",%progbits
 439              		.align	2
 440              		.global	CySysWdtSetMatch
 441              		.code	16
 442              		.thumb_func
 443              		.type	CySysWdtSetMatch, %function
 444              	CySysWdtSetMatch:
 445              	.LFB8:
1957:.\Generated_Source\PSoC4/CyLFClk.c **** 
1958:.\Generated_Source\PSoC4/CyLFClk.c **** 
1959:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1960:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1961:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1962:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1963:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1964:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1965:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param match Valid range [0-65535]. The value to be used to match against 
1966:.\Generated_Source\PSoC4/CyLFClk.c ****     * the counter.
1967:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1968:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1969:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 match)
1970:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 446              		.loc 1 1970 0
 447              		.cfi_startproc
 448              	.LVL35:
1971:.\Generated_Source\PSoC4/CyLFClk.c ****         match &= CY_SYS_WDT_MATCH_MASK;
 449              		.loc 1 1971 0
 450 0000 0004     		lsl	r0, r0, #16
 451              	.LVL36:
 452 0002 030C     		lsr	r3, r0, #16
 453              	.LVL37:
1972:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_MATCH_MASK)) | match;
 454              		.loc 1 1972 0
 455 0004 034A     		ldr	r2, .L37
 456 0006 1068     		ldr	r0, [r2]
 457 0008 000C     		lsr	r0, r0, #16
 458 000a 0004     		lsl	r0, r0, #16
 459 000c 1843     		orr	r0, r3
 460 000e 1060     		str	r0, [r2]
1973:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 461              		.loc 1 1973 0
 462              		@ sp needed
 463 0010 7047     		bx	lr
 464              	.L38:
 465 0012 C046     		.align	2
 466              	.L37:
 467 0014 40000340 		.word	1073938496
 468              		.cfi_endproc
 469              	.LFE8:
 470              		.size	CySysWdtSetMatch, .-CySysWdtSetMatch
 471              		.section	.text.CySysWdtGetMatch,"ax",%progbits
 472              		.align	2
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 44


 473              		.global	CySysWdtGetMatch
 474              		.code	16
 475              		.thumb_func
 476              		.type	CySysWdtGetMatch, %function
 477              	CySysWdtGetMatch:
 478              	.LFB9:
1974:.\Generated_Source\PSoC4/CyLFClk.c **** 
1975:.\Generated_Source\PSoC4/CyLFClk.c **** 
1976:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1977:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1978:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1979:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1980:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1981:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1982:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The counter match value.
1983:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1984:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1985:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(void)
1986:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 479              		.loc 1 1986 0
 480              		.cfi_startproc
1987:.\Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
 481              		.loc 1 1987 0
 482 0000 024B     		ldr	r3, .L40
 483 0002 1868     		ldr	r0, [r3]
 484 0004 0004     		lsl	r0, r0, #16
 485 0006 000C     		lsr	r0, r0, #16
1988:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 486              		.loc 1 1988 0
 487              		@ sp needed
 488 0008 7047     		bx	lr
 489              	.L41:
 490 000a C046     		.align	2
 491              	.L40:
 492 000c 40000340 		.word	1073938496
 493              		.cfi_endproc
 494              	.LFE9:
 495              		.size	CySysWdtGetMatch, .-CySysWdtGetMatch
 496              		.section	.text.CySysWdtGetCount,"ax",%progbits
 497              		.align	2
 498              		.global	CySysWdtGetCount
 499              		.code	16
 500              		.thumb_func
 501              		.type	CySysWdtGetCount, %function
 502              	CySysWdtGetCount:
 503              	.LFB10:
1989:.\Generated_Source\PSoC4/CyLFClk.c **** 
1990:.\Generated_Source\PSoC4/CyLFClk.c **** 
1991:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1992:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1993:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1994:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1995:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1996:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1997:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.
1998:.\Generated_Source\PSoC4/CyLFClk.c ****     *
1999:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 45


2000:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(void)
2001:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 504              		.loc 1 2001 0
 505              		.cfi_startproc
2002:.\Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
 506              		.loc 1 2002 0
 507 0000 014B     		ldr	r3, .L43
 508 0002 1868     		ldr	r0, [r3]
2003:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 509              		.loc 1 2003 0
 510              		@ sp needed
 511 0004 7047     		bx	lr
 512              	.L44:
 513 0006 C046     		.align	2
 514              	.L43:
 515 0008 3C000340 		.word	1073938492
 516              		.cfi_endproc
 517              	.LFE10:
 518              		.size	CySysWdtGetCount, .-CySysWdtGetCount
 519              		.section	.text.CySysWdtSetIgnoreBits,"ax",%progbits
 520              		.align	2
 521              		.global	CySysWdtSetIgnoreBits
 522              		.code	16
 523              		.thumb_func
 524              		.type	CySysWdtSetIgnoreBits, %function
 525              	CySysWdtSetIgnoreBits:
 526              	.LFB11:
2004:.\Generated_Source\PSoC4/CyLFClk.c **** 
2005:.\Generated_Source\PSoC4/CyLFClk.c **** 
2006:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2007:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIgnoreBits
2008:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2009:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2010:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2011:.\Generated_Source\PSoC4/CyLFClk.c ****     * Configures the number of the MSB bits of the watchdog timer that are not
2012:.\Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2013:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2014:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param bitsNum Valid range [0-15]. The number of the MSB bits.
2015:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2016:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details The value of bitsNum controls the time-to-reset of the watchdog
2017:.\Generated_Source\PSoC4/CyLFClk.c ****     * (which happens after 3 successive matches).
2018:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2019:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2020:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetIgnoreBits(uint32 bitsNum)
2021:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 527              		.loc 1 2021 0
 528              		.cfi_startproc
 529              	.LVL38:
2022:.\Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 530              		.loc 1 2022 0
 531 0000 0004     		lsl	r0, r0, #16
 532              	.LVL39:
 533 0002 F022     		mov	r2, #240
 534 0004 1203     		lsl	r2, r2, #12
 535 0006 031C     		mov	r3, r0
 536 0008 1340     		and	r3, r2
 537              	.LVL40:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 46


2023:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_IGNORE_BITS_MASK)) | bi
 538              		.loc 1 2023 0
 539 000a 0349     		ldr	r1, .L46
 540 000c 0868     		ldr	r0, [r1]
 541 000e 034A     		ldr	r2, .L46+4
 542 0010 1040     		and	r0, r2
 543 0012 1843     		orr	r0, r3
 544 0014 0860     		str	r0, [r1]
2024:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 545              		.loc 1 2024 0
 546              		@ sp needed
 547 0016 7047     		bx	lr
 548              	.L47:
 549              		.align	2
 550              	.L46:
 551 0018 40000340 		.word	1073938496
 552 001c FFFFF0FF 		.word	-983041
 553              		.cfi_endproc
 554              	.LFE11:
 555              		.size	CySysWdtSetIgnoreBits, .-CySysWdtSetIgnoreBits
 556              		.section	.text.CySysWdtGetIgnoreBits,"ax",%progbits
 557              		.align	2
 558              		.global	CySysWdtGetIgnoreBits
 559              		.code	16
 560              		.thumb_func
 561              		.type	CySysWdtGetIgnoreBits, %function
 562              	CySysWdtGetIgnoreBits:
 563              	.LFB12:
2025:.\Generated_Source\PSoC4/CyLFClk.c **** 
2026:.\Generated_Source\PSoC4/CyLFClk.c **** 
2027:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2028:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIgnoreBits
2029:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2030:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2031:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2032:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reads the number of the  MSB bits of the watchdog timer that are not
2033:.\Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2034:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2035:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The number of the MSB bits.
2036:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2037:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2038:.\Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetIgnoreBits(void)
2039:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 564              		.loc 1 2039 0
 565              		.cfi_startproc
2040:.\Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
 566              		.loc 1 2040 0
 567 0000 024B     		ldr	r3, .L49
 568 0002 1868     		ldr	r0, [r3]
 569 0004 0003     		lsl	r0, r0, #12
 570 0006 000F     		lsr	r0, r0, #28
2041:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 571              		.loc 1 2041 0
 572              		@ sp needed
 573 0008 7047     		bx	lr
 574              	.L50:
 575 000a C046     		.align	2
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 47


 576              	.L49:
 577 000c 40000340 		.word	1073938496
 578              		.cfi_endproc
 579              	.LFE12:
 580              		.size	CySysWdtGetIgnoreBits, .-CySysWdtGetIgnoreBits
 581              		.section	.text.CySysWdtClearInterrupt,"ax",%progbits
 582              		.align	2
 583              		.global	CySysWdtClearInterrupt
 584              		.code	16
 585              		.thumb_func
 586              		.type	CySysWdtClearInterrupt, %function
 587              	CySysWdtClearInterrupt:
 588              	.LFB13:
2042:.\Generated_Source\PSoC4/CyLFClk.c **** 
2043:.\Generated_Source\PSoC4/CyLFClk.c **** 
2044:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2045:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
2046:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2047:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2048:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2049:.\Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the watchdog.
2050:.\Generated_Source\PSoC4/CyLFClk.c ****     * Cleans the WDT match flag which is set every time the WDT counter reaches a 
2051:.\Generated_Source\PSoC4/CyLFClk.c ****     * WDT match value. Two unserviced interrupts lead to a system reset 
2052:.\Generated_Source\PSoC4/CyLFClk.c ****     * (i.e. at the third match).
2053:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2054:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2055:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(void)
2056:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 589              		.loc 1 2056 0
 590              		.cfi_startproc
2057:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 591              		.loc 1 2057 0
 592 0000 024A     		ldr	r2, .L52
 593 0002 1168     		ldr	r1, [r2]
 594 0004 0123     		mov	r3, #1
 595 0006 0B43     		orr	r3, r1
 596 0008 1360     		str	r3, [r2]
2058:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 597              		.loc 1 2058 0
 598              		@ sp needed
 599 000a 7047     		bx	lr
 600              	.L53:
 601              		.align	2
 602              	.L52:
 603 000c 44000340 		.word	1073938500
 604              		.cfi_endproc
 605              	.LFE13:
 606              		.size	CySysWdtClearInterrupt, .-CySysWdtClearInterrupt
 607              		.section	.text.CySysWdtMaskInterrupt,"ax",%progbits
 608              		.align	2
 609              		.global	CySysWdtMaskInterrupt
 610              		.code	16
 611              		.thumb_func
 612              		.type	CySysWdtMaskInterrupt, %function
 613              	CySysWdtMaskInterrupt:
 614              	.LFB14:
2059:.\Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 48


2060:.\Generated_Source\PSoC4/CyLFClk.c **** 
2061:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2062:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtMaskInterrupt
2063:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2064:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2065:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2066:.\Generated_Source\PSoC4/CyLFClk.c ****     * After masking interrupts from WDT, they are not passed to CPU.
2067:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function does not disable WDT reset generation.
2068:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2069:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2070:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtMaskInterrupt(void)
2071:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 615              		.loc 1 2071 0
 616              		.cfi_startproc
2072:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
 617              		.loc 1 2072 0
 618 0000 024A     		ldr	r2, .L55
 619 0002 1368     		ldr	r3, [r2]
 620 0004 0121     		mov	r1, #1
 621 0006 8B43     		bic	r3, r1
 622 0008 1360     		str	r3, [r2]
2073:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 623              		.loc 1 2073 0
 624              		@ sp needed
 625 000a 7047     		bx	lr
 626              	.L56:
 627              		.align	2
 628              	.L55:
 629 000c 4C000340 		.word	1073938508
 630              		.cfi_endproc
 631              	.LFE14:
 632              		.size	CySysWdtMaskInterrupt, .-CySysWdtMaskInterrupt
 633              		.section	.text.CySysWdtUnmaskInterrupt,"ax",%progbits
 634              		.align	2
 635              		.global	CySysWdtUnmaskInterrupt
 636              		.code	16
 637              		.thumb_func
 638              		.type	CySysWdtUnmaskInterrupt, %function
 639              	CySysWdtUnmaskInterrupt:
 640              	.LFB15:
2074:.\Generated_Source\PSoC4/CyLFClk.c **** 
2075:.\Generated_Source\PSoC4/CyLFClk.c **** 
2076:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2077:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnmaskInterrupt
2078:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2079:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2080:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2081:.\Generated_Source\PSoC4/CyLFClk.c ****     * After unmasking interrupts from WDT, they are passed to CPU.
2082:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function does not impact the reset generation.
2083:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2084:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2085:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnmaskInterrupt(void)
2086:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 641              		.loc 1 2086 0
 642              		.cfi_startproc
2087:.\Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 643              		.loc 1 2087 0
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 49


 644 0000 024A     		ldr	r2, .L58
 645 0002 1168     		ldr	r1, [r2]
 646 0004 0123     		mov	r3, #1
 647 0006 0B43     		orr	r3, r1
 648 0008 1360     		str	r3, [r2]
2088:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 649              		.loc 1 2088 0
 650              		@ sp needed
 651 000a 7047     		bx	lr
 652              	.L59:
 653              		.align	2
 654              	.L58:
 655 000c 4C000340 		.word	1073938508
 656              		.cfi_endproc
 657              	.LFE15:
 658              		.size	CySysWdtUnmaskInterrupt, .-CySysWdtUnmaskInterrupt
 659              		.section	.text.CySysWdtSetInterruptCallback,"ax",%progbits
 660              		.align	2
 661              		.global	CySysWdtSetInterruptCallback
 662              		.code	16
 663              		.thumb_func
 664              		.type	CySysWdtSetInterruptCallback, %function
 665              	CySysWdtSetInterruptCallback:
 666              	.LFB16:
2089:.\Generated_Source\PSoC4/CyLFClk.c **** 
2090:.\Generated_Source\PSoC4/CyLFClk.c **** 
2091:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2092:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIsrCallback
2093:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2094:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2095:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2096:.\Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the WDT counter
2097:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2098:.\Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
2099:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2100:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to a previous callback function.
2101:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2102:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2103:.\Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(cyWdtCallback function)
2104:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 667              		.loc 1 2104 0
 668              		.cfi_startproc
 669              	.LVL41:
2105:.\Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
2106:.\Generated_Source\PSoC4/CyLFClk.c **** 
2107:.\Generated_Source\PSoC4/CyLFClk.c ****         prevCallback = cySysWdtCallback;
 670              		.loc 1 2107 0
 671 0000 024B     		ldr	r3, .L61
 672 0002 5A68     		ldr	r2, [r3, #4]
 673              	.LVL42:
2108:.\Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
 674              		.loc 1 2108 0
 675 0004 5860     		str	r0, [r3, #4]
2109:.\Generated_Source\PSoC4/CyLFClk.c **** 
2110:.\Generated_Source\PSoC4/CyLFClk.c ****         return(prevCallback);
2111:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 676              		.loc 1 2111 0
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 50


 677 0006 101C     		mov	r0, r2
 678              	.LVL43:
 679              		@ sp needed
 680 0008 7047     		bx	lr
 681              	.L62:
 682 000a C046     		.align	2
 683              	.L61:
 684 000c 00000000 		.word	.LANCHOR0
 685              		.cfi_endproc
 686              	.LFE16:
 687              		.size	CySysWdtSetInterruptCallback, .-CySysWdtSetInterruptCallback
 688              		.section	.text.CySysWdtGetInterruptCallback,"ax",%progbits
 689              		.align	2
 690              		.global	CySysWdtGetInterruptCallback
 691              		.code	16
 692              		.thumb_func
 693              		.type	CySysWdtGetInterruptCallback, %function
 694              	CySysWdtGetInterruptCallback:
 695              	.LFB17:
2112:.\Generated_Source\PSoC4/CyLFClk.c **** 
2113:.\Generated_Source\PSoC4/CyLFClk.c **** 
2114:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2115:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIsrCallback
2116:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2117:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2118:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2119:.\Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the WDT counter
2120:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2121:.\Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for WDT.
2122:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2123:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2124:.\Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(void)
2125:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 696              		.loc 1 2125 0
 697              		.cfi_startproc
2126:.\Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
 698              		.loc 1 2126 0
 699 0000 014B     		ldr	r3, .L64
 700 0002 5868     		ldr	r0, [r3, #4]
2127:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 701              		.loc 1 2127 0
 702              		@ sp needed
 703 0004 7047     		bx	lr
 704              	.L65:
 705 0006 C046     		.align	2
 706              	.L64:
 707 0008 00000000 		.word	.LANCHOR0
 708              		.cfi_endproc
 709              	.LFE17:
 710              		.size	CySysWdtGetInterruptCallback, .-CySysWdtGetInterruptCallback
 711              		.section	.text.CySysWdtIsr,"ax",%progbits
 712              		.align	2
 713              		.global	CySysWdtIsr
 714              		.code	16
 715              		.thumb_func
 716              		.type	CySysWdtIsr, %function
 717              	CySysWdtIsr:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 51


 718              	.LFB18:
2128:.\Generated_Source\PSoC4/CyLFClk.c **** 
2129:.\Generated_Source\PSoC4/CyLFClk.c **** 
2130:.\Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2131:.\Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
2132:.\Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2133:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2134:.\Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2135:.\Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
2136:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2137:.\Generated_Source\PSoC4/CyLFClk.c ****     * The handler calls the respective callback functions configured by the user 
2138:.\Generated_Source\PSoC4/CyLFClk.c ****     * by using CySysWdtSetIsrCallback() API.
2139:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2140:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2141:.\Generated_Source\PSoC4/CyLFClk.c ****     * \details
2142:.\Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
2143:.\Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
2144:.\Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
2145:.\Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
2146:.\Generated_Source\PSoC4/CyLFClk.c ****     *
2147:.\Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2148:.\Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
2149:.\Generated_Source\PSoC4/CyLFClk.c ****     {
 719              		.loc 1 2149 0
 720              		.cfi_startproc
 721 0000 08B5     		push	{r3, lr}
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 3, -8
 724              		.cfi_offset 14, -4
2150:.\Generated_Source\PSoC4/CyLFClk.c ****         if(cySysWdtCallback != (void *) 0)
 725              		.loc 1 2150 0
 726 0002 044B     		ldr	r3, .L68
 727 0004 5B68     		ldr	r3, [r3, #4]
 728 0006 002B     		cmp	r3, #0
 729 0008 00D0     		beq	.L67
2151:.\Generated_Source\PSoC4/CyLFClk.c ****         {
2152:.\Generated_Source\PSoC4/CyLFClk.c ****             (void)(cySysWdtCallback)();
 730              		.loc 1 2152 0
 731 000a 9847     		blx	r3
 732              	.LVL44:
 733              	.L67:
2153:.\Generated_Source\PSoC4/CyLFClk.c ****         }
2154:.\Generated_Source\PSoC4/CyLFClk.c **** 
2155:.\Generated_Source\PSoC4/CyLFClk.c ****         CySysWdtClearInterrupt();
 734              		.loc 1 2155 0
 735 000c FFF7FEFF 		bl	CySysWdtClearInterrupt
 736              	.LVL45:
2156:.\Generated_Source\PSoC4/CyLFClk.c ****     }
 737              		.loc 1 2156 0
 738              		@ sp needed
 739 0010 08BD     		pop	{r3, pc}
 740              	.L69:
 741 0012 C046     		.align	2
 742              	.L68:
 743 0014 00000000 		.word	.LANCHOR0
 744              		.cfi_endproc
 745              	.LFE18:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 52


 746              		.size	CySysWdtIsr, .-CySysWdtIsr
 747              		.bss
 748              		.align	2
 749              		.set	.LANCHOR0,. + 0
 750              		.type	compensateRunningStatus.4657, %object
 751              		.size	compensateRunningStatus.4657, 4
 752              	compensateRunningStatus.4657:
 753 0000 00000000 		.space	4
 754              		.type	cySysWdtCallback, %object
 755              		.size	cySysWdtCallback, 4
 756              	cySysWdtCallback:
 757 0004 00000000 		.space	4
 758              		.text
 759              	.Letext0:
 760              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 761              		.file 3 ".\\Generated_Source\\PSoC4\\CyLFClk.h"
 762              		.file 4 ".\\Generated_Source\\PSoC4\\CyLib.h"
 763              		.section	.debug_info,"",%progbits
 764              	.Ldebug_info0:
 765 0000 23030000 		.4byte	0x323
 766 0004 0400     		.2byte	0x4
 767 0006 00000000 		.4byte	.Ldebug_abbrev0
 768 000a 04       		.byte	0x4
 769 000b 01       		.uleb128 0x1
 770 000c 18030000 		.4byte	.LASF48
 771 0010 01       		.byte	0x1
 772 0011 1B040000 		.4byte	.LASF49
 773 0015 13010000 		.4byte	.LASF50
 774 0019 00000000 		.4byte	.Ldebug_ranges0+0
 775 001d 00000000 		.4byte	0
 776 0021 00000000 		.4byte	.Ldebug_line0
 777 0025 02       		.uleb128 0x2
 778 0026 01       		.byte	0x1
 779 0027 06       		.byte	0x6
 780 0028 DC030000 		.4byte	.LASF0
 781 002c 02       		.uleb128 0x2
 782 002d 01       		.byte	0x1
 783 002e 08       		.byte	0x8
 784 002f B4000000 		.4byte	.LASF1
 785 0033 02       		.uleb128 0x2
 786 0034 02       		.byte	0x2
 787 0035 05       		.byte	0x5
 788 0036 BC030000 		.4byte	.LASF2
 789 003a 02       		.uleb128 0x2
 790 003b 02       		.byte	0x2
 791 003c 07       		.byte	0x7
 792 003d 00010000 		.4byte	.LASF3
 793 0041 02       		.uleb128 0x2
 794 0042 04       		.byte	0x4
 795 0043 05       		.byte	0x5
 796 0044 C6030000 		.4byte	.LASF4
 797 0048 02       		.uleb128 0x2
 798 0049 04       		.byte	0x4
 799 004a 07       		.byte	0x7
 800 004b E6000000 		.4byte	.LASF5
 801 004f 02       		.uleb128 0x2
 802 0050 08       		.byte	0x8
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 53


 803 0051 05       		.byte	0x5
 804 0052 E7020000 		.4byte	.LASF6
 805 0056 02       		.uleb128 0x2
 806 0057 08       		.byte	0x8
 807 0058 07       		.byte	0x7
 808 0059 48020000 		.4byte	.LASF7
 809 005d 03       		.uleb128 0x3
 810 005e 04       		.byte	0x4
 811 005f 05       		.byte	0x5
 812 0060 696E7400 		.ascii	"int\000"
 813 0064 02       		.uleb128 0x2
 814 0065 04       		.byte	0x4
 815 0066 07       		.byte	0x7
 816 0067 26020000 		.4byte	.LASF8
 817 006b 04       		.uleb128 0x4
 818 006c 07020000 		.4byte	.LASF12
 819 0070 02       		.byte	0x2
 820 0071 9A01     		.2byte	0x19a
 821 0073 48000000 		.4byte	0x48
 822 0077 02       		.uleb128 0x2
 823 0078 04       		.byte	0x4
 824 0079 04       		.byte	0x4
 825 007a AE000000 		.4byte	.LASF9
 826 007e 02       		.uleb128 0x2
 827 007f 08       		.byte	0x8
 828 0080 04       		.byte	0x4
 829 0081 B4010000 		.4byte	.LASF10
 830 0085 02       		.uleb128 0x2
 831 0086 01       		.byte	0x1
 832 0087 08       		.byte	0x8
 833 0088 02030000 		.4byte	.LASF11
 834 008c 04       		.uleb128 0x4
 835 008d 19000000 		.4byte	.LASF13
 836 0091 02       		.byte	0x2
 837 0092 3A02     		.2byte	0x23a
 838 0094 48000000 		.4byte	0x48
 839 0098 04       		.uleb128 0x4
 840 0099 22000000 		.4byte	.LASF14
 841 009d 02       		.byte	0x2
 842 009e 4402     		.2byte	0x244
 843 00a0 A4000000 		.4byte	0xa4
 844 00a4 05       		.uleb128 0x5
 845 00a5 6B000000 		.4byte	0x6b
 846 00a9 06       		.uleb128 0x6
 847 00aa 04       		.byte	0x4
 848 00ab AF000000 		.4byte	0xaf
 849 00af 07       		.uleb128 0x7
 850 00b0 08       		.uleb128 0x8
 851 00b1 C8000000 		.4byte	.LASF15
 852 00b5 03       		.byte	0x3
 853 00b6 58       		.byte	0x58
 854 00b7 A9000000 		.4byte	0xa9
 855 00bb 02       		.uleb128 0x2
 856 00bc 04       		.byte	0x4
 857 00bd 07       		.byte	0x7
 858 00be BC020000 		.4byte	.LASF16
 859 00c2 09       		.uleb128 0x9
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 54


 860 00c3 5C000000 		.4byte	.LASF17
 861 00c7 01       		.byte	0x1
 862 00c8 53       		.byte	0x53
 863 00c9 00000000 		.4byte	.LFB0
 864 00cd 14000000 		.4byte	.LFE0-.LFB0
 865 00d1 01       		.uleb128 0x1
 866 00d2 9C       		.byte	0x9c
 867 00d3 09       		.uleb128 0x9
 868 00d4 D6000000 		.4byte	.LASF18
 869 00d8 01       		.byte	0x1
 870 00d9 6C       		.byte	0x6c
 871 00da 00000000 		.4byte	.LFB1
 872 00de 10000000 		.4byte	.LFE1-.LFB1
 873 00e2 01       		.uleb128 0x1
 874 00e3 9C       		.byte	0x9c
 875 00e4 09       		.uleb128 0x9
 876 00e5 CB010000 		.4byte	.LASF19
 877 00e9 01       		.byte	0x1
 878 00ea A8       		.byte	0xa8
 879 00eb 00000000 		.4byte	.LFB2
 880 00ef 34000000 		.4byte	.LFE2-.LFB2
 881 00f3 01       		.uleb128 0x1
 882 00f4 9C       		.byte	0x9c
 883 00f5 09       		.uleb128 0x9
 884 00f6 99010000 		.4byte	.LASF20
 885 00fa 01       		.byte	0x1
 886 00fb C9       		.byte	0xc9
 887 00fc 00000000 		.4byte	.LFB3
 888 0100 28000000 		.4byte	.LFE3-.LFB3
 889 0104 01       		.uleb128 0x1
 890 0105 9C       		.byte	0x9c
 891 0106 0A       		.uleb128 0xa
 892 0107 05040000 		.4byte	.LASF41
 893 010b 01       		.byte	0x1
 894 010c 0B01     		.2byte	0x10b
 895 010e 8C000000 		.4byte	0x8c
 896 0112 00000000 		.4byte	.LFB4
 897 0116 08010000 		.4byte	.LFE4-.LFB4
 898 011a 01       		.uleb128 0x1
 899 011b 9C       		.byte	0x9c
 900 011c 93010000 		.4byte	0x193
 901 0120 0B       		.uleb128 0xb
 902 0121 F5020000 		.4byte	.LASF21
 903 0125 01       		.byte	0x1
 904 0126 0B01     		.2byte	0x10b
 905 0128 6B000000 		.4byte	0x6b
 906 012c 00000000 		.4byte	.LLST0
 907 0130 0B       		.uleb128 0xb
 908 0131 77020000 		.4byte	.LASF22
 909 0135 01       		.byte	0x1
 910 0136 0B01     		.2byte	0x10b
 911 0138 93010000 		.4byte	0x193
 912 013c E9000000 		.4byte	.LLST1
 913 0140 0C       		.uleb128 0xc
 914 0141 47000000 		.4byte	.LASF23
 915 0145 01       		.byte	0x1
 916 0146 0D01     		.2byte	0x10d
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 55


 917 0148 6B000000 		.4byte	0x6b
 918 014c 20010000 		.4byte	.LLST2
 919 0150 0C       		.uleb128 0xc
 920 0151 33020000 		.4byte	.LASF24
 921 0155 01       		.byte	0x1
 922 0156 0E01     		.2byte	0x10e
 923 0158 6B000000 		.4byte	0x6b
 924 015c 4A010000 		.4byte	.LLST3
 925 0160 0D       		.uleb128 0xd
 926 0161 0E020000 		.4byte	.LASF25
 927 0165 01       		.byte	0x1
 928 0166 0F01     		.2byte	0x10f
 929 0168 6B000000 		.4byte	0x6b
 930 016c 05       		.uleb128 0x5
 931 016d 03       		.byte	0x3
 932 016e 00000000 		.4byte	compensateRunningStatus.4657
 933 0172 0C       		.uleb128 0xc
 934 0173 6D000000 		.4byte	.LASF26
 935 0177 01       		.byte	0x1
 936 0178 1001     		.2byte	0x110
 937 017a 6B000000 		.4byte	0x6b
 938 017e 7E010000 		.4byte	.LLST4
 939 0182 0C       		.uleb128 0xc
 940 0183 CF030000 		.4byte	.LASF27
 941 0187 01       		.byte	0x1
 942 0188 1101     		.2byte	0x111
 943 018a 8C000000 		.4byte	0x8c
 944 018e 9C010000 		.4byte	.LLST5
 945 0192 00       		.byte	0
 946 0193 06       		.uleb128 0x6
 947 0194 04       		.byte	0x4
 948 0195 6B000000 		.4byte	0x6b
 949 0199 0E       		.uleb128 0xe
 950 019a 00000000 		.4byte	.LASF31
 951 019e 01       		.byte	0x1
 952 019f 7E07     		.2byte	0x77e
 953 01a1 6B000000 		.4byte	0x6b
 954 01a5 00000000 		.4byte	.LFB5
 955 01a9 1C000000 		.4byte	.LFE5-.LFB5
 956 01ad 01       		.uleb128 0x1
 957 01ae 9C       		.byte	0x9c
 958 01af 0F       		.uleb128 0xf
 959 01b0 E7010000 		.4byte	.LASF28
 960 01b4 01       		.byte	0x1
 961 01b5 9107     		.2byte	0x791
 962 01b7 00000000 		.4byte	.LFB6
 963 01bb 0C000000 		.4byte	.LFE6-.LFB6
 964 01bf 01       		.uleb128 0x1
 965 01c0 9C       		.byte	0x9c
 966 01c1 0F       		.uleb128 0xf
 967 01c2 BB010000 		.4byte	.LASF29
 968 01c6 01       		.byte	0x1
 969 01c7 A107     		.2byte	0x7a1
 970 01c9 00000000 		.4byte	.LFB7
 971 01cd 10000000 		.4byte	.LFE7-.LFB7
 972 01d1 01       		.uleb128 0x1
 973 01d2 9C       		.byte	0x9c
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 56


 974 01d3 10       		.uleb128 0x10
 975 01d4 28000000 		.4byte	.LASF34
 976 01d8 01       		.byte	0x1
 977 01d9 B107     		.2byte	0x7b1
 978 01db 00000000 		.4byte	.LFB8
 979 01df 18000000 		.4byte	.LFE8-.LFB8
 980 01e3 01       		.uleb128 0x1
 981 01e4 9C       		.byte	0x9c
 982 01e5 FA010000 		.4byte	0x1fa
 983 01e9 0B       		.uleb128 0xb
 984 01ea C2000000 		.4byte	.LASF30
 985 01ee 01       		.byte	0x1
 986 01ef B107     		.2byte	0x7b1
 987 01f1 6B000000 		.4byte	0x6b
 988 01f5 C7010000 		.4byte	.LLST6
 989 01f9 00       		.byte	0
 990 01fa 0E       		.uleb128 0xe
 991 01fb 07030000 		.4byte	.LASF32
 992 01ff 01       		.byte	0x1
 993 0200 C107     		.2byte	0x7c1
 994 0202 6B000000 		.4byte	0x6b
 995 0206 00000000 		.4byte	.LFB9
 996 020a 10000000 		.4byte	.LFE9-.LFB9
 997 020e 01       		.uleb128 0x1
 998 020f 9C       		.byte	0x9c
 999 0210 0E       		.uleb128 0xe
 1000 0211 F6010000 		.4byte	.LASF33
 1001 0215 01       		.byte	0x1
 1002 0216 D007     		.2byte	0x7d0
 1003 0218 6B000000 		.4byte	0x6b
 1004 021c 00000000 		.4byte	.LFB10
 1005 0220 0C000000 		.4byte	.LFE10-.LFB10
 1006 0224 01       		.uleb128 0x1
 1007 0225 9C       		.byte	0x9c
 1008 0226 10       		.uleb128 0x10
 1009 0227 A6030000 		.4byte	.LASF35
 1010 022b 01       		.byte	0x1
 1011 022c E407     		.2byte	0x7e4
 1012 022e 00000000 		.4byte	.LFB11
 1013 0232 20000000 		.4byte	.LFE11-.LFB11
 1014 0236 01       		.uleb128 0x1
 1015 0237 9C       		.byte	0x9c
 1016 0238 4D020000 		.4byte	0x24d
 1017 023c 0B       		.uleb128 0xb
 1018 023d F8000000 		.4byte	.LASF36
 1019 0241 01       		.byte	0x1
 1020 0242 E407     		.2byte	0x7e4
 1021 0244 6B000000 		.4byte	0x6b
 1022 0248 F3010000 		.4byte	.LLST7
 1023 024c 00       		.byte	0
 1024 024d 0E       		.uleb128 0xe
 1025 024e D1020000 		.4byte	.LASF37
 1026 0252 01       		.byte	0x1
 1027 0253 F607     		.2byte	0x7f6
 1028 0255 6B000000 		.4byte	0x6b
 1029 0259 00000000 		.4byte	.LFB12
 1030 025d 10000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 57


 1031 0261 01       		.uleb128 0x1
 1032 0262 9C       		.byte	0x9c
 1033 0263 0F       		.uleb128 0xf
 1034 0264 86000000 		.4byte	.LASF38
 1035 0268 01       		.byte	0x1
 1036 0269 0708     		.2byte	0x807
 1037 026b 00000000 		.4byte	.LFB13
 1038 026f 10000000 		.4byte	.LFE13-.LFB13
 1039 0273 01       		.uleb128 0x1
 1040 0274 9C       		.byte	0x9c
 1041 0275 0F       		.uleb128 0xf
 1042 0276 A6020000 		.4byte	.LASF39
 1043 027a 01       		.byte	0x1
 1044 027b 1608     		.2byte	0x816
 1045 027d 00000000 		.4byte	.LFB14
 1046 0281 10000000 		.4byte	.LFE14-.LFB14
 1047 0285 01       		.uleb128 0x1
 1048 0286 9C       		.byte	0x9c
 1049 0287 0F       		.uleb128 0xf
 1050 0288 5F020000 		.4byte	.LASF40
 1051 028c 01       		.byte	0x1
 1052 028d 2508     		.2byte	0x825
 1053 028f 00000000 		.4byte	.LFB15
 1054 0293 10000000 		.4byte	.LFE15-.LFB15
 1055 0297 01       		.uleb128 0x1
 1056 0298 9C       		.byte	0x9c
 1057 0299 11       		.uleb128 0x11
 1058 029a 89020000 		.4byte	.LASF42
 1059 029e 01       		.byte	0x1
 1060 029f 3708     		.2byte	0x837
 1061 02a1 B0000000 		.4byte	0xb0
 1062 02a5 00000000 		.4byte	.LFB16
 1063 02a9 10000000 		.4byte	.LFE16-.LFB16
 1064 02ad 01       		.uleb128 0x1
 1065 02ae 9C       		.byte	0x9c
 1066 02af D4020000 		.4byte	0x2d4
 1067 02b3 0B       		.uleb128 0xb
 1068 02b4 3E040000 		.4byte	.LASF43
 1069 02b8 01       		.byte	0x1
 1070 02b9 3708     		.2byte	0x837
 1071 02bb B0000000 		.4byte	0xb0
 1072 02bf 1F020000 		.4byte	.LLST8
 1073 02c3 0C       		.uleb128 0xc
 1074 02c4 79000000 		.4byte	.LASF44
 1075 02c8 01       		.byte	0x1
 1076 02c9 3908     		.2byte	0x839
 1077 02cb B0000000 		.4byte	0xb0
 1078 02cf 41020000 		.4byte	.LLST9
 1079 02d3 00       		.byte	0
 1080 02d4 0E       		.uleb128 0xe
 1081 02d5 E8030000 		.4byte	.LASF45
 1082 02d9 01       		.byte	0x1
 1083 02da 4C08     		.2byte	0x84c
 1084 02dc B0000000 		.4byte	0xb0
 1085 02e0 00000000 		.4byte	.LFB17
 1086 02e4 0C000000 		.4byte	.LFE17-.LFB17
 1087 02e8 01       		.uleb128 0x1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 58


 1088 02e9 9C       		.byte	0x9c
 1089 02ea 12       		.uleb128 0x12
 1090 02eb C5020000 		.4byte	.LASF46
 1091 02ef 01       		.byte	0x1
 1092 02f0 6408     		.2byte	0x864
 1093 02f2 00000000 		.4byte	.LFB18
 1094 02f6 18000000 		.4byte	.LFE18-.LFB18
 1095 02fa 01       		.uleb128 0x1
 1096 02fb 9C       		.byte	0x9c
 1097 02fc 0A030000 		.4byte	0x30a
 1098 0300 13       		.uleb128 0x13
 1099 0301 10000000 		.4byte	.LVL45
 1100 0305 63020000 		.4byte	0x263
 1101 0309 00       		.byte	0
 1102 030a 14       		.uleb128 0x14
 1103 030b 9D000000 		.4byte	.LASF47
 1104 030f 01       		.byte	0x1
 1105 0310 46       		.byte	0x46
 1106 0311 B0000000 		.4byte	0xb0
 1107 0315 05       		.uleb128 0x5
 1108 0316 03       		.byte	0x3
 1109 0317 04000000 		.4byte	cySysWdtCallback
 1110 031b 15       		.uleb128 0x15
 1111 031c 39000000 		.4byte	.LASF51
 1112 0320 04       		.byte	0x4
 1113 0321 D2       		.byte	0xd2
 1114 0322 6B000000 		.4byte	0x6b
 1115 0326 00       		.byte	0
 1116              		.section	.debug_abbrev,"",%progbits
 1117              	.Ldebug_abbrev0:
 1118 0000 01       		.uleb128 0x1
 1119 0001 11       		.uleb128 0x11
 1120 0002 01       		.byte	0x1
 1121 0003 25       		.uleb128 0x25
 1122 0004 0E       		.uleb128 0xe
 1123 0005 13       		.uleb128 0x13
 1124 0006 0B       		.uleb128 0xb
 1125 0007 03       		.uleb128 0x3
 1126 0008 0E       		.uleb128 0xe
 1127 0009 1B       		.uleb128 0x1b
 1128 000a 0E       		.uleb128 0xe
 1129 000b 55       		.uleb128 0x55
 1130 000c 17       		.uleb128 0x17
 1131 000d 11       		.uleb128 0x11
 1132 000e 01       		.uleb128 0x1
 1133 000f 10       		.uleb128 0x10
 1134 0010 17       		.uleb128 0x17
 1135 0011 00       		.byte	0
 1136 0012 00       		.byte	0
 1137 0013 02       		.uleb128 0x2
 1138 0014 24       		.uleb128 0x24
 1139 0015 00       		.byte	0
 1140 0016 0B       		.uleb128 0xb
 1141 0017 0B       		.uleb128 0xb
 1142 0018 3E       		.uleb128 0x3e
 1143 0019 0B       		.uleb128 0xb
 1144 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 59


 1145 001b 0E       		.uleb128 0xe
 1146 001c 00       		.byte	0
 1147 001d 00       		.byte	0
 1148 001e 03       		.uleb128 0x3
 1149 001f 24       		.uleb128 0x24
 1150 0020 00       		.byte	0
 1151 0021 0B       		.uleb128 0xb
 1152 0022 0B       		.uleb128 0xb
 1153 0023 3E       		.uleb128 0x3e
 1154 0024 0B       		.uleb128 0xb
 1155 0025 03       		.uleb128 0x3
 1156 0026 08       		.uleb128 0x8
 1157 0027 00       		.byte	0
 1158 0028 00       		.byte	0
 1159 0029 04       		.uleb128 0x4
 1160 002a 16       		.uleb128 0x16
 1161 002b 00       		.byte	0
 1162 002c 03       		.uleb128 0x3
 1163 002d 0E       		.uleb128 0xe
 1164 002e 3A       		.uleb128 0x3a
 1165 002f 0B       		.uleb128 0xb
 1166 0030 3B       		.uleb128 0x3b
 1167 0031 05       		.uleb128 0x5
 1168 0032 49       		.uleb128 0x49
 1169 0033 13       		.uleb128 0x13
 1170 0034 00       		.byte	0
 1171 0035 00       		.byte	0
 1172 0036 05       		.uleb128 0x5
 1173 0037 35       		.uleb128 0x35
 1174 0038 00       		.byte	0
 1175 0039 49       		.uleb128 0x49
 1176 003a 13       		.uleb128 0x13
 1177 003b 00       		.byte	0
 1178 003c 00       		.byte	0
 1179 003d 06       		.uleb128 0x6
 1180 003e 0F       		.uleb128 0xf
 1181 003f 00       		.byte	0
 1182 0040 0B       		.uleb128 0xb
 1183 0041 0B       		.uleb128 0xb
 1184 0042 49       		.uleb128 0x49
 1185 0043 13       		.uleb128 0x13
 1186 0044 00       		.byte	0
 1187 0045 00       		.byte	0
 1188 0046 07       		.uleb128 0x7
 1189 0047 15       		.uleb128 0x15
 1190 0048 00       		.byte	0
 1191 0049 27       		.uleb128 0x27
 1192 004a 19       		.uleb128 0x19
 1193 004b 00       		.byte	0
 1194 004c 00       		.byte	0
 1195 004d 08       		.uleb128 0x8
 1196 004e 16       		.uleb128 0x16
 1197 004f 00       		.byte	0
 1198 0050 03       		.uleb128 0x3
 1199 0051 0E       		.uleb128 0xe
 1200 0052 3A       		.uleb128 0x3a
 1201 0053 0B       		.uleb128 0xb
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 60


 1202 0054 3B       		.uleb128 0x3b
 1203 0055 0B       		.uleb128 0xb
 1204 0056 49       		.uleb128 0x49
 1205 0057 13       		.uleb128 0x13
 1206 0058 00       		.byte	0
 1207 0059 00       		.byte	0
 1208 005a 09       		.uleb128 0x9
 1209 005b 2E       		.uleb128 0x2e
 1210 005c 00       		.byte	0
 1211 005d 3F       		.uleb128 0x3f
 1212 005e 19       		.uleb128 0x19
 1213 005f 03       		.uleb128 0x3
 1214 0060 0E       		.uleb128 0xe
 1215 0061 3A       		.uleb128 0x3a
 1216 0062 0B       		.uleb128 0xb
 1217 0063 3B       		.uleb128 0x3b
 1218 0064 0B       		.uleb128 0xb
 1219 0065 27       		.uleb128 0x27
 1220 0066 19       		.uleb128 0x19
 1221 0067 11       		.uleb128 0x11
 1222 0068 01       		.uleb128 0x1
 1223 0069 12       		.uleb128 0x12
 1224 006a 06       		.uleb128 0x6
 1225 006b 40       		.uleb128 0x40
 1226 006c 18       		.uleb128 0x18
 1227 006d 9742     		.uleb128 0x2117
 1228 006f 19       		.uleb128 0x19
 1229 0070 00       		.byte	0
 1230 0071 00       		.byte	0
 1231 0072 0A       		.uleb128 0xa
 1232 0073 2E       		.uleb128 0x2e
 1233 0074 01       		.byte	0x1
 1234 0075 3F       		.uleb128 0x3f
 1235 0076 19       		.uleb128 0x19
 1236 0077 03       		.uleb128 0x3
 1237 0078 0E       		.uleb128 0xe
 1238 0079 3A       		.uleb128 0x3a
 1239 007a 0B       		.uleb128 0xb
 1240 007b 3B       		.uleb128 0x3b
 1241 007c 05       		.uleb128 0x5
 1242 007d 27       		.uleb128 0x27
 1243 007e 19       		.uleb128 0x19
 1244 007f 49       		.uleb128 0x49
 1245 0080 13       		.uleb128 0x13
 1246 0081 11       		.uleb128 0x11
 1247 0082 01       		.uleb128 0x1
 1248 0083 12       		.uleb128 0x12
 1249 0084 06       		.uleb128 0x6
 1250 0085 40       		.uleb128 0x40
 1251 0086 18       		.uleb128 0x18
 1252 0087 9642     		.uleb128 0x2116
 1253 0089 19       		.uleb128 0x19
 1254 008a 01       		.uleb128 0x1
 1255 008b 13       		.uleb128 0x13
 1256 008c 00       		.byte	0
 1257 008d 00       		.byte	0
 1258 008e 0B       		.uleb128 0xb
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 61


 1259 008f 05       		.uleb128 0x5
 1260 0090 00       		.byte	0
 1261 0091 03       		.uleb128 0x3
 1262 0092 0E       		.uleb128 0xe
 1263 0093 3A       		.uleb128 0x3a
 1264 0094 0B       		.uleb128 0xb
 1265 0095 3B       		.uleb128 0x3b
 1266 0096 05       		.uleb128 0x5
 1267 0097 49       		.uleb128 0x49
 1268 0098 13       		.uleb128 0x13
 1269 0099 02       		.uleb128 0x2
 1270 009a 17       		.uleb128 0x17
 1271 009b 00       		.byte	0
 1272 009c 00       		.byte	0
 1273 009d 0C       		.uleb128 0xc
 1274 009e 34       		.uleb128 0x34
 1275 009f 00       		.byte	0
 1276 00a0 03       		.uleb128 0x3
 1277 00a1 0E       		.uleb128 0xe
 1278 00a2 3A       		.uleb128 0x3a
 1279 00a3 0B       		.uleb128 0xb
 1280 00a4 3B       		.uleb128 0x3b
 1281 00a5 05       		.uleb128 0x5
 1282 00a6 49       		.uleb128 0x49
 1283 00a7 13       		.uleb128 0x13
 1284 00a8 02       		.uleb128 0x2
 1285 00a9 17       		.uleb128 0x17
 1286 00aa 00       		.byte	0
 1287 00ab 00       		.byte	0
 1288 00ac 0D       		.uleb128 0xd
 1289 00ad 34       		.uleb128 0x34
 1290 00ae 00       		.byte	0
 1291 00af 03       		.uleb128 0x3
 1292 00b0 0E       		.uleb128 0xe
 1293 00b1 3A       		.uleb128 0x3a
 1294 00b2 0B       		.uleb128 0xb
 1295 00b3 3B       		.uleb128 0x3b
 1296 00b4 05       		.uleb128 0x5
 1297 00b5 49       		.uleb128 0x49
 1298 00b6 13       		.uleb128 0x13
 1299 00b7 02       		.uleb128 0x2
 1300 00b8 18       		.uleb128 0x18
 1301 00b9 00       		.byte	0
 1302 00ba 00       		.byte	0
 1303 00bb 0E       		.uleb128 0xe
 1304 00bc 2E       		.uleb128 0x2e
 1305 00bd 00       		.byte	0
 1306 00be 3F       		.uleb128 0x3f
 1307 00bf 19       		.uleb128 0x19
 1308 00c0 03       		.uleb128 0x3
 1309 00c1 0E       		.uleb128 0xe
 1310 00c2 3A       		.uleb128 0x3a
 1311 00c3 0B       		.uleb128 0xb
 1312 00c4 3B       		.uleb128 0x3b
 1313 00c5 05       		.uleb128 0x5
 1314 00c6 27       		.uleb128 0x27
 1315 00c7 19       		.uleb128 0x19
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 62


 1316 00c8 49       		.uleb128 0x49
 1317 00c9 13       		.uleb128 0x13
 1318 00ca 11       		.uleb128 0x11
 1319 00cb 01       		.uleb128 0x1
 1320 00cc 12       		.uleb128 0x12
 1321 00cd 06       		.uleb128 0x6
 1322 00ce 40       		.uleb128 0x40
 1323 00cf 18       		.uleb128 0x18
 1324 00d0 9742     		.uleb128 0x2117
 1325 00d2 19       		.uleb128 0x19
 1326 00d3 00       		.byte	0
 1327 00d4 00       		.byte	0
 1328 00d5 0F       		.uleb128 0xf
 1329 00d6 2E       		.uleb128 0x2e
 1330 00d7 00       		.byte	0
 1331 00d8 3F       		.uleb128 0x3f
 1332 00d9 19       		.uleb128 0x19
 1333 00da 03       		.uleb128 0x3
 1334 00db 0E       		.uleb128 0xe
 1335 00dc 3A       		.uleb128 0x3a
 1336 00dd 0B       		.uleb128 0xb
 1337 00de 3B       		.uleb128 0x3b
 1338 00df 05       		.uleb128 0x5
 1339 00e0 27       		.uleb128 0x27
 1340 00e1 19       		.uleb128 0x19
 1341 00e2 11       		.uleb128 0x11
 1342 00e3 01       		.uleb128 0x1
 1343 00e4 12       		.uleb128 0x12
 1344 00e5 06       		.uleb128 0x6
 1345 00e6 40       		.uleb128 0x40
 1346 00e7 18       		.uleb128 0x18
 1347 00e8 9742     		.uleb128 0x2117
 1348 00ea 19       		.uleb128 0x19
 1349 00eb 00       		.byte	0
 1350 00ec 00       		.byte	0
 1351 00ed 10       		.uleb128 0x10
 1352 00ee 2E       		.uleb128 0x2e
 1353 00ef 01       		.byte	0x1
 1354 00f0 3F       		.uleb128 0x3f
 1355 00f1 19       		.uleb128 0x19
 1356 00f2 03       		.uleb128 0x3
 1357 00f3 0E       		.uleb128 0xe
 1358 00f4 3A       		.uleb128 0x3a
 1359 00f5 0B       		.uleb128 0xb
 1360 00f6 3B       		.uleb128 0x3b
 1361 00f7 05       		.uleb128 0x5
 1362 00f8 27       		.uleb128 0x27
 1363 00f9 19       		.uleb128 0x19
 1364 00fa 11       		.uleb128 0x11
 1365 00fb 01       		.uleb128 0x1
 1366 00fc 12       		.uleb128 0x12
 1367 00fd 06       		.uleb128 0x6
 1368 00fe 40       		.uleb128 0x40
 1369 00ff 18       		.uleb128 0x18
 1370 0100 9742     		.uleb128 0x2117
 1371 0102 19       		.uleb128 0x19
 1372 0103 01       		.uleb128 0x1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 63


 1373 0104 13       		.uleb128 0x13
 1374 0105 00       		.byte	0
 1375 0106 00       		.byte	0
 1376 0107 11       		.uleb128 0x11
 1377 0108 2E       		.uleb128 0x2e
 1378 0109 01       		.byte	0x1
 1379 010a 3F       		.uleb128 0x3f
 1380 010b 19       		.uleb128 0x19
 1381 010c 03       		.uleb128 0x3
 1382 010d 0E       		.uleb128 0xe
 1383 010e 3A       		.uleb128 0x3a
 1384 010f 0B       		.uleb128 0xb
 1385 0110 3B       		.uleb128 0x3b
 1386 0111 05       		.uleb128 0x5
 1387 0112 27       		.uleb128 0x27
 1388 0113 19       		.uleb128 0x19
 1389 0114 49       		.uleb128 0x49
 1390 0115 13       		.uleb128 0x13
 1391 0116 11       		.uleb128 0x11
 1392 0117 01       		.uleb128 0x1
 1393 0118 12       		.uleb128 0x12
 1394 0119 06       		.uleb128 0x6
 1395 011a 40       		.uleb128 0x40
 1396 011b 18       		.uleb128 0x18
 1397 011c 9742     		.uleb128 0x2117
 1398 011e 19       		.uleb128 0x19
 1399 011f 01       		.uleb128 0x1
 1400 0120 13       		.uleb128 0x13
 1401 0121 00       		.byte	0
 1402 0122 00       		.byte	0
 1403 0123 12       		.uleb128 0x12
 1404 0124 2E       		.uleb128 0x2e
 1405 0125 01       		.byte	0x1
 1406 0126 3F       		.uleb128 0x3f
 1407 0127 19       		.uleb128 0x19
 1408 0128 03       		.uleb128 0x3
 1409 0129 0E       		.uleb128 0xe
 1410 012a 3A       		.uleb128 0x3a
 1411 012b 0B       		.uleb128 0xb
 1412 012c 3B       		.uleb128 0x3b
 1413 012d 05       		.uleb128 0x5
 1414 012e 27       		.uleb128 0x27
 1415 012f 19       		.uleb128 0x19
 1416 0130 11       		.uleb128 0x11
 1417 0131 01       		.uleb128 0x1
 1418 0132 12       		.uleb128 0x12
 1419 0133 06       		.uleb128 0x6
 1420 0134 40       		.uleb128 0x40
 1421 0135 18       		.uleb128 0x18
 1422 0136 9642     		.uleb128 0x2116
 1423 0138 19       		.uleb128 0x19
 1424 0139 01       		.uleb128 0x1
 1425 013a 13       		.uleb128 0x13
 1426 013b 00       		.byte	0
 1427 013c 00       		.byte	0
 1428 013d 13       		.uleb128 0x13
 1429 013e 898201   		.uleb128 0x4109
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 64


 1430 0141 00       		.byte	0
 1431 0142 11       		.uleb128 0x11
 1432 0143 01       		.uleb128 0x1
 1433 0144 31       		.uleb128 0x31
 1434 0145 13       		.uleb128 0x13
 1435 0146 00       		.byte	0
 1436 0147 00       		.byte	0
 1437 0148 14       		.uleb128 0x14
 1438 0149 34       		.uleb128 0x34
 1439 014a 00       		.byte	0
 1440 014b 03       		.uleb128 0x3
 1441 014c 0E       		.uleb128 0xe
 1442 014d 3A       		.uleb128 0x3a
 1443 014e 0B       		.uleb128 0xb
 1444 014f 3B       		.uleb128 0x3b
 1445 0150 0B       		.uleb128 0xb
 1446 0151 49       		.uleb128 0x49
 1447 0152 13       		.uleb128 0x13
 1448 0153 02       		.uleb128 0x2
 1449 0154 18       		.uleb128 0x18
 1450 0155 00       		.byte	0
 1451 0156 00       		.byte	0
 1452 0157 15       		.uleb128 0x15
 1453 0158 34       		.uleb128 0x34
 1454 0159 00       		.byte	0
 1455 015a 03       		.uleb128 0x3
 1456 015b 0E       		.uleb128 0xe
 1457 015c 3A       		.uleb128 0x3a
 1458 015d 0B       		.uleb128 0xb
 1459 015e 3B       		.uleb128 0x3b
 1460 015f 0B       		.uleb128 0xb
 1461 0160 49       		.uleb128 0x49
 1462 0161 13       		.uleb128 0x13
 1463 0162 3F       		.uleb128 0x3f
 1464 0163 19       		.uleb128 0x19
 1465 0164 3C       		.uleb128 0x3c
 1466 0165 19       		.uleb128 0x19
 1467 0166 00       		.byte	0
 1468 0167 00       		.byte	0
 1469 0168 00       		.byte	0
 1470              		.section	.debug_loc,"",%progbits
 1471              	.Ldebug_loc0:
 1472              	.LLST0:
 1473 0000 00000000 		.4byte	.LVL0
 1474 0004 48000000 		.4byte	.LVL3
 1475 0008 0100     		.2byte	0x1
 1476 000a 50       		.byte	0x50
 1477 000b 48000000 		.4byte	.LVL3
 1478 000f A4000000 		.4byte	.LVL18
 1479 0013 0400     		.2byte	0x4
 1480 0015 F3       		.byte	0xf3
 1481 0016 01       		.uleb128 0x1
 1482 0017 50       		.byte	0x50
 1483 0018 9F       		.byte	0x9f
 1484 0019 A4000000 		.4byte	.LVL18
 1485 001d B6000000 		.4byte	.LVL20
 1486 0021 0100     		.2byte	0x1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 65


 1487 0023 50       		.byte	0x50
 1488 0024 B6000000 		.4byte	.LVL20
 1489 0028 B8000000 		.4byte	.LVL21
 1490 002c 0400     		.2byte	0x4
 1491 002e F3       		.byte	0xf3
 1492 002f 01       		.uleb128 0x1
 1493 0030 50       		.byte	0x50
 1494 0031 9F       		.byte	0x9f
 1495 0032 B8000000 		.4byte	.LVL21
 1496 0036 BA000000 		.4byte	.LVL22
 1497 003a 0100     		.2byte	0x1
 1498 003c 50       		.byte	0x50
 1499 003d BA000000 		.4byte	.LVL22
 1500 0041 BC000000 		.4byte	.LVL23
 1501 0045 0400     		.2byte	0x4
 1502 0047 F3       		.byte	0xf3
 1503 0048 01       		.uleb128 0x1
 1504 0049 50       		.byte	0x50
 1505 004a 9F       		.byte	0x9f
 1506 004b BC000000 		.4byte	.LVL23
 1507 004f BE000000 		.4byte	.LVL24
 1508 0053 0100     		.2byte	0x1
 1509 0055 50       		.byte	0x50
 1510 0056 BE000000 		.4byte	.LVL24
 1511 005a C0000000 		.4byte	.LVL25
 1512 005e 0400     		.2byte	0x4
 1513 0060 F3       		.byte	0xf3
 1514 0061 01       		.uleb128 0x1
 1515 0062 50       		.byte	0x50
 1516 0063 9F       		.byte	0x9f
 1517 0064 C0000000 		.4byte	.LVL25
 1518 0068 C2000000 		.4byte	.LVL26
 1519 006c 0100     		.2byte	0x1
 1520 006e 50       		.byte	0x50
 1521 006f C2000000 		.4byte	.LVL26
 1522 0073 C4000000 		.4byte	.LVL27
 1523 0077 0400     		.2byte	0x4
 1524 0079 F3       		.byte	0xf3
 1525 007a 01       		.uleb128 0x1
 1526 007b 50       		.byte	0x50
 1527 007c 9F       		.byte	0x9f
 1528 007d C4000000 		.4byte	.LVL27
 1529 0081 C6000000 		.4byte	.LVL28
 1530 0085 0100     		.2byte	0x1
 1531 0087 50       		.byte	0x50
 1532 0088 C6000000 		.4byte	.LVL28
 1533 008c C8000000 		.4byte	.LVL29
 1534 0090 0400     		.2byte	0x4
 1535 0092 F3       		.byte	0xf3
 1536 0093 01       		.uleb128 0x1
 1537 0094 50       		.byte	0x50
 1538 0095 9F       		.byte	0x9f
 1539 0096 C8000000 		.4byte	.LVL29
 1540 009a CA000000 		.4byte	.LVL30
 1541 009e 0100     		.2byte	0x1
 1542 00a0 50       		.byte	0x50
 1543 00a1 CA000000 		.4byte	.LVL30
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 66


 1544 00a5 CC000000 		.4byte	.LVL31
 1545 00a9 0400     		.2byte	0x4
 1546 00ab F3       		.byte	0xf3
 1547 00ac 01       		.uleb128 0x1
 1548 00ad 50       		.byte	0x50
 1549 00ae 9F       		.byte	0x9f
 1550 00af CC000000 		.4byte	.LVL31
 1551 00b3 CE000000 		.4byte	.LVL32
 1552 00b7 0100     		.2byte	0x1
 1553 00b9 50       		.byte	0x50
 1554 00ba CE000000 		.4byte	.LVL32
 1555 00be D0000000 		.4byte	.LVL33
 1556 00c2 0400     		.2byte	0x4
 1557 00c4 F3       		.byte	0xf3
 1558 00c5 01       		.uleb128 0x1
 1559 00c6 50       		.byte	0x50
 1560 00c7 9F       		.byte	0x9f
 1561 00c8 D0000000 		.4byte	.LVL33
 1562 00cc D2000000 		.4byte	.LVL34
 1563 00d0 0100     		.2byte	0x1
 1564 00d2 50       		.byte	0x50
 1565 00d3 D2000000 		.4byte	.LVL34
 1566 00d7 08010000 		.4byte	.LFE4
 1567 00db 0400     		.2byte	0x4
 1568 00dd F3       		.byte	0xf3
 1569 00de 01       		.uleb128 0x1
 1570 00df 50       		.byte	0x50
 1571 00e0 9F       		.byte	0x9f
 1572 00e1 00000000 		.4byte	0
 1573 00e5 00000000 		.4byte	0
 1574              	.LLST1:
 1575 00e9 00000000 		.4byte	.LVL0
 1576 00ed 50000000 		.4byte	.LVL4
 1577 00f1 0100     		.2byte	0x1
 1578 00f3 51       		.byte	0x51
 1579 00f4 50000000 		.4byte	.LVL4
 1580 00f8 A4000000 		.4byte	.LVL18
 1581 00fc 0100     		.2byte	0x1
 1582 00fe 55       		.byte	0x55
 1583 00ff A4000000 		.4byte	.LVL18
 1584 0103 D2000000 		.4byte	.LVL34
 1585 0107 0100     		.2byte	0x1
 1586 0109 51       		.byte	0x51
 1587 010a D2000000 		.4byte	.LVL34
 1588 010e 08010000 		.4byte	.LFE4
 1589 0112 0400     		.2byte	0x4
 1590 0114 F3       		.byte	0xf3
 1591 0115 01       		.uleb128 0x1
 1592 0116 51       		.byte	0x51
 1593 0117 9F       		.byte	0x9f
 1594 0118 00000000 		.4byte	0
 1595 011c 00000000 		.4byte	0
 1596              	.LLST2:
 1597 0120 80000000 		.4byte	.LVL11
 1598 0124 82000000 		.4byte	.LVL12
 1599 0128 0100     		.2byte	0x1
 1600 012a 50       		.byte	0x50
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 67


 1601 012b 9A000000 		.4byte	.LVL15
 1602 012f 9E000000 		.4byte	.LVL16
 1603 0133 0100     		.2byte	0x1
 1604 0135 50       		.byte	0x50
 1605 0136 9E000000 		.4byte	.LVL16
 1606 013a A4000000 		.4byte	.LVL18
 1607 013e 0200     		.2byte	0x2
 1608 0140 75       		.byte	0x75
 1609 0141 00       		.sleb128 0
 1610 0142 00000000 		.4byte	0
 1611 0146 00000000 		.4byte	0
 1612              	.LLST3:
 1613 014a 56000000 		.4byte	.LVL6
 1614 014e 60000000 		.4byte	.LVL7
 1615 0152 0100     		.2byte	0x1
 1616 0154 50       		.byte	0x50
 1617 0155 60000000 		.4byte	.LVL7
 1618 0159 82000000 		.4byte	.LVL12
 1619 015d 0100     		.2byte	0x1
 1620 015f 54       		.byte	0x54
 1621 0160 82000000 		.4byte	.LVL12
 1622 0164 86000000 		.4byte	.LVL13
 1623 0168 0100     		.2byte	0x1
 1624 016a 50       		.byte	0x50
 1625 016b 86000000 		.4byte	.LVL13
 1626 016f A4000000 		.4byte	.LVL18
 1627 0173 0100     		.2byte	0x1
 1628 0175 54       		.byte	0x54
 1629 0176 00000000 		.4byte	0
 1630 017a 00000000 		.4byte	0
 1631              	.LLST4:
 1632 017e 0A000000 		.4byte	.LVL1
 1633 0182 14000000 		.4byte	.LVL2
 1634 0186 0100     		.2byte	0x1
 1635 0188 53       		.byte	0x53
 1636 0189 B8000000 		.4byte	.LVL21
 1637 018d BC000000 		.4byte	.LVL23
 1638 0191 0100     		.2byte	0x1
 1639 0193 53       		.byte	0x53
 1640 0194 00000000 		.4byte	0
 1641 0198 00000000 		.4byte	0
 1642              	.LLST5:
 1643 019c A2000000 		.4byte	.LVL17
 1644 01a0 A4000000 		.4byte	.LVL18
 1645 01a4 0200     		.2byte	0x2
 1646 01a6 30       		.byte	0x30
 1647 01a7 9F       		.byte	0x9f
 1648 01a8 B4000000 		.4byte	.LVL19
 1649 01ac B8000000 		.4byte	.LVL21
 1650 01b0 0200     		.2byte	0x2
 1651 01b2 37       		.byte	0x37
 1652 01b3 9F       		.byte	0x9f
 1653 01b4 D2000000 		.4byte	.LVL34
 1654 01b8 08010000 		.4byte	.LFE4
 1655 01bc 0100     		.2byte	0x1
 1656 01be 50       		.byte	0x50
 1657 01bf 00000000 		.4byte	0
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 68


 1658 01c3 00000000 		.4byte	0
 1659              	.LLST6:
 1660 01c7 00000000 		.4byte	.LVL35
 1661 01cb 02000000 		.4byte	.LVL36
 1662 01cf 0100     		.2byte	0x1
 1663 01d1 50       		.byte	0x50
 1664 01d2 02000000 		.4byte	.LVL36
 1665 01d6 04000000 		.4byte	.LVL37
 1666 01da 0400     		.2byte	0x4
 1667 01dc F3       		.byte	0xf3
 1668 01dd 01       		.uleb128 0x1
 1669 01de 50       		.byte	0x50
 1670 01df 9F       		.byte	0x9f
 1671 01e0 04000000 		.4byte	.LVL37
 1672 01e4 18000000 		.4byte	.LFE8
 1673 01e8 0100     		.2byte	0x1
 1674 01ea 53       		.byte	0x53
 1675 01eb 00000000 		.4byte	0
 1676 01ef 00000000 		.4byte	0
 1677              	.LLST7:
 1678 01f3 00000000 		.4byte	.LVL38
 1679 01f7 02000000 		.4byte	.LVL39
 1680 01fb 0100     		.2byte	0x1
 1681 01fd 50       		.byte	0x50
 1682 01fe 02000000 		.4byte	.LVL39
 1683 0202 0A000000 		.4byte	.LVL40
 1684 0206 0400     		.2byte	0x4
 1685 0208 F3       		.byte	0xf3
 1686 0209 01       		.uleb128 0x1
 1687 020a 50       		.byte	0x50
 1688 020b 9F       		.byte	0x9f
 1689 020c 0A000000 		.4byte	.LVL40
 1690 0210 20000000 		.4byte	.LFE11
 1691 0214 0100     		.2byte	0x1
 1692 0216 53       		.byte	0x53
 1693 0217 00000000 		.4byte	0
 1694 021b 00000000 		.4byte	0
 1695              	.LLST8:
 1696 021f 00000000 		.4byte	.LVL41
 1697 0223 08000000 		.4byte	.LVL43
 1698 0227 0100     		.2byte	0x1
 1699 0229 50       		.byte	0x50
 1700 022a 08000000 		.4byte	.LVL43
 1701 022e 10000000 		.4byte	.LFE16
 1702 0232 0500     		.2byte	0x5
 1703 0234 03       		.byte	0x3
 1704 0235 04000000 		.4byte	cySysWdtCallback
 1705 0239 00000000 		.4byte	0
 1706 023d 00000000 		.4byte	0
 1707              	.LLST9:
 1708 0241 00000000 		.4byte	.LVL41
 1709 0245 04000000 		.4byte	.LVL42
 1710 0249 0200     		.2byte	0x2
 1711 024b 30       		.byte	0x30
 1712 024c 9F       		.byte	0x9f
 1713 024d 04000000 		.4byte	.LVL42
 1714 0251 10000000 		.4byte	.LFE16
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 69


 1715 0255 0100     		.2byte	0x1
 1716 0257 52       		.byte	0x52
 1717 0258 00000000 		.4byte	0
 1718 025c 00000000 		.4byte	0
 1719              		.section	.debug_aranges,"",%progbits
 1720 0000 AC000000 		.4byte	0xac
 1721 0004 0200     		.2byte	0x2
 1722 0006 00000000 		.4byte	.Ldebug_info0
 1723 000a 04       		.byte	0x4
 1724 000b 00       		.byte	0
 1725 000c 0000     		.2byte	0
 1726 000e 0000     		.2byte	0
 1727 0010 00000000 		.4byte	.LFB0
 1728 0014 14000000 		.4byte	.LFE0-.LFB0
 1729 0018 00000000 		.4byte	.LFB1
 1730 001c 10000000 		.4byte	.LFE1-.LFB1
 1731 0020 00000000 		.4byte	.LFB2
 1732 0024 34000000 		.4byte	.LFE2-.LFB2
 1733 0028 00000000 		.4byte	.LFB3
 1734 002c 28000000 		.4byte	.LFE3-.LFB3
 1735 0030 00000000 		.4byte	.LFB4
 1736 0034 08010000 		.4byte	.LFE4-.LFB4
 1737 0038 00000000 		.4byte	.LFB5
 1738 003c 1C000000 		.4byte	.LFE5-.LFB5
 1739 0040 00000000 		.4byte	.LFB6
 1740 0044 0C000000 		.4byte	.LFE6-.LFB6
 1741 0048 00000000 		.4byte	.LFB7
 1742 004c 10000000 		.4byte	.LFE7-.LFB7
 1743 0050 00000000 		.4byte	.LFB8
 1744 0054 18000000 		.4byte	.LFE8-.LFB8
 1745 0058 00000000 		.4byte	.LFB9
 1746 005c 10000000 		.4byte	.LFE9-.LFB9
 1747 0060 00000000 		.4byte	.LFB10
 1748 0064 0C000000 		.4byte	.LFE10-.LFB10
 1749 0068 00000000 		.4byte	.LFB11
 1750 006c 20000000 		.4byte	.LFE11-.LFB11
 1751 0070 00000000 		.4byte	.LFB12
 1752 0074 10000000 		.4byte	.LFE12-.LFB12
 1753 0078 00000000 		.4byte	.LFB13
 1754 007c 10000000 		.4byte	.LFE13-.LFB13
 1755 0080 00000000 		.4byte	.LFB14
 1756 0084 10000000 		.4byte	.LFE14-.LFB14
 1757 0088 00000000 		.4byte	.LFB15
 1758 008c 10000000 		.4byte	.LFE15-.LFB15
 1759 0090 00000000 		.4byte	.LFB16
 1760 0094 10000000 		.4byte	.LFE16-.LFB16
 1761 0098 00000000 		.4byte	.LFB17
 1762 009c 0C000000 		.4byte	.LFE17-.LFB17
 1763 00a0 00000000 		.4byte	.LFB18
 1764 00a4 18000000 		.4byte	.LFE18-.LFB18
 1765 00a8 00000000 		.4byte	0
 1766 00ac 00000000 		.4byte	0
 1767              		.section	.debug_ranges,"",%progbits
 1768              	.Ldebug_ranges0:
 1769 0000 00000000 		.4byte	.LFB0
 1770 0004 14000000 		.4byte	.LFE0
 1771 0008 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 70


 1772 000c 10000000 		.4byte	.LFE1
 1773 0010 00000000 		.4byte	.LFB2
 1774 0014 34000000 		.4byte	.LFE2
 1775 0018 00000000 		.4byte	.LFB3
 1776 001c 28000000 		.4byte	.LFE3
 1777 0020 00000000 		.4byte	.LFB4
 1778 0024 08010000 		.4byte	.LFE4
 1779 0028 00000000 		.4byte	.LFB5
 1780 002c 1C000000 		.4byte	.LFE5
 1781 0030 00000000 		.4byte	.LFB6
 1782 0034 0C000000 		.4byte	.LFE6
 1783 0038 00000000 		.4byte	.LFB7
 1784 003c 10000000 		.4byte	.LFE7
 1785 0040 00000000 		.4byte	.LFB8
 1786 0044 18000000 		.4byte	.LFE8
 1787 0048 00000000 		.4byte	.LFB9
 1788 004c 10000000 		.4byte	.LFE9
 1789 0050 00000000 		.4byte	.LFB10
 1790 0054 0C000000 		.4byte	.LFE10
 1791 0058 00000000 		.4byte	.LFB11
 1792 005c 20000000 		.4byte	.LFE11
 1793 0060 00000000 		.4byte	.LFB12
 1794 0064 10000000 		.4byte	.LFE12
 1795 0068 00000000 		.4byte	.LFB13
 1796 006c 10000000 		.4byte	.LFE13
 1797 0070 00000000 		.4byte	.LFB14
 1798 0074 10000000 		.4byte	.LFE14
 1799 0078 00000000 		.4byte	.LFB15
 1800 007c 10000000 		.4byte	.LFE15
 1801 0080 00000000 		.4byte	.LFB16
 1802 0084 10000000 		.4byte	.LFE16
 1803 0088 00000000 		.4byte	.LFB17
 1804 008c 0C000000 		.4byte	.LFE17
 1805 0090 00000000 		.4byte	.LFB18
 1806 0094 18000000 		.4byte	.LFE18
 1807 0098 00000000 		.4byte	0
 1808 009c 00000000 		.4byte	0
 1809              		.section	.debug_line,"",%progbits
 1810              	.Ldebug_line0:
 1811 0000 F1010000 		.section	.debug_str,"MS",%progbits,1
 1811      02005E00 
 1811      00000201 
 1811      FB0E0D00 
 1811      01010101 
 1812              	.LASF31:
 1813 0000 43795379 		.ascii	"CySysWdtGetEnabledStatus\000"
 1813      73576474 
 1813      47657445 
 1813      6E61626C 
 1813      65645374 
 1814              	.LASF13:
 1815 0019 63797374 		.ascii	"cystatus\000"
 1815      61747573 
 1815      00
 1816              	.LASF14:
 1817 0022 72656733 		.ascii	"reg32\000"
 1817      3200
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 71


 1818              	.LASF34:
 1819 0028 43795379 		.ascii	"CySysWdtSetMatch\000"
 1819      73576474 
 1819      5365744D 
 1819      61746368 
 1819      00
 1820              	.LASF51:
 1821 0039 63796465 		.ascii	"cydelayFreqHz\000"
 1821      6C617946 
 1821      72657148 
 1821      7A00
 1822              	.LASF23:
 1823 0047 696C6F43 		.ascii	"iloCompensatedCycles\000"
 1823      6F6D7065 
 1823      6E736174 
 1823      65644379 
 1823      636C6573 
 1824              	.LASF17:
 1825 005c 43795379 		.ascii	"CySysClkIloStart\000"
 1825      73436C6B 
 1825      496C6F53 
 1825      74617274 
 1825      00
 1826              	.LASF26:
 1827 006d 63686563 		.ascii	"checkStatus\000"
 1827      6B537461 
 1827      74757300 
 1828              	.LASF44:
 1829 0079 70726576 		.ascii	"prevCallback\000"
 1829      43616C6C 
 1829      6261636B 
 1829      00
 1830              	.LASF38:
 1831 0086 43795379 		.ascii	"CySysWdtClearInterrupt\000"
 1831      73576474 
 1831      436C6561 
 1831      72496E74 
 1831      65727275 
 1832              	.LASF47:
 1833 009d 63795379 		.ascii	"cySysWdtCallback\000"
 1833      73576474 
 1833      43616C6C 
 1833      6261636B 
 1833      00
 1834              	.LASF9:
 1835 00ae 666C6F61 		.ascii	"float\000"
 1835      7400
 1836              	.LASF1:
 1837 00b4 756E7369 		.ascii	"unsigned char\000"
 1837      676E6564 
 1837      20636861 
 1837      7200
 1838              	.LASF30:
 1839 00c2 6D617463 		.ascii	"match\000"
 1839      6800
 1840              	.LASF15:
 1841 00c8 63795764 		.ascii	"cyWdtCallback\000"
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 72


 1841      7443616C 
 1841      6C626163 
 1841      6B00
 1842              	.LASF18:
 1843 00d6 43795379 		.ascii	"CySysClkIloStop\000"
 1843      73436C6B 
 1843      496C6F53 
 1843      746F7000 
 1844              	.LASF5:
 1845 00e6 6C6F6E67 		.ascii	"long unsigned int\000"
 1845      20756E73 
 1845      69676E65 
 1845      6420696E 
 1845      7400
 1846              	.LASF36:
 1847 00f8 62697473 		.ascii	"bitsNum\000"
 1847      4E756D00 
 1848              	.LASF3:
 1849 0100 73686F72 		.ascii	"short unsigned int\000"
 1849      7420756E 
 1849      7369676E 
 1849      65642069 
 1849      6E7400
 1850              	.LASF50:
 1851 0113 433A5C55 		.ascii	"C:\\Users\\Spitfire54444444\\Dropbox\\Projets\\Wave"
 1851      73657273 
 1851      5C537069 
 1851      74666972 
 1851      65353434 
 1852 0141 6C616220 		.ascii	"lab Technologies Inc\\RnD\\Projets\\Auto Shut-OFF\\"
 1852      54656368 
 1852      6E6F6C6F 
 1852      67696573 
 1852      20496E63 
 1853 0170 4175746F 		.ascii	"Auto-Shut-OFF\\Auto Shut-OFF_SOIC16.cydsn\000"
 1853      2D536875 
 1853      742D4F46 
 1853      465C4175 
 1853      746F2053 
 1854              	.LASF20:
 1855 0199 43795379 		.ascii	"CySysClkIloStopMeasurement\000"
 1855      73436C6B 
 1855      496C6F53 
 1855      746F704D 
 1855      65617375 
 1856              	.LASF10:
 1857 01b4 646F7562 		.ascii	"double\000"
 1857      6C6500
 1858              	.LASF29:
 1859 01bb 43795379 		.ascii	"CySysWdtDisable\000"
 1859      73576474 
 1859      44697361 
 1859      626C6500 
 1860              	.LASF19:
 1861 01cb 43795379 		.ascii	"CySysClkIloStartMeasurement\000"
 1861      73436C6B 
 1861      496C6F53 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 73


 1861      74617274 
 1861      4D656173 
 1862              	.LASF28:
 1863 01e7 43795379 		.ascii	"CySysWdtEnable\000"
 1863      73576474 
 1863      456E6162 
 1863      6C6500
 1864              	.LASF33:
 1865 01f6 43795379 		.ascii	"CySysWdtGetCount\000"
 1865      73576474 
 1865      47657443 
 1865      6F756E74 
 1865      00
 1866              	.LASF12:
 1867 0207 75696E74 		.ascii	"uint32\000"
 1867      333200
 1868              	.LASF25:
 1869 020e 636F6D70 		.ascii	"compensateRunningStatus\000"
 1869      656E7361 
 1869      74655275 
 1869      6E6E696E 
 1869      67537461 
 1870              	.LASF8:
 1871 0226 756E7369 		.ascii	"unsigned int\000"
 1871      676E6564 
 1871      20696E74 
 1871      00
 1872              	.LASF24:
 1873 0233 64657369 		.ascii	"desiredDelayInCounts\000"
 1873      72656444 
 1873      656C6179 
 1873      496E436F 
 1873      756E7473 
 1874              	.LASF7:
 1875 0248 6C6F6E67 		.ascii	"long long unsigned int\000"
 1875      206C6F6E 
 1875      6720756E 
 1875      7369676E 
 1875      65642069 
 1876              	.LASF40:
 1877 025f 43795379 		.ascii	"CySysWdtUnmaskInterrupt\000"
 1877      73576474 
 1877      556E6D61 
 1877      736B496E 
 1877      74657272 
 1878              	.LASF22:
 1879 0277 636F6D70 		.ascii	"compensatedCycles\000"
 1879      656E7361 
 1879      74656443 
 1879      79636C65 
 1879      7300
 1880              	.LASF42:
 1881 0289 43795379 		.ascii	"CySysWdtSetInterruptCallback\000"
 1881      73576474 
 1881      53657449 
 1881      6E746572 
 1881      72757074 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 74


 1882              	.LASF39:
 1883 02a6 43795379 		.ascii	"CySysWdtMaskInterrupt\000"
 1883      73576474 
 1883      4D61736B 
 1883      496E7465 
 1883      72727570 
 1884              	.LASF16:
 1885 02bc 73697A65 		.ascii	"sizetype\000"
 1885      74797065 
 1885      00
 1886              	.LASF46:
 1887 02c5 43795379 		.ascii	"CySysWdtIsr\000"
 1887      73576474 
 1887      49737200 
 1888              	.LASF37:
 1889 02d1 43795379 		.ascii	"CySysWdtGetIgnoreBits\000"
 1889      73576474 
 1889      47657449 
 1889      676E6F72 
 1889      65426974 
 1890              	.LASF6:
 1891 02e7 6C6F6E67 		.ascii	"long long int\000"
 1891      206C6F6E 
 1891      6720696E 
 1891      7400
 1892              	.LASF21:
 1893 02f5 64657369 		.ascii	"desiredDelay\000"
 1893      72656444 
 1893      656C6179 
 1893      00
 1894              	.LASF11:
 1895 0302 63686172 		.ascii	"char\000"
 1895      00
 1896              	.LASF32:
 1897 0307 43795379 		.ascii	"CySysWdtGetMatch\000"
 1897      73576474 
 1897      4765744D 
 1897      61746368 
 1897      00
 1898              	.LASF48:
 1899 0318 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1899      4320342E 
 1899      392E3320 
 1899      32303135 
 1899      30333033 
 1900 034b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1900      20726576 
 1900      6973696F 
 1900      6E203232 
 1900      31323230 
 1901 037e 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1901      66756E63 
 1901      74696F6E 
 1901      2D736563 
 1901      74696F6E 
 1902              	.LASF35:
 1903 03a6 43795379 		.ascii	"CySysWdtSetIgnoreBits\000"
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccGuhd9d.s 			page 75


 1903      73576474 
 1903      53657449 
 1903      676E6F72 
 1903      65426974 
 1904              	.LASF2:
 1905 03bc 73686F72 		.ascii	"short int\000"
 1905      7420696E 
 1905      7400
 1906              	.LASF4:
 1907 03c6 6C6F6E67 		.ascii	"long int\000"
 1907      20696E74 
 1907      00
 1908              	.LASF27:
 1909 03cf 72657475 		.ascii	"returnStatus\000"
 1909      726E5374 
 1909      61747573 
 1909      00
 1910              	.LASF0:
 1911 03dc 7369676E 		.ascii	"signed char\000"
 1911      65642063 
 1911      68617200 
 1912              	.LASF45:
 1913 03e8 43795379 		.ascii	"CySysWdtGetInterruptCallback\000"
 1913      73576474 
 1913      47657449 
 1913      6E746572 
 1913      72757074 
 1914              	.LASF41:
 1915 0405 43795379 		.ascii	"CySysClkIloCompensate\000"
 1915      73436C6B 
 1915      496C6F43 
 1915      6F6D7065 
 1915      6E736174 
 1916              	.LASF49:
 1917 041b 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\CyLFClk.c\000"
 1917      6E657261 
 1917      7465645F 
 1917      536F7572 
 1917      63655C50 
 1918              	.LASF43:
 1919 043e 66756E63 		.ascii	"function\000"
 1919      74696F6E 
 1919      00
 1920              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
