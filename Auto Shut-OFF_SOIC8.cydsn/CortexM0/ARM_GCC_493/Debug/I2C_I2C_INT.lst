ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"I2C_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_I2C_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	I2C_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	I2C_I2C_ISR, %function
  23              	I2C_I2C_ISR:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\I2C_I2C_INT.c"
   1:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * File Name: I2C_I2C_INT.c
   3:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Version 3.0
   4:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
   5:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Description:
   6:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
   9:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Note:
  10:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  11:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  18:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "I2C_PVT.h"
  19:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "I2C_I2C_PVT.h"
  20:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "cyapicallbacks.h"
  21:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  22:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  23:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** /*******************************************************************************
  24:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Function Name: I2C_I2C_ISR
  25:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** ********************************************************************************
  26:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  27:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Summary:
  28:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  30:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Parameters:
  31:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  None
  32:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 2


  33:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Return:
  34:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  None
  35:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  36:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *******************************************************************************/
  37:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** CY_ISR(I2C_I2C_ISR)
  38:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** {
  26              		.loc 1 38 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  32              	.LVL0:
  39:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 diffCount;
  40:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 endTransfer;
  41:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  42:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #ifdef I2C_I2C_ISR_ENTRY_CALLBACK
  43:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     I2C_I2C_ISR_EntryCallback();
  44:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* I2C_I2C_ISR_ENTRY_CALLBACK */
  45:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     
  46:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  47:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 response;
  48:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  49:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     response = I2C_I2C_ACK_ADDR;
  50:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  51:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  52:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  53:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  54:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* Calls customer routine if registered */
  55:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(NULL != I2C_customIntrHandler)
  33              		.loc 1 55 0
  34 0002 CE4B     		ldr	r3, .L37
  35 0004 1B68     		ldr	r3, [r3]
  36 0006 002B     		cmp	r3, #0
  37 0008 00D0     		beq	.L2
  56:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  57:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_customIntrHandler();
  38              		.loc 1 57 0
  39 000a 9847     		blx	r3
  40              	.LVL1:
  41              	.L2:
  58:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
  59:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  60:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_INTR_I2C_EC_MASKED(I2C_INTR_I2C_EC_WAKE_UP))
  42              		.loc 1 60 0
  43 000c CC4B     		ldr	r3, .L37+4
  44 000e 1B68     		ldr	r3, [r3]
  45 0010 DB07     		lsl	r3, r3, #31
  46 0012 02D5     		bpl	.L3
  61:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  62:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         /* Mask-off after wakeup */
  63:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetI2CExtClkInterruptMode(I2C_NO_INTR_SOURCES);
  47              		.loc 1 63 0
  48 0014 0022     		mov	r2, #0
  49 0016 CB4B     		ldr	r3, .L37+8
  50 0018 1A60     		str	r2, [r3]
  51              	.L3:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 3


  64:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
  65:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  66:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* Master and Slave error tracking:
  67:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  68:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  69:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  70:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  71:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
  72:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_I2C_FSM_MASTER)
  52              		.loc 1 72 0
  53 001a CB4B     		ldr	r3, .L37+12
  54 001c 1B78     		ldrb	r3, [r3]
  55 001e 9B06     		lsl	r3, r3, #26
  56 0020 1FD4     		bmi	.L4
  73:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  74:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_MASTER)
  75:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
  76:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  77:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  78:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  79:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
  80:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_BUS_ERROR))
  81:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  82:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
  83:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_I2C_MSTAT_ERR_BUS_ERROR);
  84:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  85:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
  86:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
  87:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  88:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  89:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  90:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  91:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  92:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
  93:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_ARB_LOST))
  94:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  95:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
  96:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_I2C_MSTAT_ERR_ARB_LOST);
  97:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  98:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
  99:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 100:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 101:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #if(I2C_I2C_MULTI_MASTER_SLAVE)
 102:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 103:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
 104:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
 105:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * Pass control to slave.
 106:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 */
 107:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_MASTER_CMD(I2C_I2C_MASTER_CMD_M_START_ON_IDLE))
 108:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 109:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 110:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                              I2C_I2C_MSTAT_ERR_ABORT_XFER);
 111:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 112:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 113:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 114:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 115:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 4


 116:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 117:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* The error handling common part:
 118:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 119:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 120:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 121:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 122:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(0u != endTransfer)
 123:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 124:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Set completion flags for master */
 125:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) I2C_GET_I2C_MSTAT_CMPLT;
 126:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 127:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if(I2C_I2C_MULTI_MASTER_SLAVE)
 128:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 129:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_FSM_ADDR)
 130:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 131:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 132:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 133:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 134:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_I2C_MASTER_CMD(I2C_I2C_MASTER_CMD_M_START_ON_IDLE))
 135:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 136:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_I2C_MASTER_CLEAR_START;
 137:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 138:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 139:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 140:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 141:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 142:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 143:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if((!I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_BUS_ERROR))
 144:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                && I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_ARB_LOST))
 145:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 146:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 147:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 148:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 149:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 150:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 151:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 152:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 153:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 154:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 155:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 156:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 157:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoACK
 158:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 159:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 160:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_ALL);
 161:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 162:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 163:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 164:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 165:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 166:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_IDLE;
 167:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 168:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 169:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 170:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 171:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 172:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 5


 173:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 174:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 175:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 176:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 177:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 178:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 179:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 180:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #else
 181:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 182:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* In case of LOST*/
 183:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 184:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 185:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif
 186:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 187:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 188:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 189:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 190:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     else /* (I2C_CHECK_I2C_FSM_SLAVE) */
 191:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 192:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 193:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 194:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2C_INTR_SLAVE_I2C_ARB_LOST:
 195:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 196:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * to notify an error condition.
 197:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 198:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_BUS_ERROR |
  57              		.loc 1 198 0
  58 0022 CA4B     		ldr	r3, .L37+16
  59 0024 1A68     		ldr	r2, [r3]
  60 0026 0223     		mov	r3, #2
  61 0028 FF33     		add	r3, r3, #255
  62 002a 1A42     		tst	r2, r3
  63 002c 19D0     		beq	.L4
 199:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                         I2C_INTR_SLAVE_I2C_ARB_LOST))
 200:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 201:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_RD)
  64              		.loc 1 201 0
  65 002e C64B     		ldr	r3, .L37+12
  66 0030 1B78     		ldrb	r3, [r3]
  67 0032 DB07     		lsl	r3, r3, #31
  68 0034 09D5     		bpl	.L5
 202:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 203:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* TX direction: master reads from slave */
 204:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_RD_BUSY;
  69              		.loc 1 204 0
  70 0036 C64B     		ldr	r3, .L37+20
  71 0038 1A78     		ldrb	r2, [r3]
  72 003a 0221     		mov	r1, #2
  73 003c 8A43     		bic	r2, r1
  74 003e 1A70     		strb	r2, [r3]
 205:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) (I2C_I2C_SSTAT_RD_ERR |
  75              		.loc 1 205 0
  76 0040 1978     		ldrb	r1, [r3]
  77 0042 0922     		mov	r2, #9
  78 0044 0A43     		orr	r2, r1
  79 0046 1A70     		strb	r2, [r3]
  80 0048 08E0     		b	.L6
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 6


  81              	.L5:
 206:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                           I2C_I2C_SSTAT_RD_CMPLT);
 207:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 208:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else
 209:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 210:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* RX direction: master writes into slave */
 211:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_WR_BUSY;
  82              		.loc 1 211 0
  83 004a C14B     		ldr	r3, .L37+20
  84 004c 1A78     		ldrb	r2, [r3]
  85 004e 2021     		mov	r1, #32
  86 0050 8A43     		bic	r2, r1
  87 0052 1A70     		strb	r2, [r3]
 212:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) (I2C_I2C_SSTAT_WR_ERR |
  88              		.loc 1 212 0
  89 0054 1978     		ldrb	r1, [r3]
  90 0056 9022     		mov	r2, #144
  91 0058 0A43     		orr	r2, r1
  92 005a 1A70     		strb	r2, [r3]
  93              	.L6:
 213:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                           I2C_I2C_SSTAT_WR_CMPLT);
 214:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 215:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 216:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state = I2C_I2C_FSM_EXIT_IDLE;
  94              		.loc 1 216 0
  95 005c 0022     		mov	r2, #0
  96 005e BA4B     		ldr	r3, .L37+12
  97 0060 1A70     		strb	r2, [r3]
  98              	.L4:
 217:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 218:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 219:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 220:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 221:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 222:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* States description:
 223:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 224:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 225:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
 226:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 227:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM Master */
 228:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_I2C_FSM_MASTER)
  99              		.loc 1 228 0
 100 0062 B94B     		ldr	r3, .L37+12
 101 0064 1B78     		ldrb	r3, [r3]
 102 0066 9B06     		lsl	r3, r3, #26
 103 0068 00D5     		bpl	.LCB95
 104 006a 65E1     		b	.L1	@long jump
 105              	.LCB95:
 229:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 230:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_MASTER)
 231:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 232:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 233:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 234:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Set completion flags to notify the API.
 235:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 236:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_STOP))
 237:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 7


 238:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_STOP);
 239:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 240:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) I2C_GET_I2C_MSTAT_CMPLT;
 241:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state       = I2C_I2C_FSM_IDLE;
 242:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 243:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             else
 244:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 245:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_ADDR) /* Address stage */
 246:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 247:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 248:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 249:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 250:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_NACK))
 251:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 252:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_NACK);
 253:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 254:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 255:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                  I2C_I2C_MSTAT_ERR_ADDR_NAK);
 256:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 257:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 258:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 259:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 260:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 261:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 262:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 263:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 264:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 265:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 266:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 267:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_I2C_FSM_RD) /* Reading */
 268:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 269:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_MSTR_RD_DATA;
 270:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 271:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else /* Writing */
 272:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 273:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_MSTR_WR_DATA;
 274:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(0u != I2C_mstrWrBufSize)
 275:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 276:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 277:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetTxInterruptMode(I2C_INTR_TX_EMPTY);
 278:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 279:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 280:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 281:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 282:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 283:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_DATA) /* Data phase */
 284:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 285:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_FSM_RD) /* Reading */
 286:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 287:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_RX_FULL:
 288:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 289:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 290:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 291:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_FULL))
 292:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 293:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Calculate difference */
 294:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             diffCount =  I2C_mstrRdBufSize -
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 8


 295:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         (I2C_mstrRdBufIndex + I2C_GET_RX_FIFO_ENTRIES);
 296:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 297:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 298:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount > I2C_I2C_FIFO_SIZE)
 299:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 300:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 diffCount = I2C_I2C_FIFO_SIZE;
 301:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 302:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 303:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 304:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(0u == diffCount)
 305:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 306:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_DISABLE_MASTER_AUTO_DATA_ACK;
 307:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 308:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     diffCount   = I2C_I2C_FIFO_SIZE;
 309:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 310:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 311:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 312:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 313:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 314:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 315:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = (uint8)
 316:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                                         I2C_RX_FIFO
 317:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_mstrRdBufIndex++;
 318:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 319:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 320:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 321:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 322:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 323:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * generated by one command generate Stop.
 324:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 325:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_NOT_EMPTY))
 326:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 327:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Put data in component buffer */
 328:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 329:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrRdBufIndex++;
 330:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 331:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(I2C_mstrRdBufIndex < I2C_mstrRdBufSize)
 332:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 333:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_I2C_MASTER_GENERATE_ACK;
 334:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 335:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 336:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 337:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 338:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 339:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 340:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 341:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 342:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Do nothing */
 343:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 344:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 345:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 346:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 347:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else /* Writing */
 348:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 349:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 350:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 351:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 9


 352:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 353:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 354:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_NACK))
 355:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 356:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_NACK);
 357:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 358:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 359:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndexTmp -= (I2C_GET_TX_FIFO_ENTRIES +
 360:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                    I2C_GET_TX_FIFO_SR_VALID);
 361:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 362:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Update number of transferred bytes */
 363:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndex = I2C_mstrWrBufIndexTmp;
 364:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 365:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 366:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                      I2C_I2C_MSTAT_ERR_SHORT_XFER);
 367:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 368:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_CLEAR_TX_FIFO;
 369:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 370:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 371:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 372:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 373:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 374:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 375:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 376:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 377:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_EMPTY))
 378:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 379:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             while(I2C_I2C_FIFO_SIZE != I2C_GET_TX_FIFO_ENTRIES)
 380:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 381:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 382:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 383:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 */
 384:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(I2C_mstrWrBufIndexTmp < I2C_mstrWrBufSize)
 385:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 386:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 #if(!I2C_CY_SCBIP_V0)
 387:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 388:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 389:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 390:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     */
 391:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     if(I2C_mstrWrBufIndexTmp == (I2C_mstrWrBufSize - 1u))
 392:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     {
 393:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         I2C_ClearTxInterruptSource(I2C_INTR_TX_UNDERFLOW);
 394:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         I2C_SetTxInterruptMode(I2C_INTR_TX_UNDERFLOW);
 395:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     }
 396:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                  #endif /* (!I2C_CY_SCBIP_V0) */
 397:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 398:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* Put data into TX FIFO */
 399:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_TX_FIFO_WR_REG = (uint32) I2C_mstrWrBufPtr[I2C_mstrWrBufInd
 400:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_mstrWrBufIndexTmp++;
 401:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 402:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 else
 403:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 404:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     break; /* No more data to put */
 405:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 406:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 407:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 408:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CY_SCBIP_V0)
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 10


 409:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(I2C_mstrWrBufIndexTmp == I2C_mstrWrBufSize)
 410:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 411:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetTxInterruptMode(I2C_INTR_TX_UNDERFLOW);
 412:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 413:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 414:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearTxInterruptSource(I2C_INTR_TX_ALL);
 415:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #else
 416:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearTxInterruptSource(I2C_INTR_TX_EMPTY);
 417:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif /* (I2C_CY_SCBIP_V0) */
 418:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 419:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 420:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 421:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The transaction needs to be completed.
 422:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 423:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_UNDERFLOW))
 424:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 425:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Update number of transferred bytes */
 426:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndex = I2C_mstrWrBufIndexTmp;
 427:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 428:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 429:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 430:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 431:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 432:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Do nothing */
 433:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 434:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 435:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 436:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 437:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 438:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 439:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 440:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_MASTER_AUTO_DATA_ACK;
 441:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 442:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 443:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 444:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 445:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 446:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_MODE_NO_STOP(I2C_mstrControl))
 447:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 448:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 449:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_XFER_HALT |
 450:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                  I2C_GET_I2C_MSTAT_CMPLT);
 451:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 452:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state = I2C_I2C_FSM_MSTR_HALT;
 453:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 454:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 455:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 456:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 457:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 458:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 459:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 460:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * the other master is still reading from the slave.
 461:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 462:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_I2C_MASTER_GENERATE_STOP;
 463:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 464:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 465:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 11


 466:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 467:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         } /* (I2C_I2C_MASTER) */
 468:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 469:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 470:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     } /* (I2C_CHECK_I2C_FSM_MASTER) */
 471:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 472:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 473:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM Slave */
 474:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     else if(I2C_CHECK_I2C_FSM_SLAVE)
 106              		.loc 1 474 0
 107 006c B64B     		ldr	r3, .L37+12
 108 006e 1B78     		ldrb	r3, [r3]
 109 0070 DB06     		lsl	r3, r3, #27
 110 0072 00D4     		bmi	.LCB103
 111 0074 4AE1     		b	.L8	@long jump
 112              	.LCB103:
 475:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 476:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 477:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 478:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 479:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 480:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 481:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 482:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_NACK))
 113              		.loc 1 482 0
 114 0076 B54B     		ldr	r3, .L37+16
 115 0078 1B68     		ldr	r3, [r3]
 116 007a 9B07     		lsl	r3, r3, #30
 117 007c 3ED5     		bpl	.L9
 483:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 484:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_I2C_NACK);
 118              		.loc 1 484 0
 119 007e 0222     		mov	r2, #2
 120 0080 B44B     		ldr	r3, .L37+24
 121 0082 1A60     		str	r2, [r3]
 485:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 486:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* All entries that remain in TX FIFO max value is 9: 8 (FIFO) + 1 (SHIFTER) */
 487:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount = (I2C_GET_TX_FIFO_ENTRIES + I2C_GET_TX_FIFO_SR_VALID);
 122              		.loc 1 487 0
 123 0084 B44A     		ldr	r2, .L37+28
 124 0086 1368     		ldr	r3, [r2]
 125 0088 0F21     		mov	r1, #15
 126 008a 1940     		and	r1, r3
 127 008c 1368     		ldr	r3, [r2]
 128 008e 8022     		mov	r2, #128
 129 0090 1202     		lsl	r2, r2, #8
 130 0092 1340     		and	r3, r2
 131 0094 00D0     		beq	.L10
 132 0096 0123     		mov	r3, #1
 133              	.L10:
 134              		.loc 1 487 0 is_stmt 0 discriminator 4
 135 0098 CB18     		add	r3, r1, r3
 136              	.LVL2:
 488:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 489:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_slOverFlowCount > diffCount) /* Overflow */
 137              		.loc 1 489 0 is_stmt 1 discriminator 4
 138 009a B04A     		ldr	r2, .L37+32
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 12


 139 009c 1278     		ldrb	r2, [r2]
 140 009e D2B2     		uxtb	r2, r2
 141 00a0 9A42     		cmp	r2, r3
 142 00a2 05D9     		bls	.L11
 490:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 491:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_RD_OVFL;
 143              		.loc 1 491 0
 144 00a4 AA4A     		ldr	r2, .L37+20
 145 00a6 1178     		ldrb	r1, [r2]
 146 00a8 0423     		mov	r3, #4
 147              	.LVL3:
 148 00aa 0B43     		orr	r3, r1
 149 00ac 1370     		strb	r3, [r2]
 150 00ae 06E0     		b	.L12
 151              	.LVL4:
 152              	.L11:
 492:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 493:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* No Overflow */
 494:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 495:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Roll-back temporary index */
 496:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slRdBufIndexTmp -= (diffCount - I2C_slOverFlowCount);
 153              		.loc 1 496 0
 154 00b0 AA4A     		ldr	r2, .L37+32
 155 00b2 1278     		ldrb	r2, [r2]
 156 00b4 9B1A     		sub	r3, r3, r2
 157              	.LVL5:
 158 00b6 AA49     		ldr	r1, .L37+36
 159 00b8 0A68     		ldr	r2, [r1]
 160 00ba D31A     		sub	r3, r2, r3
 161 00bc 0B60     		str	r3, [r1]
 162              	.L12:
 497:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 498:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 499:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Update slave of transferred bytes */
 500:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slRdBufIndex = I2C_slRdBufIndexTmp;
 163              		.loc 1 500 0
 164 00be A84B     		ldr	r3, .L37+36
 165 00c0 1A68     		ldr	r2, [r3]
 166 00c2 A84B     		ldr	r3, .L37+40
 167 00c4 1A60     		str	r2, [r3]
 501:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 502:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clean-up TX FIFO */
 503:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 168              		.loc 1 503 0
 169 00c6 0023     		mov	r3, #0
 170 00c8 A74A     		ldr	r2, .L37+44
 171 00ca 1360     		str	r3, [r2]
 504:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slOverFlowCount = 0u;
 172              		.loc 1 504 0
 173 00cc A34A     		ldr	r2, .L37+32
 174 00ce 1370     		strb	r3, [r2]
 505:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_CLEAR_TX_FIFO;
 175              		.loc 1 505 0
 176 00d0 A64B     		ldr	r3, .L37+48
 177 00d2 1A68     		ldr	r2, [r3]
 178 00d4 8021     		mov	r1, #128
 179 00d6 4902     		lsl	r1, r1, #9
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 13


 180 00d8 0A43     		orr	r2, r1
 181 00da 1A60     		str	r2, [r3]
 182 00dc 1968     		ldr	r1, [r3]
 183 00de A44A     		ldr	r2, .L37+52
 184 00e0 0A40     		and	r2, r1
 185 00e2 1A60     		str	r2, [r3]
 506:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 507:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Complete master reading */
 508:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_RD_BUSY;
 186              		.loc 1 508 0
 187 00e4 9A4B     		ldr	r3, .L37+20
 188 00e6 1A78     		ldrb	r2, [r3]
 189 00e8 0221     		mov	r1, #2
 190 00ea 8A43     		bic	r2, r1
 191 00ec 1A70     		strb	r2, [r3]
 509:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus |= (uint8)  I2C_I2C_SSTAT_RD_CMPLT;
 192              		.loc 1 509 0
 193 00ee 1978     		ldrb	r1, [r3]
 194 00f0 0122     		mov	r2, #1
 195 00f2 0A43     		orr	r2, r1
 196 00f4 1A70     		strb	r2, [r3]
 510:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state     =  I2C_I2C_FSM_IDLE;
 197              		.loc 1 510 0
 198 00f6 1022     		mov	r2, #16
 199 00f8 934B     		ldr	r3, .L37+12
 200 00fa 1A70     		strb	r2, [r3]
 201              	.L9:
 511:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 512:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 513:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 514:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 515:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 516:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 517:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 518:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 519:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_WRITE_STOP))
 202              		.loc 1 519 0
 203 00fc 934B     		ldr	r3, .L37+16
 204 00fe 1B68     		ldr	r3, [r3]
 205 0100 1B07     		lsl	r3, r3, #28
 206 0102 37D5     		bpl	.L13
 520:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 521:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 207              		.loc 1 521 0
 208 0104 0822     		mov	r2, #8
 209 0106 934B     		ldr	r3, .L37+24
 210 0108 1A60     		str	r2, [r3]
 522:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 523:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 524:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 525:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 526:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 */
 527:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if (0u != (I2C_I2C_CTRL_REG & I2C_I2C_CTRL_S_READY_DATA_ACK))
 211              		.loc 1 527 0
 212 010a 9A4B     		ldr	r3, .L37+56
 213 010c 1B68     		ldr	r3, [r3]
 214 010e 9B04     		lsl	r3, r3, #18
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 14


 215 0110 0CD4     		bmi	.L14
 216 0112 14E0     		b	.L15
 217              	.L16:
 528:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 529:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     while(0u != I2C_GET_RX_FIFO_ENTRIES)
 530:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 531:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CHECK_I2C_ACCEPT_ADDRESS)
 532:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 533:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if((1u == I2C_GET_RX_FIFO_ENTRIES) &&
 534:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH)))
 535:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 536:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 537:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 538:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 539:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif
 540:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 541:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Put data in component buffer */
 542:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 218              		.loc 1 542 0
 219 0114 984B     		ldr	r3, .L37+60
 220 0116 1A68     		ldr	r2, [r3]
 221 0118 9849     		ldr	r1, .L37+64
 222 011a 0968     		ldr	r1, [r1]
 223 011c 8A18     		add	r2, r1, r2
 224 011e 9849     		ldr	r1, .L37+68
 225 0120 0968     		ldr	r1, [r1]
 226 0122 C9B2     		uxtb	r1, r1
 227 0124 1170     		strb	r1, [r2]
 543:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slWrBufIndex++;
 228              		.loc 1 543 0
 229 0126 1A68     		ldr	r2, [r3]
 230 0128 0132     		add	r2, r2, #1
 231 012a 1A60     		str	r2, [r3]
 232              	.L14:
 529:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 233              		.loc 1 529 0
 234 012c 954B     		ldr	r3, .L37+72
 235 012e 1B68     		ldr	r3, [r3]
 236 0130 1B07     		lsl	r3, r3, #28
 237 0132 EFD1     		bne	.L16
 544:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 545:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 546:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_SLAVE_AUTO_DATA;
 238              		.loc 1 546 0
 239 0134 8F4A     		ldr	r2, .L37+56
 240 0136 1168     		ldr	r1, [r2]
 241 0138 934B     		ldr	r3, .L37+76
 242 013a 0B40     		and	r3, r1
 243 013c 1360     		str	r3, [r2]
 244              	.L15:
 547:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 548:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 549:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_INTR_RX(I2C_INTR_RX_OVERFLOW))
 245              		.loc 1 549 0
 246 013e 934B     		ldr	r3, .L37+80
 247 0140 1B68     		ldr	r3, [r3]
 248 0142 9B06     		lsl	r3, r3, #26
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 15


 249 0144 04D5     		bpl	.L17
 550:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 551:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_OVFL;
 250              		.loc 1 551 0
 251 0146 824A     		ldr	r2, .L37+20
 252 0148 1178     		ldrb	r1, [r2]
 253 014a 4023     		mov	r3, #64
 254 014c 0B43     		orr	r3, r1
 255 014e 1370     		strb	r3, [r2]
 256              	.L17:
 552:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 553:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 554:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 555:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 257              		.loc 1 555 0
 258 0150 0022     		mov	r2, #0
 259 0152 8F4B     		ldr	r3, .L37+84
 260 0154 1A60     		str	r2, [r3]
 556:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 261              		.loc 1 556 0
 262 0156 8F4A     		ldr	r2, .L37+88
 263 0158 8C4B     		ldr	r3, .L37+80
 264 015a 1A60     		str	r2, [r3]
 557:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 558:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Complete master writing */
 559:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_WR_BUSY;
 265              		.loc 1 559 0
 266 015c 7C4B     		ldr	r3, .L37+20
 267 015e 1A78     		ldrb	r2, [r3]
 268 0160 2021     		mov	r1, #32
 269 0162 8A43     		bic	r2, r1
 270 0164 1A70     		strb	r2, [r3]
 560:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus |= (uint8)  I2C_I2C_SSTAT_WR_CMPLT;
 271              		.loc 1 560 0
 272 0166 1978     		ldrb	r1, [r3]
 273 0168 1022     		mov	r2, #16
 274 016a 0A43     		orr	r2, r1
 275 016c 1A70     		strb	r2, [r3]
 561:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state     =  I2C_I2C_FSM_IDLE;
 276              		.loc 1 561 0
 277 016e 764B     		ldr	r3, .L37+12
 278 0170 1022     		mov	r2, #16
 279 0172 1A70     		strb	r2, [r3]
 280              	.L13:
 562:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 563:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 564:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 565:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 566:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 567:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 568:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 569:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 570:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 571:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH |
 572:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_INTR_SLAVE_I2C_GENERAL))
 573:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #else
 574:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH))
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 16


 281              		.loc 1 574 0
 282 0174 754B     		ldr	r3, .L37+16
 283 0176 1B68     		ldr	r3, [r3]
 284 0178 5B06     		lsl	r3, r3, #25
 285 017a 46D5     		bpl	.L18
 575:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 576:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 577:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 578:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearI2CExtClkInterruptSource(I2C_INTR_I2C_EC_WAKE_UP);
 286              		.loc 1 578 0
 287 017c 0122     		mov	r2, #1
 288 017e 864B     		ldr	r3, .L37+92
 289 0180 1A60     		str	r2, [r3]
 579:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 580:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER)
 581:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 582:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if (NULL != I2C_customAddressHandler)
 583:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 584:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Call custom address handler */
 585:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         response = I2C_customAddressHandler();
 586:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 587:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 588:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 589:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 590:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * componnet does not use that source. */
 591:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         (void) I2C_RX_FIFO_RD_REG;
 592:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         response = I2C_I2C_ACK_ADDR;
 593:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 594:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 595:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 596:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 597:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 598:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif
 599:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 600:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 601:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if (response == I2C_I2C_NAK_ADDR)
 602:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 603:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (!I2C_CY_SCBIP_V0)
 604:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 605:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_INTR_SLAVE(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 606:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif /* (!I2C_CY_SCBIP_V0) */
 607:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 608:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clear address match and stop history */
 609:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 610:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 611:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* ACK the address byte */
 612:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_NACK;
 613:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 614:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else
 615:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 616:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 617:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_STATUS(I2C_I2C_STATUS_S_READ))
 290              		.loc 1 617 0
 291 0182 864B     		ldr	r3, .L37+96
 292 0184 1B68     		ldr	r3, [r3]
 293 0186 DB06     		lsl	r3, r3, #27
 294 0188 0FD5     		bpl	.L19
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 17


 618:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* TX direction: master reads from slave */
 619:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 620:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_SetTxInterruptMode(I2C_INTR_TX_EMPTY);
 295              		.loc 1 620 0
 296 018a 0F32     		add	r2, r2, #15
 297 018c 764B     		ldr	r3, .L37+44
 298 018e 1A60     		str	r2, [r3]
 621:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 622:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 623:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slRdBufIndexTmp = I2C_slRdBufIndex;
 299              		.loc 1 623 0
 300 0190 744B     		ldr	r3, .L37+40
 301 0192 1A68     		ldr	r2, [r3]
 302 0194 724B     		ldr	r3, .L37+36
 303 0196 1A60     		str	r2, [r3]
 624:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 625:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start master reading */
 626:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slStatus |= (uint8) I2C_I2C_SSTAT_RD_BUSY;
 304              		.loc 1 626 0
 305 0198 6D4A     		ldr	r2, .L37+20
 306 019a 1178     		ldrb	r1, [r2]
 307 019c 0223     		mov	r3, #2
 308 019e 0B43     		orr	r3, r1
 309 01a0 1370     		strb	r3, [r2]
 627:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state     = I2C_I2C_FSM_SL_RD;
 310              		.loc 1 627 0
 311 01a2 1222     		mov	r2, #18
 312 01a4 684B     		ldr	r3, .L37+12
 313 01a6 1A70     		strb	r2, [r3]
 314 01a8 24E0     		b	.L20
 315              	.L19:
 628:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 629:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 630:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* RX direction: master writes into slave */
 631:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 632:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Calculate available buffer size */
 633:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         diffCount = (I2C_slWrBufSize - I2C_slWrBufIndex);
 316              		.loc 1 633 0
 317 01aa 7D4B     		ldr	r3, .L37+100
 318 01ac 1B68     		ldr	r3, [r3]
 319 01ae 724A     		ldr	r2, .L37+60
 320 01b0 1268     		ldr	r2, [r2]
 321 01b2 9B1A     		sub	r3, r3, r2
 322              	.LVL6:
 634:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 635:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #if (I2C_CY_SCBIP_V0)
 636:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(diffCount < I2C_I2C_FIFO_SIZE)
 637:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 638:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 639:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 640:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 641:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 642:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 643:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 644:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount == I2C_I2C_FIFO_SIZE)
 645:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 646:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 18


 647:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_ENABLE_SLAVE_AUTO_DATA;
 648:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 649:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 650:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 651:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 652:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_ENABLE_SLAVE_AUTO_DATA_ACK;
 653:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetRxInterruptMode(I2C_INTR_RX_FULL);
 654:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 655:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 656:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 657:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #else
 658:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CHECK_I2C_ACCEPT_ADDRESS)
 659:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 660:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 661:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 662:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 663:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             */
 664:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 665:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 666:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #else
 667:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 668:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount < I2C_I2C_FIFO_SIZE)
 323              		.loc 1 668 0
 324 01b4 072B     		cmp	r3, #7
 325 01b6 03D8     		bhi	.L21
 669:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 670:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 671:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 326              		.loc 1 671 0
 327 01b8 0422     		mov	r2, #4
 328 01ba 754B     		ldr	r3, .L37+84
 329              	.LVL7:
 330 01bc 1A60     		str	r2, [r3]
 331 01be 11E0     		b	.L22
 332              	.LVL8:
 333              	.L21:
 672:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 673:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 674:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 675:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 676:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(diffCount == I2C_I2C_FIFO_SIZE)
 334              		.loc 1 676 0
 335 01c0 082B     		cmp	r3, #8
 336 01c2 06D1     		bne	.L23
 677:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 678:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 679:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_ENABLE_SLAVE_AUTO_DATA;
 337              		.loc 1 679 0
 338 01c4 6B4A     		ldr	r2, .L37+56
 339 01c6 1368     		ldr	r3, [r2]
 340              	.LVL9:
 341 01c8 A021     		mov	r1, #160
 342 01ca 0902     		lsl	r1, r1, #8
 343 01cc 0B43     		orr	r3, r1
 344 01ce 1360     		str	r3, [r2]
 345 01d0 08E0     		b	.L22
 346              	.LVL10:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 19


 347              	.L23:
 680:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 681:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 else
 682:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 683:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 684:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_ENABLE_SLAVE_AUTO_DATA_ACK;
 348              		.loc 1 684 0
 349 01d2 684A     		ldr	r2, .L37+56
 350 01d4 1368     		ldr	r3, [r2]
 351              	.LVL11:
 352 01d6 8021     		mov	r1, #128
 353 01d8 8901     		lsl	r1, r1, #6
 354 01da 0B43     		orr	r3, r1
 355 01dc 1360     		str	r3, [r2]
 685:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_SetRxInterruptMode(I2C_INTR_RX_FULL);
 356              		.loc 1 685 0
 357 01de 0822     		mov	r2, #8
 358 01e0 6B4B     		ldr	r3, .L37+84
 359 01e2 1A60     		str	r2, [r3]
 360              	.L22:
 686:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 687:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 688:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 689:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif
 690:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #endif /* (I2C_CY_SCBIP_V0) */
 691:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 692:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start master reading */
 693:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_BUSY;
 361              		.loc 1 693 0
 362 01e4 5A4A     		ldr	r2, .L37+20
 363 01e6 1178     		ldrb	r1, [r2]
 364 01e8 2023     		mov	r3, #32
 365 01ea 0B43     		orr	r3, r1
 366 01ec 1370     		strb	r3, [r2]
 694:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state     = I2C_I2C_FSM_SL_WR;
 367              		.loc 1 694 0
 368 01ee 1122     		mov	r2, #17
 369 01f0 554B     		ldr	r3, .L37+12
 370 01f2 1A70     		strb	r2, [r3]
 371              	.L20:
 695:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 696:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 697:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clear address match and stop history */
 698:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 372              		.loc 1 698 0
 373 01f4 6B4A     		ldr	r2, .L37+104
 374 01f6 574B     		ldr	r3, .L37+24
 375 01f8 1A60     		str	r2, [r3]
 699:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 700:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (!I2C_CY_SCBIP_V0)
 701:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 702:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ENABLE_INTR_SLAVE(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 376              		.loc 1 702 0
 377 01fa 6B4A     		ldr	r2, .L37+108
 378 01fc 1168     		ldr	r1, [r2]
 379 01fe 0823     		mov	r3, #8
 380 0200 0B43     		orr	r3, r1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 20


 381 0202 1360     		str	r3, [r2]
 703:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif /* (!I2C_CY_SCBIP_V0) */
 704:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 705:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* ACK the address byte */
 706:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_ACK;
 382              		.loc 1 706 0
 383 0204 0122     		mov	r2, #1
 384 0206 694B     		ldr	r3, .L37+112
 385 0208 1A60     		str	r2, [r3]
 386              	.L18:
 707:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 708:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 709:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 710:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_RX_FULL:
 711:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 712:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 713:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_FULL))
 387              		.loc 1 713 0
 388 020a 694B     		ldr	r3, .L37+116
 389 020c 1B68     		ldr	r3, [r3]
 390 020e 1B07     		lsl	r3, r3, #28
 391 0210 2AD5     		bpl	.L24
 714:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 715:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 716:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount =  I2C_slWrBufSize -
 392              		.loc 1 716 0
 393 0212 634B     		ldr	r3, .L37+100
 394 0214 1B68     		ldr	r3, [r3]
 395 0216 584A     		ldr	r2, .L37+60
 396 0218 1068     		ldr	r0, [r2]
 397 021a 181A     		sub	r0, r3, r0
 398 021c 0838     		sub	r0, r0, #8
 399              	.LVL12:
 717:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             (I2C_slWrBufIndex + I2C_I2C_FIFO_SIZE);
 718:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 719:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(diffCount > I2C_I2C_FIFO_SIZE) /* Proceed transaction */
 400              		.loc 1 719 0
 401 021e 0828     		cmp	r0, #8
 402 0220 02D9     		bls	.L36
 720:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 721:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     diffCount   = I2C_I2C_FIFO_SIZE;
 722:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 403              		.loc 1 722 0
 404 0222 0024     		mov	r4, #0
 721:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 405              		.loc 1 721 0
 406 0224 0820     		mov	r0, #8
 407              	.LVL13:
 408 0226 0EE0     		b	.L26
 409              	.LVL14:
 410              	.L36:
 723:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 724:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 725:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 726:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 411              		.loc 1 726 0
 412 0228 0124     		mov	r4, #1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 21


 413 022a 0CE0     		b	.L26
 414              	.LVL15:
 415              	.L27:
 727:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 728:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 729:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 730:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 731:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Put data in component buffer */
 732:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 416              		.loc 1 732 0 discriminator 2
 417 022c 524B     		ldr	r3, .L37+60
 418 022e 1A68     		ldr	r2, [r3]
 419 0230 5249     		ldr	r1, .L37+64
 420 0232 0968     		ldr	r1, [r1]
 421 0234 8A18     		add	r2, r1, r2
 422 0236 5249     		ldr	r1, .L37+68
 423 0238 0968     		ldr	r1, [r1]
 424 023a C9B2     		uxtb	r1, r1
 425 023c 1170     		strb	r1, [r2]
 733:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufIndex++;
 426              		.loc 1 733 0 discriminator 2
 427 023e 1A68     		ldr	r2, [r3]
 428 0240 0132     		add	r2, r2, #1
 429 0242 1A60     		str	r2, [r3]
 729:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 430              		.loc 1 729 0 discriminator 2
 431 0244 0138     		sub	r0, r0, #1
 432              	.LVL16:
 433              	.L26:
 729:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 434              		.loc 1 729 0 is_stmt 0 discriminator 1
 435 0246 0028     		cmp	r0, #0
 436 0248 F0D1     		bne	.L27
 734:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 735:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 736:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 437              		.loc 1 736 0 is_stmt 1
 438 024a 002C     		cmp	r4, #0
 439 024c 08D0     		beq	.L28
 737:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 738:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ENABLE_SLAVE_AUTO_DATA_NACK;
 440              		.loc 1 738 0
 441 024e 494A     		ldr	r2, .L37+56
 442 0250 1368     		ldr	r3, [r2]
 443 0252 8021     		mov	r1, #128
 444 0254 0902     		lsl	r1, r1, #8
 445 0256 0B43     		orr	r3, r1
 446 0258 1360     		str	r3, [r2]
 739:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 740:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 741:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * disable all RX interrupt sources.
 742:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 743:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 447              		.loc 1 743 0
 448 025a 0022     		mov	r2, #0
 449 025c 4C4B     		ldr	r3, .L37+84
 450 025e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 22


 451              	.L28:
 744:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 745:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 746:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_FULL);
 452              		.loc 1 746 0
 453 0260 0822     		mov	r2, #8
 454 0262 4A4B     		ldr	r3, .L37+80
 455 0264 1A60     		str	r2, [r3]
 456 0266 23E0     		b	.L29
 457              	.LVL17:
 458              	.L24:
 747:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 748:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_RX_NOT_EMPTY:
 749:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 750:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 751:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             else if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_NOT_EMPTY))
 459              		.loc 1 751 0
 460 0268 514B     		ldr	r3, .L37+116
 461 026a 1B68     		ldr	r3, [r3]
 462 026c 5B07     		lsl	r3, r3, #29
 463 026e 1FD5     		bpl	.L29
 752:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 753:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount = I2C_RX_FIFO_RD_REG;
 464              		.loc 1 753 0
 465 0270 434B     		ldr	r3, .L37+68
 466 0272 1B68     		ldr	r3, [r3]
 467              	.LVL18:
 754:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 755:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_slWrBufIndex < I2C_slWrBufSize)
 468              		.loc 1 755 0
 469 0274 404A     		ldr	r2, .L37+60
 470 0276 1168     		ldr	r1, [r2]
 471 0278 494A     		ldr	r2, .L37+100
 472 027a 1268     		ldr	r2, [r2]
 473 027c 9142     		cmp	r1, r2
 474 027e 0DD2     		bcs	.L30
 756:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 757:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_ACK;
 475              		.loc 1 757 0
 476 0280 0121     		mov	r1, #1
 477 0282 4A4A     		ldr	r2, .L37+112
 478 0284 1160     		str	r1, [r2]
 758:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 759:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Put data into component buffer */
 760:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) diffCount;
 479              		.loc 1 760 0
 480 0286 3C4A     		ldr	r2, .L37+60
 481 0288 1168     		ldr	r1, [r2]
 482 028a 3C48     		ldr	r0, .L37+64
 483 028c 0068     		ldr	r0, [r0]
 484 028e 4118     		add	r1, r0, r1
 485 0290 DBB2     		uxtb	r3, r3
 486              	.LVL19:
 487 0292 0B70     		strb	r3, [r1]
 761:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufIndex++;
 488              		.loc 1 761 0
 489 0294 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 23


 490 0296 0133     		add	r3, r3, #1
 491 0298 1360     		str	r3, [r2]
 492 029a 06E0     		b	.L31
 493              	.LVL20:
 494              	.L30:
 762:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 763:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 764:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 765:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_NACK;
 495              		.loc 1 765 0
 496 029c FFF7FEFF 		bl	I2C_I2CSlaveNackGeneration
 497              	.LVL21:
 766:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 767:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_OVFL;
 498              		.loc 1 767 0
 499 02a0 2B4A     		ldr	r2, .L37+20
 500 02a2 1178     		ldrb	r1, [r2]
 501 02a4 4023     		mov	r3, #64
 502 02a6 0B43     		orr	r3, r1
 503 02a8 1370     		strb	r3, [r2]
 504              	.L31:
 768:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 769:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 770:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_NOT_EMPTY);
 505              		.loc 1 770 0
 506 02aa 0422     		mov	r2, #4
 507 02ac 374B     		ldr	r3, .L37+80
 508 02ae 1A60     		str	r2, [r3]
 509              	.LVL22:
 510              	.L29:
 771:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 772:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             else
 773:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 774:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Does nothing */
 775:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 776:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 777:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 778:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_TX_EMPTY:
 779:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 780:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 781:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 782:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 783:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_EMPTY))
 511              		.loc 1 783 0
 512 02b0 404B     		ldr	r3, .L37+120
 513 02b2 1B68     		ldr	r3, [r3]
 514 02b4 DB06     		lsl	r3, r3, #27
 515 02b6 1FD4     		bmi	.L32
 516 02b8 3EE0     		b	.L1
 517              	.L35:
 784:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 785:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 while(I2C_I2C_FIFO_SIZE != I2C_GET_TX_FIFO_ENTRIES)
 786:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 787:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 788:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 789:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * of the read transfer.
 790:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 24


 791:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_slRdBufIndexTmp < I2C_slRdBufSize)
 518              		.loc 1 791 0
 519 02ba 294B     		ldr	r3, .L37+36
 520 02bc 1A68     		ldr	r2, [r3]
 521 02be 3E4B     		ldr	r3, .L37+124
 522 02c0 1B68     		ldr	r3, [r3]
 523 02c2 9A42     		cmp	r2, r3
 524 02c4 0CD2     		bcs	.L33
 792:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Data from buffer */
 793:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 794:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_TX_FIFO_WR_REG = (uint32) I2C_slRdBufPtr[I2C_slRdBufIndexTmp];
 525              		.loc 1 794 0
 526 02c6 264B     		ldr	r3, .L37+36
 527 02c8 1A68     		ldr	r2, [r3]
 528 02ca 3C49     		ldr	r1, .L37+128
 529 02cc 0968     		ldr	r1, [r1]
 530 02ce 8A18     		add	r2, r1, r2
 531 02d0 1278     		ldrb	r2, [r2]
 532 02d2 D2B2     		uxtb	r2, r2
 533 02d4 3A49     		ldr	r1, .L37+132
 534 02d6 0A60     		str	r2, [r1]
 795:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slRdBufIndexTmp++;
 535              		.loc 1 795 0
 536 02d8 1A68     		ldr	r2, [r3]
 537 02da 0132     		add	r2, r2, #1
 538 02dc 1A60     		str	r2, [r3]
 539 02de 0BE0     		b	.L32
 540              	.L33:
 796:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 797:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 798:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Probably Overflow */
 799:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 800:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_TX_FIFO_WR_REG = I2C_I2C_SLAVE_OVFL_RETURN;
 541              		.loc 1 800 0
 542 02e0 FF22     		mov	r2, #255
 543 02e2 374B     		ldr	r3, .L37+132
 544 02e4 1A60     		str	r2, [r3]
 801:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 802:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(0u == (I2C_INTR_TX_OVERFLOW & I2C_slOverFlowCount))
 545              		.loc 1 802 0
 546 02e6 1D4B     		ldr	r3, .L37+32
 547 02e8 1B78     		ldrb	r3, [r3]
 548 02ea 9B06     		lsl	r3, r3, #26
 549 02ec 04D4     		bmi	.L32
 803:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 804:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Get counter in range of byte: value 10 is overflow */
 805:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_slOverFlowCount++;
 550              		.loc 1 805 0
 551 02ee 1B4A     		ldr	r2, .L37+32
 552 02f0 1378     		ldrb	r3, [r2]
 553 02f2 0133     		add	r3, r3, #1
 554 02f4 DBB2     		uxtb	r3, r3
 555 02f6 1370     		strb	r3, [r2]
 556              	.L32:
 785:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 557              		.loc 1 785 0
 558 02f8 174B     		ldr	r3, .L37+28
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 25


 559 02fa 1B68     		ldr	r3, [r3]
 560 02fc 0F22     		mov	r2, #15
 561 02fe 1340     		and	r3, r2
 562 0300 082B     		cmp	r3, #8
 563 0302 DAD1     		bne	.L35
 806:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 807:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 808:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 809:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 810:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearTxInterruptSource(I2C_INTR_TX_EMPTY);
 564              		.loc 1 810 0
 565 0304 0132     		add	r2, r2, #1
 566 0306 2F4B     		ldr	r3, .L37+136
 567 0308 1A60     		str	r2, [r3]
 568 030a 15E0     		b	.L1
 569              	.LVL23:
 570              	.L8:
 811:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 812:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 813:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         }  /* (I2C_I2C_SLAVE) */
 814:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 815:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 816:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 817:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 818:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM EXIT:
 819:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 820:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 821:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
 822:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     else
 823:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 824:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_CTRL_REG &= (uint32) ~I2C_CTRL_ENABLED; /* Disable scb IP */
 571              		.loc 1 824 0
 572 030c 2E4A     		ldr	r2, .L37+140
 573 030e 1368     		ldr	r3, [r2]
 574 0310 5B00     		lsl	r3, r3, #1
 575 0312 5B08     		lsr	r3, r3, #1
 576 0314 1360     		str	r3, [r2]
 825:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 826:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_state = I2C_I2C_FSM_IDLE;
 577              		.loc 1 826 0
 578 0316 1021     		mov	r1, #16
 579 0318 0B4B     		ldr	r3, .L37+12
 580 031a 1970     		strb	r1, [r3]
 827:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 828:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_DISABLE_SLAVE_AUTO_DATA;
 581              		.loc 1 828 0
 582 031c 154B     		ldr	r3, .L37+56
 583 031e 1868     		ldr	r0, [r3]
 584 0320 1949     		ldr	r1, .L37+76
 585 0322 0140     		and	r1, r0
 586 0324 1960     		str	r1, [r3]
 829:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_DISABLE_MASTER_AUTO_DATA;
 587              		.loc 1 829 0
 588 0326 1868     		ldr	r0, [r3]
 589 0328 2849     		ldr	r1, .L37+144
 590 032a 0140     		and	r1, r0
 591 032c 1960     		str	r1, [r3]
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 26


 830:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 831:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     #if(I2C_CY_SCBIP_V0)
 832:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 833:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 834:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 835:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 836:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearTxInterruptSource(I2C_INTR_RX_ALL);
 837:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearRxInterruptSource(I2C_INTR_TX_ALL);
 838:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 839:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_ALL);
 840:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     #endif /* (I2C_CY_SCBIP_V0) */
 841:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 842:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_CTRL_REG |= (uint32) I2C_CTRL_ENABLED;  /* Enable scb IP */
 592              		.loc 1 842 0
 593 032e 1368     		ldr	r3, [r2]
 594 0330 8021     		mov	r1, #128
 595 0332 0906     		lsl	r1, r1, #24
 596 0334 0B43     		orr	r3, r1
 597 0336 1360     		str	r3, [r2]
 598              	.LVL24:
 599              	.L1:
 843:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 844:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 845:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #ifdef I2C_I2C_ISR_EXIT_CALLBACK
 846:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     I2C_I2C_ISR_ExitCallback();
 847:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* I2C_I2C_ISR_EXIT_CALLBACK */
 848:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     
 849:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** }
 600              		.loc 1 849 0
 601              		@ sp needed
 602 0338 10BD     		pop	{r4, pc}
 603              	.L38:
 604 033a C046     		.align	2
 605              	.L37:
 606 033c 00000000 		.word	I2C_customIntrHandler
 607 0340 8C0E0640 		.word	1074138764
 608 0344 880E0640 		.word	1074138760
 609 0348 00000000 		.word	I2C_state
 610 034c 4C0F0640 		.word	1074138956
 611 0350 00000000 		.word	I2C_slStatus
 612 0354 400F0640 		.word	1074138944
 613 0358 08020640 		.word	1074135560
 614 035c 00000000 		.word	I2C_slOverFlowCount
 615 0360 00000000 		.word	I2C_slRdBufIndexTmp
 616 0364 00000000 		.word	I2C_slRdBufIndex
 617 0368 880F0640 		.word	1074139016
 618 036c 04020640 		.word	1074135556
 619 0370 FFFFFEFF 		.word	-65537
 620 0374 60000640 		.word	1074135136
 621 0378 00000000 		.word	I2C_slWrBufIndex
 622 037c 00000000 		.word	I2C_slWrBufPtr
 623 0380 40030640 		.word	1074135872
 624 0384 08030640 		.word	1074135816
 625 0388 FF5FFFFF 		.word	-40961
 626 038c C00F0640 		.word	1074139072
 627 0390 C80F0640 		.word	1074139080
 628 0394 ED0F0000 		.word	4077
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 27


 629 0398 800E0640 		.word	1074138752
 630 039c 64000640 		.word	1074135140
 631 03a0 00000000 		.word	I2C_slWrBufSize
 632 03a4 FF0F0000 		.word	4095
 633 03a8 480F0640 		.word	1074138952
 634 03ac 6C000640 		.word	1074135148
 635 03b0 CC0F0640 		.word	1074139084
 636 03b4 8C0F0640 		.word	1074139020
 637 03b8 00000000 		.word	I2C_slRdBufSize
 638 03bc 00000000 		.word	I2C_slRdBufPtr
 639 03c0 40020640 		.word	1074135616
 640 03c4 800F0640 		.word	1074139008
 641 03c8 00000640 		.word	1074135040
 642 03cc FFFCFFFF 		.word	-769
 643              		.cfi_endproc
 644              	.LFE0:
 645              		.size	I2C_I2C_ISR, .-I2C_I2C_ISR
 646              		.text
 647              	.Letext0:
 648              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 649              		.file 3 ".\\Generated_Source\\PSoC4\\I2C_PVT.h"
 650              		.file 4 ".\\Generated_Source\\PSoC4\\I2C_I2C_PVT.h"
 651              		.file 5 ".\\Generated_Source\\PSoC4\\I2C.h"
 652              		.section	.debug_info,"",%progbits
 653              	.Ldebug_info0:
 654 0000 89010000 		.4byte	0x189
 655 0004 0400     		.2byte	0x4
 656 0006 00000000 		.4byte	.Ldebug_abbrev0
 657 000a 04       		.byte	0x4
 658 000b 01       		.uleb128 0x1
 659 000c CD010000 		.4byte	.LASF30
 660 0010 01       		.byte	0x1
 661 0011 95020000 		.4byte	.LASF31
 662 0015 5C000000 		.4byte	.LASF32
 663 0019 00000000 		.4byte	.Ldebug_ranges0+0
 664 001d 00000000 		.4byte	0
 665 0021 00000000 		.4byte	.Ldebug_line0
 666 0025 02       		.uleb128 0x2
 667 0026 01       		.byte	0x1
 668 0027 06       		.byte	0x6
 669 0028 89020000 		.4byte	.LASF0
 670 002c 02       		.uleb128 0x2
 671 002d 01       		.byte	0x1
 672 002e 08       		.byte	0x8
 673 002f 4E000000 		.4byte	.LASF1
 674 0033 02       		.uleb128 0x2
 675 0034 02       		.byte	0x2
 676 0035 05       		.byte	0x5
 677 0036 5B020000 		.4byte	.LASF2
 678 003a 02       		.uleb128 0x2
 679 003b 02       		.byte	0x2
 680 003c 07       		.byte	0x7
 681 003d 06000000 		.4byte	.LASF3
 682 0041 02       		.uleb128 0x2
 683 0042 04       		.byte	0x4
 684 0043 05       		.byte	0x5
 685 0044 80020000 		.4byte	.LASF4
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 28


 686 0048 02       		.uleb128 0x2
 687 0049 04       		.byte	0x4
 688 004a 07       		.byte	0x7
 689 004b E1000000 		.4byte	.LASF5
 690 004f 02       		.uleb128 0x2
 691 0050 08       		.byte	0x8
 692 0051 05       		.byte	0x5
 693 0052 BA010000 		.4byte	.LASF6
 694 0056 02       		.uleb128 0x2
 695 0057 08       		.byte	0x8
 696 0058 07       		.byte	0x7
 697 0059 5F010000 		.4byte	.LASF7
 698 005d 03       		.uleb128 0x3
 699 005e 04       		.byte	0x4
 700 005f 05       		.byte	0x5
 701 0060 696E7400 		.ascii	"int\000"
 702 0064 02       		.uleb128 0x2
 703 0065 04       		.byte	0x4
 704 0066 07       		.byte	0x7
 705 0067 52010000 		.4byte	.LASF8
 706 006b 04       		.uleb128 0x4
 707 006c FD000000 		.4byte	.LASF9
 708 0070 02       		.byte	0x2
 709 0071 9801     		.2byte	0x198
 710 0073 2C000000 		.4byte	0x2c
 711 0077 04       		.uleb128 0x4
 712 0078 4B010000 		.4byte	.LASF10
 713 007c 02       		.byte	0x2
 714 007d 9A01     		.2byte	0x19a
 715 007f 48000000 		.4byte	0x48
 716 0083 02       		.uleb128 0x2
 717 0084 04       		.byte	0x4
 718 0085 04       		.byte	0x4
 719 0086 3B000000 		.4byte	.LASF11
 720 008a 02       		.uleb128 0x2
 721 008b 08       		.byte	0x8
 722 008c 04       		.byte	0x4
 723 008d 33010000 		.4byte	.LASF12
 724 0091 02       		.uleb128 0x2
 725 0092 01       		.byte	0x1
 726 0093 08       		.byte	0x8
 727 0094 C8010000 		.4byte	.LASF13
 728 0098 05       		.uleb128 0x5
 729 0099 6B000000 		.4byte	0x6b
 730 009d 04       		.uleb128 0x4
 731 009e 00000000 		.4byte	.LASF14
 732 00a2 02       		.byte	0x2
 733 00a3 4402     		.2byte	0x244
 734 00a5 A9000000 		.4byte	0xa9
 735 00a9 05       		.uleb128 0x5
 736 00aa 77000000 		.4byte	0x77
 737 00ae 04       		.uleb128 0x4
 738 00af 85010000 		.4byte	.LASF15
 739 00b3 02       		.byte	0x2
 740 00b4 5402     		.2byte	0x254
 741 00b6 BA000000 		.4byte	0xba
 742 00ba 06       		.uleb128 0x6
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 29


 743 00bb 04       		.byte	0x4
 744 00bc C0000000 		.4byte	0xc0
 745 00c0 07       		.uleb128 0x7
 746 00c1 02       		.uleb128 0x2
 747 00c2 04       		.byte	0x4
 748 00c3 07       		.byte	0x7
 749 00c4 B1010000 		.4byte	.LASF16
 750 00c8 08       		.uleb128 0x8
 751 00c9 27010000 		.4byte	.LASF33
 752 00cd 01       		.byte	0x1
 753 00ce 25       		.byte	0x25
 754 00cf 00000000 		.4byte	.LFB0
 755 00d3 D0030000 		.4byte	.LFE0-.LFB0
 756 00d7 01       		.uleb128 0x1
 757 00d8 9C       		.byte	0x9c
 758 00d9 05010000 		.4byte	0x105
 759 00dd 09       		.uleb128 0x9
 760 00de F3000000 		.4byte	.LASF17
 761 00e2 01       		.byte	0x1
 762 00e3 27       		.byte	0x27
 763 00e4 77000000 		.4byte	0x77
 764 00e8 00000000 		.4byte	.LLST0
 765 00ec 09       		.uleb128 0x9
 766 00ed 19000000 		.4byte	.LASF18
 767 00f1 01       		.byte	0x1
 768 00f2 28       		.byte	0x28
 769 00f3 77000000 		.4byte	0x77
 770 00f7 6B000000 		.4byte	.LLST1
 771 00fb 0A       		.uleb128 0xa
 772 00fc A0020000 		.4byte	.LVL21
 773 0100 84010000 		.4byte	0x184
 774 0104 00       		.byte	0
 775 0105 0B       		.uleb128 0xb
 776 0106 25000000 		.4byte	.LASF19
 777 010a 03       		.byte	0x3
 778 010b 3A       		.byte	0x3a
 779 010c AE000000 		.4byte	0xae
 780 0110 0B       		.uleb128 0xb
 781 0111 76020000 		.4byte	.LASF20
 782 0115 04       		.byte	0x4
 783 0116 1D       		.byte	0x1d
 784 0117 98000000 		.4byte	0x98
 785 011b 0B       		.uleb128 0xb
 786 011c 41000000 		.4byte	.LASF21
 787 0120 04       		.byte	0x4
 788 0121 20       		.byte	0x20
 789 0122 98000000 		.4byte	0x98
 790 0126 0B       		.uleb128 0xb
 791 0127 A2010000 		.4byte	.LASF22
 792 012b 04       		.byte	0x4
 793 012c 23       		.byte	0x23
 794 012d 31010000 		.4byte	0x131
 795 0131 06       		.uleb128 0x6
 796 0132 04       		.byte	0x4
 797 0133 98000000 		.4byte	0x98
 798 0137 0B       		.uleb128 0xb
 799 0138 92010000 		.4byte	.LASF23
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 30


 800 013c 04       		.byte	0x4
 801 013d 24       		.byte	0x24
 802 013e A9000000 		.4byte	0xa9
 803 0142 0B       		.uleb128 0xb
 804 0143 3A010000 		.4byte	.LASF24
 805 0147 04       		.byte	0x4
 806 0148 25       		.byte	0x25
 807 0149 A9000000 		.4byte	0xa9
 808 014d 0B       		.uleb128 0xb
 809 014e 76010000 		.4byte	.LASF25
 810 0152 04       		.byte	0x4
 811 0153 28       		.byte	0x28
 812 0154 31010000 		.4byte	0x131
 813 0158 0B       		.uleb128 0xb
 814 0159 03010000 		.4byte	.LASF26
 815 015d 04       		.byte	0x4
 816 015e 29       		.byte	0x29
 817 015f A9000000 		.4byte	0xa9
 818 0163 0B       		.uleb128 0xb
 819 0164 65020000 		.4byte	.LASF27
 820 0168 04       		.byte	0x4
 821 0169 2A       		.byte	0x2a
 822 016a A9000000 		.4byte	0xa9
 823 016e 0B       		.uleb128 0xb
 824 016f D7020000 		.4byte	.LASF28
 825 0173 04       		.byte	0x4
 826 0174 2B       		.byte	0x2b
 827 0175 A9000000 		.4byte	0xa9
 828 0179 0B       		.uleb128 0xb
 829 017a 13010000 		.4byte	.LASF29
 830 017e 04       		.byte	0x4
 831 017f 2C       		.byte	0x2c
 832 0180 98000000 		.4byte	0x98
 833 0184 0C       		.uleb128 0xc
 834 0185 BC020000 		.4byte	.LASF34
 835 0189 05       		.byte	0x5
 836 018a 1005     		.2byte	0x510
 837 018c 00       		.byte	0
 838              		.section	.debug_abbrev,"",%progbits
 839              	.Ldebug_abbrev0:
 840 0000 01       		.uleb128 0x1
 841 0001 11       		.uleb128 0x11
 842 0002 01       		.byte	0x1
 843 0003 25       		.uleb128 0x25
 844 0004 0E       		.uleb128 0xe
 845 0005 13       		.uleb128 0x13
 846 0006 0B       		.uleb128 0xb
 847 0007 03       		.uleb128 0x3
 848 0008 0E       		.uleb128 0xe
 849 0009 1B       		.uleb128 0x1b
 850 000a 0E       		.uleb128 0xe
 851 000b 55       		.uleb128 0x55
 852 000c 17       		.uleb128 0x17
 853 000d 11       		.uleb128 0x11
 854 000e 01       		.uleb128 0x1
 855 000f 10       		.uleb128 0x10
 856 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 31


 857 0011 00       		.byte	0
 858 0012 00       		.byte	0
 859 0013 02       		.uleb128 0x2
 860 0014 24       		.uleb128 0x24
 861 0015 00       		.byte	0
 862 0016 0B       		.uleb128 0xb
 863 0017 0B       		.uleb128 0xb
 864 0018 3E       		.uleb128 0x3e
 865 0019 0B       		.uleb128 0xb
 866 001a 03       		.uleb128 0x3
 867 001b 0E       		.uleb128 0xe
 868 001c 00       		.byte	0
 869 001d 00       		.byte	0
 870 001e 03       		.uleb128 0x3
 871 001f 24       		.uleb128 0x24
 872 0020 00       		.byte	0
 873 0021 0B       		.uleb128 0xb
 874 0022 0B       		.uleb128 0xb
 875 0023 3E       		.uleb128 0x3e
 876 0024 0B       		.uleb128 0xb
 877 0025 03       		.uleb128 0x3
 878 0026 08       		.uleb128 0x8
 879 0027 00       		.byte	0
 880 0028 00       		.byte	0
 881 0029 04       		.uleb128 0x4
 882 002a 16       		.uleb128 0x16
 883 002b 00       		.byte	0
 884 002c 03       		.uleb128 0x3
 885 002d 0E       		.uleb128 0xe
 886 002e 3A       		.uleb128 0x3a
 887 002f 0B       		.uleb128 0xb
 888 0030 3B       		.uleb128 0x3b
 889 0031 05       		.uleb128 0x5
 890 0032 49       		.uleb128 0x49
 891 0033 13       		.uleb128 0x13
 892 0034 00       		.byte	0
 893 0035 00       		.byte	0
 894 0036 05       		.uleb128 0x5
 895 0037 35       		.uleb128 0x35
 896 0038 00       		.byte	0
 897 0039 49       		.uleb128 0x49
 898 003a 13       		.uleb128 0x13
 899 003b 00       		.byte	0
 900 003c 00       		.byte	0
 901 003d 06       		.uleb128 0x6
 902 003e 0F       		.uleb128 0xf
 903 003f 00       		.byte	0
 904 0040 0B       		.uleb128 0xb
 905 0041 0B       		.uleb128 0xb
 906 0042 49       		.uleb128 0x49
 907 0043 13       		.uleb128 0x13
 908 0044 00       		.byte	0
 909 0045 00       		.byte	0
 910 0046 07       		.uleb128 0x7
 911 0047 15       		.uleb128 0x15
 912 0048 00       		.byte	0
 913 0049 27       		.uleb128 0x27
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 32


 914 004a 19       		.uleb128 0x19
 915 004b 00       		.byte	0
 916 004c 00       		.byte	0
 917 004d 08       		.uleb128 0x8
 918 004e 2E       		.uleb128 0x2e
 919 004f 01       		.byte	0x1
 920 0050 3F       		.uleb128 0x3f
 921 0051 19       		.uleb128 0x19
 922 0052 03       		.uleb128 0x3
 923 0053 0E       		.uleb128 0xe
 924 0054 3A       		.uleb128 0x3a
 925 0055 0B       		.uleb128 0xb
 926 0056 3B       		.uleb128 0x3b
 927 0057 0B       		.uleb128 0xb
 928 0058 27       		.uleb128 0x27
 929 0059 19       		.uleb128 0x19
 930 005a 11       		.uleb128 0x11
 931 005b 01       		.uleb128 0x1
 932 005c 12       		.uleb128 0x12
 933 005d 06       		.uleb128 0x6
 934 005e 40       		.uleb128 0x40
 935 005f 18       		.uleb128 0x18
 936 0060 9642     		.uleb128 0x2116
 937 0062 19       		.uleb128 0x19
 938 0063 01       		.uleb128 0x1
 939 0064 13       		.uleb128 0x13
 940 0065 00       		.byte	0
 941 0066 00       		.byte	0
 942 0067 09       		.uleb128 0x9
 943 0068 34       		.uleb128 0x34
 944 0069 00       		.byte	0
 945 006a 03       		.uleb128 0x3
 946 006b 0E       		.uleb128 0xe
 947 006c 3A       		.uleb128 0x3a
 948 006d 0B       		.uleb128 0xb
 949 006e 3B       		.uleb128 0x3b
 950 006f 0B       		.uleb128 0xb
 951 0070 49       		.uleb128 0x49
 952 0071 13       		.uleb128 0x13
 953 0072 02       		.uleb128 0x2
 954 0073 17       		.uleb128 0x17
 955 0074 00       		.byte	0
 956 0075 00       		.byte	0
 957 0076 0A       		.uleb128 0xa
 958 0077 898201   		.uleb128 0x4109
 959 007a 00       		.byte	0
 960 007b 11       		.uleb128 0x11
 961 007c 01       		.uleb128 0x1
 962 007d 31       		.uleb128 0x31
 963 007e 13       		.uleb128 0x13
 964 007f 00       		.byte	0
 965 0080 00       		.byte	0
 966 0081 0B       		.uleb128 0xb
 967 0082 34       		.uleb128 0x34
 968 0083 00       		.byte	0
 969 0084 03       		.uleb128 0x3
 970 0085 0E       		.uleb128 0xe
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 33


 971 0086 3A       		.uleb128 0x3a
 972 0087 0B       		.uleb128 0xb
 973 0088 3B       		.uleb128 0x3b
 974 0089 0B       		.uleb128 0xb
 975 008a 49       		.uleb128 0x49
 976 008b 13       		.uleb128 0x13
 977 008c 3F       		.uleb128 0x3f
 978 008d 19       		.uleb128 0x19
 979 008e 3C       		.uleb128 0x3c
 980 008f 19       		.uleb128 0x19
 981 0090 00       		.byte	0
 982 0091 00       		.byte	0
 983 0092 0C       		.uleb128 0xc
 984 0093 2E       		.uleb128 0x2e
 985 0094 00       		.byte	0
 986 0095 3F       		.uleb128 0x3f
 987 0096 19       		.uleb128 0x19
 988 0097 03       		.uleb128 0x3
 989 0098 0E       		.uleb128 0xe
 990 0099 3A       		.uleb128 0x3a
 991 009a 0B       		.uleb128 0xb
 992 009b 3B       		.uleb128 0x3b
 993 009c 05       		.uleb128 0x5
 994 009d 27       		.uleb128 0x27
 995 009e 19       		.uleb128 0x19
 996 009f 3C       		.uleb128 0x3c
 997 00a0 19       		.uleb128 0x19
 998 00a1 00       		.byte	0
 999 00a2 00       		.byte	0
 1000 00a3 00       		.byte	0
 1001              		.section	.debug_loc,"",%progbits
 1002              	.Ldebug_loc0:
 1003              	.LLST0:
 1004 0000 9A000000 		.4byte	.LVL2
 1005 0004 AA000000 		.4byte	.LVL3
 1006 0008 0100     		.2byte	0x1
 1007 000a 53       		.byte	0x53
 1008 000b B0000000 		.4byte	.LVL4
 1009 000f B6000000 		.4byte	.LVL5
 1010 0013 0100     		.2byte	0x1
 1011 0015 53       		.byte	0x53
 1012 0016 B4010000 		.4byte	.LVL6
 1013 001a BC010000 		.4byte	.LVL7
 1014 001e 0100     		.2byte	0x1
 1015 0020 53       		.byte	0x53
 1016 0021 C0010000 		.4byte	.LVL8
 1017 0025 C8010000 		.4byte	.LVL9
 1018 0029 0100     		.2byte	0x1
 1019 002b 53       		.byte	0x53
 1020 002c D2010000 		.4byte	.LVL10
 1021 0030 D6010000 		.4byte	.LVL11
 1022 0034 0100     		.2byte	0x1
 1023 0036 53       		.byte	0x53
 1024 0037 1E020000 		.4byte	.LVL12
 1025 003b 26020000 		.4byte	.LVL13
 1026 003f 0100     		.2byte	0x1
 1027 0041 50       		.byte	0x50
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 34


 1028 0042 28020000 		.4byte	.LVL14
 1029 0046 68020000 		.4byte	.LVL17
 1030 004a 0100     		.2byte	0x1
 1031 004c 50       		.byte	0x50
 1032 004d 74020000 		.4byte	.LVL18
 1033 0051 92020000 		.4byte	.LVL19
 1034 0055 0100     		.2byte	0x1
 1035 0057 53       		.byte	0x53
 1036 0058 9C020000 		.4byte	.LVL20
 1037 005c 9F020000 		.4byte	.LVL21-1
 1038 0060 0100     		.2byte	0x1
 1039 0062 53       		.byte	0x53
 1040 0063 00000000 		.4byte	0
 1041 0067 00000000 		.4byte	0
 1042              	.LLST1:
 1043 006b 02000000 		.4byte	.LVL0
 1044 006f 2C020000 		.4byte	.LVL15
 1045 0073 0200     		.2byte	0x2
 1046 0075 30       		.byte	0x30
 1047 0076 9F       		.byte	0x9f
 1048 0077 2C020000 		.4byte	.LVL15
 1049 007b 68020000 		.4byte	.LVL17
 1050 007f 0100     		.2byte	0x1
 1051 0081 54       		.byte	0x54
 1052 0082 68020000 		.4byte	.LVL17
 1053 0086 B0020000 		.4byte	.LVL22
 1054 008a 0200     		.2byte	0x2
 1055 008c 30       		.byte	0x30
 1056 008d 9F       		.byte	0x9f
 1057 008e 0C030000 		.4byte	.LVL23
 1058 0092 38030000 		.4byte	.LVL24
 1059 0096 0200     		.2byte	0x2
 1060 0098 30       		.byte	0x30
 1061 0099 9F       		.byte	0x9f
 1062 009a 00000000 		.4byte	0
 1063 009e 00000000 		.4byte	0
 1064              		.section	.debug_aranges,"",%progbits
 1065 0000 1C000000 		.4byte	0x1c
 1066 0004 0200     		.2byte	0x2
 1067 0006 00000000 		.4byte	.Ldebug_info0
 1068 000a 04       		.byte	0x4
 1069 000b 00       		.byte	0
 1070 000c 0000     		.2byte	0
 1071 000e 0000     		.2byte	0
 1072 0010 00000000 		.4byte	.LFB0
 1073 0014 D0030000 		.4byte	.LFE0-.LFB0
 1074 0018 00000000 		.4byte	0
 1075 001c 00000000 		.4byte	0
 1076              		.section	.debug_ranges,"",%progbits
 1077              	.Ldebug_ranges0:
 1078 0000 00000000 		.4byte	.LFB0
 1079 0004 D0030000 		.4byte	.LFE0
 1080 0008 00000000 		.4byte	0
 1081 000c 00000000 		.4byte	0
 1082              		.section	.debug_line,"",%progbits
 1083              	.Ldebug_line0:
 1084 0000 40010000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 35


 1084      02008800 
 1084      00000201 
 1084      FB0E0D00 
 1084      01010101 
 1085              	.LASF14:
 1086 0000 72656733 		.ascii	"reg32\000"
 1086      3200
 1087              	.LASF3:
 1088 0006 73686F72 		.ascii	"short unsigned int\000"
 1088      7420756E 
 1088      7369676E 
 1088      65642069 
 1088      6E7400
 1089              	.LASF18:
 1090 0019 656E6454 		.ascii	"endTransfer\000"
 1090      72616E73 
 1090      66657200 
 1091              	.LASF19:
 1092 0025 4932435F 		.ascii	"I2C_customIntrHandler\000"
 1092      63757374 
 1092      6F6D496E 
 1092      74724861 
 1092      6E646C65 
 1093              	.LASF11:
 1094 003b 666C6F61 		.ascii	"float\000"
 1094      7400
 1095              	.LASF21:
 1096 0041 4932435F 		.ascii	"I2C_slStatus\000"
 1096      736C5374 
 1096      61747573 
 1096      00
 1097              	.LASF1:
 1098 004e 756E7369 		.ascii	"unsigned char\000"
 1098      676E6564 
 1098      20636861 
 1098      7200
 1099              	.LASF32:
 1100 005c 433A5C55 		.ascii	"C:\\Users\\Spitfire54444444\\Dropbox\\Projets\\Wave"
 1100      73657273 
 1100      5C537069 
 1100      74666972 
 1100      65353434 
 1101 008a 6C616220 		.ascii	"lab Technologies Inc\\RnD\\Projets\\Auto Shut-OFF\\"
 1101      54656368 
 1101      6E6F6C6F 
 1101      67696573 
 1101      20496E63 
 1102 00b9 4175746F 		.ascii	"Auto-Shut-OFF\\Auto Shut-OFF_SOIC8.cydsn\000"
 1102      2D536875 
 1102      742D4F46 
 1102      465C4175 
 1102      746F2053 
 1103              	.LASF5:
 1104 00e1 6C6F6E67 		.ascii	"long unsigned int\000"
 1104      20756E73 
 1104      69676E65 
 1104      6420696E 
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 36


 1104      7400
 1105              	.LASF17:
 1106 00f3 64696666 		.ascii	"diffCount\000"
 1106      436F756E 
 1106      7400
 1107              	.LASF9:
 1108 00fd 75696E74 		.ascii	"uint8\000"
 1108      3800
 1109              	.LASF26:
 1110 0103 4932435F 		.ascii	"I2C_slRdBufSize\000"
 1110      736C5264 
 1110      42756653 
 1110      697A6500 
 1111              	.LASF29:
 1112 0113 4932435F 		.ascii	"I2C_slOverFlowCount\000"
 1112      736C4F76 
 1112      6572466C 
 1112      6F77436F 
 1112      756E7400 
 1113              	.LASF33:
 1114 0127 4932435F 		.ascii	"I2C_I2C_ISR\000"
 1114      4932435F 
 1114      49535200 
 1115              	.LASF12:
 1116 0133 646F7562 		.ascii	"double\000"
 1116      6C6500
 1117              	.LASF24:
 1118 013a 4932435F 		.ascii	"I2C_slWrBufIndex\000"
 1118      736C5772 
 1118      42756649 
 1118      6E646578 
 1118      00
 1119              	.LASF10:
 1120 014b 75696E74 		.ascii	"uint32\000"
 1120      333200
 1121              	.LASF8:
 1122 0152 756E7369 		.ascii	"unsigned int\000"
 1122      676E6564 
 1122      20696E74 
 1122      00
 1123              	.LASF7:
 1124 015f 6C6F6E67 		.ascii	"long long unsigned int\000"
 1124      206C6F6E 
 1124      6720756E 
 1124      7369676E 
 1124      65642069 
 1125              	.LASF25:
 1126 0176 4932435F 		.ascii	"I2C_slRdBufPtr\000"
 1126      736C5264 
 1126      42756650 
 1126      747200
 1127              	.LASF15:
 1128 0185 63796973 		.ascii	"cyisraddress\000"
 1128      72616464 
 1128      72657373 
 1128      00
 1129              	.LASF23:
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 37


 1130 0192 4932435F 		.ascii	"I2C_slWrBufSize\000"
 1130      736C5772 
 1130      42756653 
 1130      697A6500 
 1131              	.LASF22:
 1132 01a2 4932435F 		.ascii	"I2C_slWrBufPtr\000"
 1132      736C5772 
 1132      42756650 
 1132      747200
 1133              	.LASF16:
 1134 01b1 73697A65 		.ascii	"sizetype\000"
 1134      74797065 
 1134      00
 1135              	.LASF6:
 1136 01ba 6C6F6E67 		.ascii	"long long int\000"
 1136      206C6F6E 
 1136      6720696E 
 1136      7400
 1137              	.LASF13:
 1138 01c8 63686172 		.ascii	"char\000"
 1138      00
 1139              	.LASF30:
 1140 01cd 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1140      4320342E 
 1140      392E3320 
 1140      32303135 
 1140      30333033 
 1141 0200 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1141      20726576 
 1141      6973696F 
 1141      6E203232 
 1141      31323230 
 1142 0233 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1142      66756E63 
 1142      74696F6E 
 1142      2D736563 
 1142      74696F6E 
 1143              	.LASF2:
 1144 025b 73686F72 		.ascii	"short int\000"
 1144      7420696E 
 1144      7400
 1145              	.LASF27:
 1146 0265 4932435F 		.ascii	"I2C_slRdBufIndex\000"
 1146      736C5264 
 1146      42756649 
 1146      6E646578 
 1146      00
 1147              	.LASF20:
 1148 0276 4932435F 		.ascii	"I2C_state\000"
 1148      73746174 
 1148      6500
 1149              	.LASF4:
 1150 0280 6C6F6E67 		.ascii	"long int\000"
 1150      20696E74 
 1150      00
 1151              	.LASF0:
 1152 0289 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\SPITFI~1\AppData\Local\Temp\ccg5BBt0.s 			page 38


 1152      65642063 
 1152      68617200 
 1153              	.LASF31:
 1154 0295 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\I2C_I2C_INT.c\000"
 1154      6E657261 
 1154      7465645F 
 1154      536F7572 
 1154      63655C50 
 1155              	.LASF34:
 1156 02bc 4932435F 		.ascii	"I2C_I2CSlaveNackGeneration\000"
 1156      49324353 
 1156      6C617665 
 1156      4E61636B 
 1156      47656E65 
 1157              	.LASF28:
 1158 02d7 4932435F 		.ascii	"I2C_slRdBufIndexTmp\000"
 1158      736C5264 
 1158      42756649 
 1158      6E646578 
 1158      546D7000 
 1159              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
